/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|*Target Instruction Enum Values                                              *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_INSTRINFO_ENUM
#undef GET_INSTRINFO_ENUM
namespace llvm {

namespace PPC {
  enum {
    PHI	= 0,
    INLINEASM	= 1,
    CFI_INSTRUCTION	= 2,
    EH_LABEL	= 3,
    GC_LABEL	= 4,
    KILL	= 5,
    EXTRACT_SUBREG	= 6,
    INSERT_SUBREG	= 7,
    IMPLICIT_DEF	= 8,
    SUBREG_TO_REG	= 9,
    COPY_TO_REGCLASS	= 10,
    DBG_VALUE	= 11,
    REG_SEQUENCE	= 12,
    COPY	= 13,
    BUNDLE	= 14,
    LIFETIME_START	= 15,
    LIFETIME_END	= 16,
    STACKMAP	= 17,
    PATCHPOINT	= 18,
    LOAD_STACK_GUARD	= 19,
    ADD4	= 20,
    ADD4TLS	= 21,
    ADD4o	= 22,
    ADD8	= 23,
    ADD8TLS	= 24,
    ADD8TLS_	= 25,
    ADD8o	= 26,
    ADDC	= 27,
    ADDC8	= 28,
    ADDC8o	= 29,
    ADDCo	= 30,
    ADDE	= 31,
    ADDE8	= 32,
    ADDE8o	= 33,
    ADDEo	= 34,
    ADDI	= 35,
    ADDI8	= 36,
    ADDIC	= 37,
    ADDIC8	= 38,
    ADDICo	= 39,
    ADDIS	= 40,
    ADDIS8	= 41,
    ADDISdtprelHA	= 42,
    ADDISdtprelHA32	= 43,
    ADDISgotTprelHA	= 44,
    ADDIStlsgdHA	= 45,
    ADDIStlsldHA	= 46,
    ADDIStocHA	= 47,
    ADDIdtprelL	= 48,
    ADDIdtprelL32	= 49,
    ADDItlsgdL	= 50,
    ADDItlsgdL32	= 51,
    ADDItlsldL	= 52,
    ADDItlsldL32	= 53,
    ADDItocL	= 54,
    ADDME	= 55,
    ADDME8	= 56,
    ADDME8o	= 57,
    ADDMEo	= 58,
    ADDZE	= 59,
    ADDZE8	= 60,
    ADDZE8o	= 61,
    ADDZEo	= 62,
    ADJCALLSTACKDOWN	= 63,
    ADJCALLSTACKUP	= 64,
    AND	= 65,
    AND8	= 66,
    AND8o	= 67,
    ANDC	= 68,
    ANDC8	= 69,
    ANDC8o	= 70,
    ANDCo	= 71,
    ANDISo	= 72,
    ANDISo8	= 73,
    ANDIo	= 74,
    ANDIo8	= 75,
    ANDIo_1_EQ_BIT	= 76,
    ANDIo_1_EQ_BIT8	= 77,
    ANDIo_1_GT_BIT	= 78,
    ANDIo_1_GT_BIT8	= 79,
    ANDo	= 80,
    ATOMIC_CMP_SWAP_I16	= 81,
    ATOMIC_CMP_SWAP_I32	= 82,
    ATOMIC_CMP_SWAP_I64	= 83,
    ATOMIC_CMP_SWAP_I8	= 84,
    ATOMIC_LOAD_ADD_I16	= 85,
    ATOMIC_LOAD_ADD_I32	= 86,
    ATOMIC_LOAD_ADD_I64	= 87,
    ATOMIC_LOAD_ADD_I8	= 88,
    ATOMIC_LOAD_AND_I16	= 89,
    ATOMIC_LOAD_AND_I32	= 90,
    ATOMIC_LOAD_AND_I64	= 91,
    ATOMIC_LOAD_AND_I8	= 92,
    ATOMIC_LOAD_NAND_I16	= 93,
    ATOMIC_LOAD_NAND_I32	= 94,
    ATOMIC_LOAD_NAND_I64	= 95,
    ATOMIC_LOAD_NAND_I8	= 96,
    ATOMIC_LOAD_OR_I16	= 97,
    ATOMIC_LOAD_OR_I32	= 98,
    ATOMIC_LOAD_OR_I64	= 99,
    ATOMIC_LOAD_OR_I8	= 100,
    ATOMIC_LOAD_SUB_I16	= 101,
    ATOMIC_LOAD_SUB_I32	= 102,
    ATOMIC_LOAD_SUB_I64	= 103,
    ATOMIC_LOAD_SUB_I8	= 104,
    ATOMIC_LOAD_XOR_I16	= 105,
    ATOMIC_LOAD_XOR_I32	= 106,
    ATOMIC_LOAD_XOR_I64	= 107,
    ATOMIC_LOAD_XOR_I8	= 108,
    ATOMIC_SWAP_I16	= 109,
    ATOMIC_SWAP_I32	= 110,
    ATOMIC_SWAP_I64	= 111,
    ATOMIC_SWAP_I8	= 112,
    B	= 113,
    BA	= 114,
    BC	= 115,
    BCC	= 116,
    BCCA	= 117,
    BCCCTR	= 118,
    BCCCTR8	= 119,
    BCCCTRL	= 120,
    BCCCTRL8	= 121,
    BCCL	= 122,
    BCCLA	= 123,
    BCCLR	= 124,
    BCCLRL	= 125,
    BCCTR	= 126,
    BCCTR8	= 127,
    BCCTR8n	= 128,
    BCCTRL	= 129,
    BCCTRL8	= 130,
    BCCTRL8n	= 131,
    BCCTRLn	= 132,
    BCCTRn	= 133,
    BCL	= 134,
    BCLR	= 135,
    BCLRL	= 136,
    BCLRLn	= 137,
    BCLRn	= 138,
    BCLalways	= 139,
    BCLn	= 140,
    BCTR	= 141,
    BCTR8	= 142,
    BCTRL	= 143,
    BCTRL8	= 144,
    BCn	= 145,
    BDNZ	= 146,
    BDNZ8	= 147,
    BDNZA	= 148,
    BDNZAm	= 149,
    BDNZAp	= 150,
    BDNZL	= 151,
    BDNZLA	= 152,
    BDNZLAm	= 153,
    BDNZLAp	= 154,
    BDNZLR	= 155,
    BDNZLR8	= 156,
    BDNZLRL	= 157,
    BDNZLRLm	= 158,
    BDNZLRLp	= 159,
    BDNZLRm	= 160,
    BDNZLRp	= 161,
    BDNZLm	= 162,
    BDNZLp	= 163,
    BDNZm	= 164,
    BDNZp	= 165,
    BDZ	= 166,
    BDZ8	= 167,
    BDZA	= 168,
    BDZAm	= 169,
    BDZAp	= 170,
    BDZL	= 171,
    BDZLA	= 172,
    BDZLAm	= 173,
    BDZLAp	= 174,
    BDZLR	= 175,
    BDZLR8	= 176,
    BDZLRL	= 177,
    BDZLRLm	= 178,
    BDZLRLp	= 179,
    BDZLRm	= 180,
    BDZLRp	= 181,
    BDZLm	= 182,
    BDZLp	= 183,
    BDZm	= 184,
    BDZp	= 185,
    BL	= 186,
    BL8	= 187,
    BL8_NOP	= 188,
    BL8_NOP_TLS	= 189,
    BL8_TLS	= 190,
    BL8_TLS_	= 191,
    BLA	= 192,
    BLA8	= 193,
    BLA8_NOP	= 194,
    BLR	= 195,
    BLRL	= 196,
    BL_TLS	= 197,
    CLRLSLDI	= 198,
    CLRLSLDIo	= 199,
    CLRLSLWI	= 200,
    CLRLSLWIo	= 201,
    CLRRDI	= 202,
    CLRRDIo	= 203,
    CLRRWI	= 204,
    CLRRWIo	= 205,
    CMPD	= 206,
    CMPDI	= 207,
    CMPLD	= 208,
    CMPLDI	= 209,
    CMPLW	= 210,
    CMPLWI	= 211,
    CMPW	= 212,
    CMPWI	= 213,
    CNTLZD	= 214,
    CNTLZDo	= 215,
    CNTLZW	= 216,
    CNTLZWo	= 217,
    CR6SET	= 218,
    CR6UNSET	= 219,
    CRAND	= 220,
    CRANDC	= 221,
    CREQV	= 222,
    CRNAND	= 223,
    CRNOR	= 224,
    CROR	= 225,
    CRORC	= 226,
    CRSET	= 227,
    CRUNSET	= 228,
    CRXOR	= 229,
    DCBA	= 230,
    DCBF	= 231,
    DCBI	= 232,
    DCBST	= 233,
    DCBT	= 234,
    DCBTST	= 235,
    DCBZ	= 236,
    DCBZL	= 237,
    DIVD	= 238,
    DIVDU	= 239,
    DIVDUo	= 240,
    DIVDo	= 241,
    DIVW	= 242,
    DIVWU	= 243,
    DIVWUo	= 244,
    DIVWo	= 245,
    DSS	= 246,
    DSSALL	= 247,
    DST	= 248,
    DST64	= 249,
    DSTST	= 250,
    DSTST64	= 251,
    DSTSTT	= 252,
    DSTSTT64	= 253,
    DSTT	= 254,
    DSTT64	= 255,
    DYNALLOC	= 256,
    DYNALLOC8	= 257,
    EH_SjLj_LongJmp32	= 258,
    EH_SjLj_LongJmp64	= 259,
    EH_SjLj_SetJmp32	= 260,
    EH_SjLj_SetJmp64	= 261,
    EH_SjLj_Setup	= 262,
    EIEIO	= 263,
    EQV	= 264,
    EQV8	= 265,
    EQV8o	= 266,
    EQVo	= 267,
    EXTLDI	= 268,
    EXTLDIo	= 269,
    EXTLWI	= 270,
    EXTLWIo	= 271,
    EXTRDI	= 272,
    EXTRDIo	= 273,
    EXTRWI	= 274,
    EXTRWIo	= 275,
    EXTSB	= 276,
    EXTSB8	= 277,
    EXTSB8_32_64	= 278,
    EXTSB8o	= 279,
    EXTSBo	= 280,
    EXTSH	= 281,
    EXTSH8	= 282,
    EXTSH8_32_64	= 283,
    EXTSH8o	= 284,
    EXTSHo	= 285,
    EXTSW	= 286,
    EXTSW_32_64	= 287,
    EXTSW_32_64o	= 288,
    EXTSWo	= 289,
    FABSD	= 290,
    FABSDo	= 291,
    FABSS	= 292,
    FABSSo	= 293,
    FADD	= 294,
    FADDS	= 295,
    FADDSo	= 296,
    FADDo	= 297,
    FADDrtz	= 298,
    FCFID	= 299,
    FCFIDS	= 300,
    FCFIDSo	= 301,
    FCFIDU	= 302,
    FCFIDUS	= 303,
    FCFIDUSo	= 304,
    FCFIDUo	= 305,
    FCFIDo	= 306,
    FCMPUD	= 307,
    FCMPUS	= 308,
    FCPSGND	= 309,
    FCPSGNDo	= 310,
    FCPSGNS	= 311,
    FCPSGNSo	= 312,
    FCTID	= 313,
    FCTIDUZ	= 314,
    FCTIDUZo	= 315,
    FCTIDZ	= 316,
    FCTIDZo	= 317,
    FCTIDo	= 318,
    FCTIW	= 319,
    FCTIWUZ	= 320,
    FCTIWUZo	= 321,
    FCTIWZ	= 322,
    FCTIWZo	= 323,
    FCTIWo	= 324,
    FDIV	= 325,
    FDIVS	= 326,
    FDIVSo	= 327,
    FDIVo	= 328,
    FMADD	= 329,
    FMADDS	= 330,
    FMADDSo	= 331,
    FMADDo	= 332,
    FMR	= 333,
    FMRo	= 334,
    FMSUB	= 335,
    FMSUBS	= 336,
    FMSUBSo	= 337,
    FMSUBo	= 338,
    FMUL	= 339,
    FMULS	= 340,
    FMULSo	= 341,
    FMULo	= 342,
    FNABSD	= 343,
    FNABSDo	= 344,
    FNABSS	= 345,
    FNABSSo	= 346,
    FNEGD	= 347,
    FNEGDo	= 348,
    FNEGS	= 349,
    FNEGSo	= 350,
    FNMADD	= 351,
    FNMADDS	= 352,
    FNMADDSo	= 353,
    FNMADDo	= 354,
    FNMSUB	= 355,
    FNMSUBS	= 356,
    FNMSUBSo	= 357,
    FNMSUBo	= 358,
    FRE	= 359,
    FRES	= 360,
    FRESo	= 361,
    FREo	= 362,
    FRIMD	= 363,
    FRIMDo	= 364,
    FRIMS	= 365,
    FRIMSo	= 366,
    FRIND	= 367,
    FRINDo	= 368,
    FRINS	= 369,
    FRINSo	= 370,
    FRIPD	= 371,
    FRIPDo	= 372,
    FRIPS	= 373,
    FRIPSo	= 374,
    FRIZD	= 375,
    FRIZDo	= 376,
    FRIZS	= 377,
    FRIZSo	= 378,
    FRSP	= 379,
    FRSPo	= 380,
    FRSQRTE	= 381,
    FRSQRTES	= 382,
    FRSQRTESo	= 383,
    FRSQRTEo	= 384,
    FSELD	= 385,
    FSELDo	= 386,
    FSELS	= 387,
    FSELSo	= 388,
    FSQRT	= 389,
    FSQRTS	= 390,
    FSQRTSo	= 391,
    FSQRTo	= 392,
    FSUB	= 393,
    FSUBS	= 394,
    FSUBSo	= 395,
    FSUBo	= 396,
    GETtlsADDR	= 397,
    GETtlsADDR32	= 398,
    GETtlsldADDR	= 399,
    GETtlsldADDR32	= 400,
    GetGBRO	= 401,
    ICBI	= 402,
    INSLWI	= 403,
    INSLWIo	= 404,
    INSRDI	= 405,
    INSRDIo	= 406,
    INSRWI	= 407,
    INSRWIo	= 408,
    ISEL	= 409,
    ISEL8	= 410,
    ISYNC	= 411,
    LA	= 412,
    LAx	= 413,
    LBZ	= 414,
    LBZ8	= 415,
    LBZU	= 416,
    LBZU8	= 417,
    LBZUX	= 418,
    LBZUX8	= 419,
    LBZX	= 420,
    LBZX8	= 421,
    LD	= 422,
    LDARX	= 423,
    LDBRX	= 424,
    LDU	= 425,
    LDUX	= 426,
    LDX	= 427,
    LDgotTprelL	= 428,
    LDgotTprelL32	= 429,
    LDinto_toc	= 430,
    LDtoc	= 431,
    LDtocCPT	= 432,
    LDtocJTI	= 433,
    LDtocL	= 434,
    LFD	= 435,
    LFDU	= 436,
    LFDUX	= 437,
    LFDX	= 438,
    LFIWAX	= 439,
    LFIWZX	= 440,
    LFS	= 441,
    LFSU	= 442,
    LFSUX	= 443,
    LFSX	= 444,
    LHA	= 445,
    LHA8	= 446,
    LHAU	= 447,
    LHAU8	= 448,
    LHAUX	= 449,
    LHAUX8	= 450,
    LHAX	= 451,
    LHAX8	= 452,
    LHBRX	= 453,
    LHZ	= 454,
    LHZ8	= 455,
    LHZU	= 456,
    LHZU8	= 457,
    LHZUX	= 458,
    LHZUX8	= 459,
    LHZX	= 460,
    LHZX8	= 461,
    LI	= 462,
    LI8	= 463,
    LIS	= 464,
    LIS8	= 465,
    LMW	= 466,
    LVEBX	= 467,
    LVEHX	= 468,
    LVEWX	= 469,
    LVSL	= 470,
    LVSR	= 471,
    LVX	= 472,
    LVXL	= 473,
    LWA	= 474,
    LWARX	= 475,
    LWAUX	= 476,
    LWAX	= 477,
    LWAX_32	= 478,
    LWA_32	= 479,
    LWBRX	= 480,
    LWZ	= 481,
    LWZ8	= 482,
    LWZU	= 483,
    LWZU8	= 484,
    LWZUX	= 485,
    LWZUX8	= 486,
    LWZX	= 487,
    LWZX8	= 488,
    LWZtoc	= 489,
    LXSDX	= 490,
    LXVD2X	= 491,
    LXVDSX	= 492,
    LXVW4X	= 493,
    MCRF	= 494,
    MFCR	= 495,
    MFCR8	= 496,
    MFCTR	= 497,
    MFCTR8	= 498,
    MFFS	= 499,
    MFLR	= 500,
    MFLR8	= 501,
    MFMSR	= 502,
    MFOCRF	= 503,
    MFOCRF8	= 504,
    MFSPR	= 505,
    MFTB	= 506,
    MFTB8	= 507,
    MFVRSAVE	= 508,
    MFVRSAVEv	= 509,
    MFVSCR	= 510,
    MSYNC	= 511,
    MTCRF	= 512,
    MTCRF8	= 513,
    MTCTR	= 514,
    MTCTR8	= 515,
    MTCTR8loop	= 516,
    MTCTRloop	= 517,
    MTFSB0	= 518,
    MTFSB1	= 519,
    MTFSF	= 520,
    MTLR	= 521,
    MTLR8	= 522,
    MTMSR	= 523,
    MTMSRD	= 524,
    MTOCRF	= 525,
    MTOCRF8	= 526,
    MTSPR	= 527,
    MTVRSAVE	= 528,
    MTVRSAVEv	= 529,
    MTVSCR	= 530,
    MULHD	= 531,
    MULHDU	= 532,
    MULHDUo	= 533,
    MULHDo	= 534,
    MULHW	= 535,
    MULHWU	= 536,
    MULHWUo	= 537,
    MULHWo	= 538,
    MULLD	= 539,
    MULLDo	= 540,
    MULLI	= 541,
    MULLI8	= 542,
    MULLW	= 543,
    MULLWo	= 544,
    MovePCtoLR	= 545,
    MovePCtoLR8	= 546,
    NAND	= 547,
    NAND8	= 548,
    NAND8o	= 549,
    NANDo	= 550,
    NEG	= 551,
    NEG8	= 552,
    NEG8o	= 553,
    NEGo	= 554,
    NOP	= 555,
    NOP_GT_PWR6	= 556,
    NOP_GT_PWR7	= 557,
    NOR	= 558,
    NOR8	= 559,
    NOR8o	= 560,
    NORo	= 561,
    OR	= 562,
    OR8	= 563,
    OR8o	= 564,
    ORC	= 565,
    ORC8	= 566,
    ORC8o	= 567,
    ORCo	= 568,
    ORI	= 569,
    ORI8	= 570,
    ORIS	= 571,
    ORIS8	= 572,
    ORo	= 573,
    POPCNTD	= 574,
    POPCNTW	= 575,
    PPC32GOT	= 576,
    PPC32PICGOT	= 577,
    RESTORE_CR	= 578,
    RESTORE_CRBIT	= 579,
    RESTORE_VRSAVE	= 580,
    RLDCL	= 581,
    RLDCLo	= 582,
    RLDCR	= 583,
    RLDCRo	= 584,
    RLDIC	= 585,
    RLDICL	= 586,
    RLDICL_32_64	= 587,
    RLDICLo	= 588,
    RLDICR	= 589,
    RLDICRo	= 590,
    RLDICo	= 591,
    RLDIMI	= 592,
    RLDIMIo	= 593,
    RLWIMI	= 594,
    RLWIMI8	= 595,
    RLWIMI8o	= 596,
    RLWIMIo	= 597,
    RLWINM	= 598,
    RLWINM8	= 599,
    RLWINM8o	= 600,
    RLWINMo	= 601,
    RLWNM	= 602,
    RLWNMo	= 603,
    ROTRDI	= 604,
    ROTRDIo	= 605,
    ROTRWI	= 606,
    ROTRWIo	= 607,
    SC	= 608,
    SELECT_CC_F4	= 609,
    SELECT_CC_F8	= 610,
    SELECT_CC_I4	= 611,
    SELECT_CC_I8	= 612,
    SELECT_CC_VRRC	= 613,
    SELECT_F4	= 614,
    SELECT_F8	= 615,
    SELECT_I4	= 616,
    SELECT_I8	= 617,
    SELECT_VRRC	= 618,
    SLBIA	= 619,
    SLBIE	= 620,
    SLBMFEE	= 621,
    SLBMTE	= 622,
    SLD	= 623,
    SLDI	= 624,
    SLDIo	= 625,
    SLDo	= 626,
    SLW	= 627,
    SLWI	= 628,
    SLWIo	= 629,
    SLWo	= 630,
    SPILL_CR	= 631,
    SPILL_CRBIT	= 632,
    SPILL_VRSAVE	= 633,
    SRAD	= 634,
    SRADI	= 635,
    SRADIo	= 636,
    SRADo	= 637,
    SRAW	= 638,
    SRAWI	= 639,
    SRAWIo	= 640,
    SRAWo	= 641,
    SRD	= 642,
    SRDI	= 643,
    SRDIo	= 644,
    SRDo	= 645,
    SRW	= 646,
    SRWI	= 647,
    SRWIo	= 648,
    SRWo	= 649,
    STB	= 650,
    STB8	= 651,
    STBU	= 652,
    STBU8	= 653,
    STBUX	= 654,
    STBUX8	= 655,
    STBX	= 656,
    STBX8	= 657,
    STD	= 658,
    STDBRX	= 659,
    STDCX	= 660,
    STDU	= 661,
    STDUX	= 662,
    STDX	= 663,
    STFD	= 664,
    STFDU	= 665,
    STFDUX	= 666,
    STFDX	= 667,
    STFIWX	= 668,
    STFS	= 669,
    STFSU	= 670,
    STFSUX	= 671,
    STFSX	= 672,
    STH	= 673,
    STH8	= 674,
    STHBRX	= 675,
    STHU	= 676,
    STHU8	= 677,
    STHUX	= 678,
    STHUX8	= 679,
    STHX	= 680,
    STHX8	= 681,
    STMW	= 682,
    STVEBX	= 683,
    STVEHX	= 684,
    STVEWX	= 685,
    STVX	= 686,
    STVXL	= 687,
    STW	= 688,
    STW8	= 689,
    STWBRX	= 690,
    STWCX	= 691,
    STWU	= 692,
    STWU8	= 693,
    STWUX	= 694,
    STWUX8	= 695,
    STWX	= 696,
    STWX8	= 697,
    STXSDX	= 698,
    STXVD2X	= 699,
    STXVW4X	= 700,
    SUBF	= 701,
    SUBF8	= 702,
    SUBF8o	= 703,
    SUBFC	= 704,
    SUBFC8	= 705,
    SUBFC8o	= 706,
    SUBFCo	= 707,
    SUBFE	= 708,
    SUBFE8	= 709,
    SUBFE8o	= 710,
    SUBFEo	= 711,
    SUBFIC	= 712,
    SUBFIC8	= 713,
    SUBFME	= 714,
    SUBFME8	= 715,
    SUBFME8o	= 716,
    SUBFMEo	= 717,
    SUBFZE	= 718,
    SUBFZE8	= 719,
    SUBFZE8o	= 720,
    SUBFZEo	= 721,
    SUBFo	= 722,
    SUBI	= 723,
    SUBIC	= 724,
    SUBICo	= 725,
    SUBIS	= 726,
    SYNC	= 727,
    TAILB	= 728,
    TAILB8	= 729,
    TAILBA	= 730,
    TAILBA8	= 731,
    TAILBCTR	= 732,
    TAILBCTR8	= 733,
    TCRETURNai	= 734,
    TCRETURNai8	= 735,
    TCRETURNdi	= 736,
    TCRETURNdi8	= 737,
    TCRETURNri	= 738,
    TCRETURNri8	= 739,
    TD	= 740,
    TDI	= 741,
    TLBIE	= 742,
    TLBIEL	= 743,
    TLBSYNC	= 744,
    TRAP	= 745,
    TW	= 746,
    TWI	= 747,
    UPDATE_VRSAVE	= 748,
    UpdateGBR	= 749,
    VADDCUW	= 750,
    VADDFP	= 751,
    VADDSBS	= 752,
    VADDSHS	= 753,
    VADDSWS	= 754,
    VADDUBM	= 755,
    VADDUBS	= 756,
    VADDUHM	= 757,
    VADDUHS	= 758,
    VADDUWM	= 759,
    VADDUWS	= 760,
    VAND	= 761,
    VANDC	= 762,
    VAVGSB	= 763,
    VAVGSH	= 764,
    VAVGSW	= 765,
    VAVGUB	= 766,
    VAVGUH	= 767,
    VAVGUW	= 768,
    VCFSX	= 769,
    VCFSX_0	= 770,
    VCFUX	= 771,
    VCFUX_0	= 772,
    VCMPBFP	= 773,
    VCMPBFPo	= 774,
    VCMPEQFP	= 775,
    VCMPEQFPo	= 776,
    VCMPEQUB	= 777,
    VCMPEQUBo	= 778,
    VCMPEQUH	= 779,
    VCMPEQUHo	= 780,
    VCMPEQUW	= 781,
    VCMPEQUWo	= 782,
    VCMPGEFP	= 783,
    VCMPGEFPo	= 784,
    VCMPGTFP	= 785,
    VCMPGTFPo	= 786,
    VCMPGTSB	= 787,
    VCMPGTSBo	= 788,
    VCMPGTSH	= 789,
    VCMPGTSHo	= 790,
    VCMPGTSW	= 791,
    VCMPGTSWo	= 792,
    VCMPGTUB	= 793,
    VCMPGTUBo	= 794,
    VCMPGTUH	= 795,
    VCMPGTUHo	= 796,
    VCMPGTUW	= 797,
    VCMPGTUWo	= 798,
    VCTSXS	= 799,
    VCTSXS_0	= 800,
    VCTUXS	= 801,
    VCTUXS_0	= 802,
    VEXPTEFP	= 803,
    VLOGEFP	= 804,
    VMADDFP	= 805,
    VMAXFP	= 806,
    VMAXSB	= 807,
    VMAXSH	= 808,
    VMAXSW	= 809,
    VMAXUB	= 810,
    VMAXUH	= 811,
    VMAXUW	= 812,
    VMHADDSHS	= 813,
    VMHRADDSHS	= 814,
    VMINFP	= 815,
    VMINSB	= 816,
    VMINSH	= 817,
    VMINSW	= 818,
    VMINUB	= 819,
    VMINUH	= 820,
    VMINUW	= 821,
    VMLADDUHM	= 822,
    VMRGHB	= 823,
    VMRGHH	= 824,
    VMRGHW	= 825,
    VMRGLB	= 826,
    VMRGLH	= 827,
    VMRGLW	= 828,
    VMSUMMBM	= 829,
    VMSUMSHM	= 830,
    VMSUMSHS	= 831,
    VMSUMUBM	= 832,
    VMSUMUHM	= 833,
    VMSUMUHS	= 834,
    VMULESB	= 835,
    VMULESH	= 836,
    VMULEUB	= 837,
    VMULEUH	= 838,
    VMULOSB	= 839,
    VMULOSH	= 840,
    VMULOUB	= 841,
    VMULOUH	= 842,
    VNMSUBFP	= 843,
    VNOR	= 844,
    VOR	= 845,
    VPERM	= 846,
    VPKPX	= 847,
    VPKSHSS	= 848,
    VPKSHUS	= 849,
    VPKSWSS	= 850,
    VPKSWUS	= 851,
    VPKUHUM	= 852,
    VPKUHUS	= 853,
    VPKUWUM	= 854,
    VPKUWUS	= 855,
    VREFP	= 856,
    VRFIM	= 857,
    VRFIN	= 858,
    VRFIP	= 859,
    VRFIZ	= 860,
    VRLB	= 861,
    VRLH	= 862,
    VRLW	= 863,
    VRSQRTEFP	= 864,
    VSEL	= 865,
    VSL	= 866,
    VSLB	= 867,
    VSLDOI	= 868,
    VSLH	= 869,
    VSLO	= 870,
    VSLW	= 871,
    VSPLTB	= 872,
    VSPLTH	= 873,
    VSPLTISB	= 874,
    VSPLTISH	= 875,
    VSPLTISW	= 876,
    VSPLTW	= 877,
    VSR	= 878,
    VSRAB	= 879,
    VSRAH	= 880,
    VSRAW	= 881,
    VSRB	= 882,
    VSRH	= 883,
    VSRO	= 884,
    VSRW	= 885,
    VSUBCUW	= 886,
    VSUBFP	= 887,
    VSUBSBS	= 888,
    VSUBSHS	= 889,
    VSUBSWS	= 890,
    VSUBUBM	= 891,
    VSUBUBS	= 892,
    VSUBUHM	= 893,
    VSUBUHS	= 894,
    VSUBUWM	= 895,
    VSUBUWS	= 896,
    VSUM2SWS	= 897,
    VSUM4SBS	= 898,
    VSUM4SHS	= 899,
    VSUM4UBS	= 900,
    VSUMSWS	= 901,
    VUPKHPX	= 902,
    VUPKHSB	= 903,
    VUPKHSH	= 904,
    VUPKLPX	= 905,
    VUPKLSB	= 906,
    VUPKLSH	= 907,
    VXOR	= 908,
    V_SET0	= 909,
    V_SET0B	= 910,
    V_SET0H	= 911,
    V_SETALLONES	= 912,
    V_SETALLONESB	= 913,
    V_SETALLONESH	= 914,
    WAIT	= 915,
    XOR	= 916,
    XOR8	= 917,
    XOR8o	= 918,
    XORI	= 919,
    XORI8	= 920,
    XORIS	= 921,
    XORIS8	= 922,
    XORo	= 923,
    XSABSDP	= 924,
    XSADDDP	= 925,
    XSCMPODP	= 926,
    XSCMPUDP	= 927,
    XSCPSGNDP	= 928,
    XSCVDPSP	= 929,
    XSCVDPSXDS	= 930,
    XSCVDPSXWS	= 931,
    XSCVDPUXDS	= 932,
    XSCVDPUXWS	= 933,
    XSCVSPDP	= 934,
    XSCVSXDDP	= 935,
    XSCVUXDDP	= 936,
    XSDIVDP	= 937,
    XSMADDADP	= 938,
    XSMADDMDP	= 939,
    XSMAXDP	= 940,
    XSMINDP	= 941,
    XSMSUBADP	= 942,
    XSMSUBMDP	= 943,
    XSMULDP	= 944,
    XSNABSDP	= 945,
    XSNEGDP	= 946,
    XSNMADDADP	= 947,
    XSNMADDMDP	= 948,
    XSNMSUBADP	= 949,
    XSNMSUBMDP	= 950,
    XSRDPI	= 951,
    XSRDPIC	= 952,
    XSRDPIM	= 953,
    XSRDPIP	= 954,
    XSRDPIZ	= 955,
    XSREDP	= 956,
    XSRSQRTEDP	= 957,
    XSSQRTDP	= 958,
    XSSUBDP	= 959,
    XSTDIVDP	= 960,
    XSTSQRTDP	= 961,
    XVABSDP	= 962,
    XVABSSP	= 963,
    XVADDDP	= 964,
    XVADDSP	= 965,
    XVCMPEQDP	= 966,
    XVCMPEQDPo	= 967,
    XVCMPEQSP	= 968,
    XVCMPEQSPo	= 969,
    XVCMPGEDP	= 970,
    XVCMPGEDPo	= 971,
    XVCMPGESP	= 972,
    XVCMPGESPo	= 973,
    XVCMPGTDP	= 974,
    XVCMPGTDPo	= 975,
    XVCMPGTSP	= 976,
    XVCMPGTSPo	= 977,
    XVCPSGNDP	= 978,
    XVCPSGNSP	= 979,
    XVCVDPSP	= 980,
    XVCVDPSXDS	= 981,
    XVCVDPSXWS	= 982,
    XVCVDPUXDS	= 983,
    XVCVDPUXWS	= 984,
    XVCVSPDP	= 985,
    XVCVSPSXDS	= 986,
    XVCVSPSXWS	= 987,
    XVCVSPUXDS	= 988,
    XVCVSPUXWS	= 989,
    XVCVSXDDP	= 990,
    XVCVSXDSP	= 991,
    XVCVSXWDP	= 992,
    XVCVSXWSP	= 993,
    XVCVUXDDP	= 994,
    XVCVUXDSP	= 995,
    XVCVUXWDP	= 996,
    XVCVUXWSP	= 997,
    XVDIVDP	= 998,
    XVDIVSP	= 999,
    XVMADDADP	= 1000,
    XVMADDASP	= 1001,
    XVMADDMDP	= 1002,
    XVMADDMSP	= 1003,
    XVMAXDP	= 1004,
    XVMAXSP	= 1005,
    XVMINDP	= 1006,
    XVMINSP	= 1007,
    XVMSUBADP	= 1008,
    XVMSUBASP	= 1009,
    XVMSUBMDP	= 1010,
    XVMSUBMSP	= 1011,
    XVMULDP	= 1012,
    XVMULSP	= 1013,
    XVNABSDP	= 1014,
    XVNABSSP	= 1015,
    XVNEGDP	= 1016,
    XVNEGSP	= 1017,
    XVNMADDADP	= 1018,
    XVNMADDASP	= 1019,
    XVNMADDMDP	= 1020,
    XVNMADDMSP	= 1021,
    XVNMSUBADP	= 1022,
    XVNMSUBASP	= 1023,
    XVNMSUBMDP	= 1024,
    XVNMSUBMSP	= 1025,
    XVRDPI	= 1026,
    XVRDPIC	= 1027,
    XVRDPIM	= 1028,
    XVRDPIP	= 1029,
    XVRDPIZ	= 1030,
    XVREDP	= 1031,
    XVRESP	= 1032,
    XVRSPI	= 1033,
    XVRSPIC	= 1034,
    XVRSPIM	= 1035,
    XVRSPIP	= 1036,
    XVRSPIZ	= 1037,
    XVRSQRTEDP	= 1038,
    XVRSQRTESP	= 1039,
    XVSQRTDP	= 1040,
    XVSQRTSP	= 1041,
    XVSUBDP	= 1042,
    XVSUBSP	= 1043,
    XVTDIVDP	= 1044,
    XVTDIVSP	= 1045,
    XVTSQRTDP	= 1046,
    XVTSQRTSP	= 1047,
    XXLAND	= 1048,
    XXLANDC	= 1049,
    XXLNOR	= 1050,
    XXLOR	= 1051,
    XXLORf	= 1052,
    XXLXOR	= 1053,
    XXMRGHW	= 1054,
    XXMRGLW	= 1055,
    XXPERMDI	= 1056,
    XXSEL	= 1057,
    XXSLDWI	= 1058,
    XXSPLTW	= 1059,
    gBC	= 1060,
    gBCA	= 1061,
    gBCCTR	= 1062,
    gBCCTRL	= 1063,
    gBCL	= 1064,
    gBCLA	= 1065,
    gBCLR	= 1066,
    gBCLRL	= 1067,
    INSTRUCTION_LIST_END = 1068
  };
namespace Sched {
  enum {
    NoInstrModel	= 0,
    IIC_IntSimple	= 1,
    IIC_IntGeneral	= 2,
    IIC_BrB	= 3,
    IIC_IntCompare	= 4,
    IIC_BrCR	= 5,
    IIC_LdStDCBF	= 6,
    IIC_IntDivD	= 7,
    IIC_IntDivW	= 8,
    IIC_LdStLoad	= 9,
    IIC_FPGeneral	= 10,
    IIC_FPAddSub	= 11,
    IIC_FPCompare	= 12,
    IIC_FPDivD	= 13,
    IIC_FPDivS	= 14,
    IIC_FPFused	= 15,
    IIC_FPSqrtD	= 16,
    IIC_FPSqrtS	= 17,
    IIC_LdStICBI	= 18,
    IIC_SprISYNC	= 19,
    IIC_LdStLoadUpd	= 20,
    IIC_LdStLoadUpdX	= 21,
    IIC_LdStLD	= 22,
    IIC_LdStLDARX	= 23,
    IIC_LdStLDU	= 24,
    IIC_LdStLDUX	= 25,
    IIC_LdStLFD	= 26,
    IIC_LdStLFDU	= 27,
    IIC_LdStLFDUX	= 28,
    IIC_LdStLHA	= 29,
    IIC_LdStLHAU	= 30,
    IIC_LdStLHAUX	= 31,
    IIC_LdStLMW	= 32,
    IIC_LdStLWA	= 33,
    IIC_LdStLWARX	= 34,
    IIC_BrMCR	= 35,
    IIC_SprMFCR	= 36,
    IIC_SprMFSPR	= 37,
    IIC_IntMFFS	= 38,
    IIC_SprMFMSR	= 39,
    IIC_SprMFCRF	= 40,
    IIC_SprMFTB	= 41,
    IIC_LdStStore	= 42,
    IIC_LdStSync	= 43,
    IIC_BrMCRX	= 44,
    IIC_SprMTSPR	= 45,
    IIC_IntMTFSB0	= 46,
    IIC_SprMTMSR	= 47,
    IIC_SprMTMSRD	= 48,
    IIC_IntMulHW	= 49,
    IIC_IntMulHWU	= 50,
    IIC_IntMulHD	= 51,
    IIC_IntMulLI	= 52,
    IIC_IntRotateD	= 53,
    IIC_IntRotateDI	= 54,
    IIC_IntRotate	= 55,
    IIC_SprSLBIA	= 56,
    IIC_SprSLBIE	= 57,
    IIC_SprSLBMFEE	= 58,
    IIC_SprSLBMTE	= 59,
    IIC_IntShift	= 60,
    IIC_LdStStoreUpd	= 61,
    IIC_LdStSTD	= 62,
    IIC_LdStSTDCX	= 63,
    IIC_LdStSTDU	= 64,
    IIC_LdStSTDUX	= 65,
    IIC_LdStSTFD	= 66,
    IIC_LdStSTFDU	= 67,
    IIC_LdStSTWCX	= 68,
    IIC_IntTrapD	= 69,
    IIC_SprTLBIE	= 70,
    IIC_SprTLBIEL	= 71,
    IIC_SprTLBSYNC	= 72,
    IIC_IntTrapW	= 73,
    IIC_VecFP	= 74,
    IIC_VecGeneral	= 75,
    IIC_VecFPCompare	= 76,
    IIC_VecPerm	= 77,
    SCHED_LIST_END = 78
  };
}
}
} // End llvm namespace 
#endif // GET_INSTRINFO_ENUM

/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|*Target Instruction Descriptors                                              *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_INSTRINFO_MC_DESC
#undef GET_INSTRINFO_MC_DESC
namespace llvm {

static const uint16_t ImplicitList1[] = { PPC::CR0, 0 };
static const uint16_t ImplicitList2[] = { PPC::CARRY, 0 };
static const uint16_t ImplicitList3[] = { PPC::CARRY, PPC::CR0, 0 };
static const uint16_t ImplicitList4[] = { PPC::R1, 0 };
static const uint16_t ImplicitList5[] = { PPC::CTR, 0 };
static const uint16_t ImplicitList6[] = { PPC::CTR8, 0 };
static const uint16_t ImplicitList7[] = { PPC::CTR, PPC::RM, 0 };
static const uint16_t ImplicitList8[] = { PPC::LR, 0 };
static const uint16_t ImplicitList9[] = { PPC::CTR8, PPC::RM, 0 };
static const uint16_t ImplicitList10[] = { PPC::LR8, 0 };
static const uint16_t ImplicitList11[] = { PPC::RM, 0 };
static const uint16_t ImplicitList12[] = { PPC::LR, PPC::RM, 0 };
static const uint16_t ImplicitList13[] = { PPC::CTR, PPC::LR, PPC::RM, 0 };
static const uint16_t ImplicitList14[] = { PPC::CTR8, PPC::LR8, PPC::RM, 0 };
static const uint16_t ImplicitList15[] = { PPC::CR1EQ, 0 };
static const uint16_t ImplicitList16[] = { PPC::X1, 0 };
static const uint16_t ImplicitList17[] = { PPC::CR1, 0 };
static const uint16_t ImplicitList18[] = { PPC::CR6, 0 };
static const uint16_t ImplicitList19[] = { PPC::LR, PPC::CTR, 0 };

static const MCOperandInfo OperandInfo2[] = { { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo3[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo4[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo5[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo6[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo7[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo8[] = { { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo9[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo10[] = { { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo11[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo12[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo13[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo14[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo15[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRC_NOR0RegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo16[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RC_NOX0RegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo17[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo18[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo19[] = { { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo20[] = { { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo21[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo22[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo23[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo24[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo25[] = { { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo26[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::CRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo27[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::CRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo28[] = { { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo29[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo30[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo31[] = { { PPC::CRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo32[] = { { PPC::CRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo33[] = { { PPC::CRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo34[] = { { PPC::CRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo35[] = { { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo36[] = { { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo37[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo38[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo39[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo40[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo41[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo42[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo43[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo44[] = { { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo45[] = { { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo46[] = { { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo47[] = { { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo48[] = { { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo49[] = { { PPC::CRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo50[] = { { PPC::CRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo51[] = { { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo52[] = { { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo53[] = { { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo54[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRC_NOR0RegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo55[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RC_NOX0RegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo56[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo57[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo58[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((1 << 16) | (1 << MCOI::TIED_TO)) }, };
static const MCOperandInfo OperandInfo59[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((1 << 16) | (1 << MCOI::TIED_TO)) }, };
static const MCOperandInfo OperandInfo60[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((1 << 16) | (1 << MCOI::TIED_TO)) }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo61[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((1 << 16) | (1 << MCOI::TIED_TO)) }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo62[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo63[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo64[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RC_NOX0RegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo65[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRC_NOR0RegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo66[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo67[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo68[] = { { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo69[] = { { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((1 << 16) | (1 << MCOI::TIED_TO)) }, };
static const MCOperandInfo OperandInfo70[] = { { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((1 << 16) | (1 << MCOI::TIED_TO)) }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo71[] = { { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo72[] = { { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo73[] = { { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((1 << 16) | (1 << MCOI::TIED_TO)) }, };
static const MCOperandInfo OperandInfo74[] = { { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((1 << 16) | (1 << MCOI::TIED_TO)) }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo75[] = { { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo76[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo77[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo78[] = { { PPC::VRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo79[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo80[] = { { PPC::VSFRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo81[] = { { PPC::VSRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo82[] = { { PPC::CRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::CRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo83[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo84[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo85[] = { { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo86[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo87[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VRSAVERCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, };
static const MCOperandInfo OperandInfo88[] = { { PPC::VRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo89[] = { { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo90[] = { { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo91[] = { { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo92[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo93[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo94[] = { { PPC::VRSAVERCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo95[] = { { PPC::CRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo96[] = { { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo97[] = { { PPC::VRSAVERCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo98[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo99[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo100[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo101[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo102[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo103[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo104[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo105[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo106[] = { { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::CRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo107[] = { { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::CRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo108[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::CRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRC_NOR0RegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRC_NOR0RegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo109[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::CRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RC_NOX0RegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RC_NOX0RegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo110[] = { { PPC::VRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::CRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo111[] = { { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo112[] = { { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo113[] = { { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRC_NOR0RegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRC_NOR0RegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo114[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RC_NOX0RegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RC_NOX0RegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo115[] = { { PPC::VRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo116[] = { { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo117[] = { { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((0 << 16) | (1 << MCOI::TIED_TO)) }, };
static const MCOperandInfo OperandInfo118[] = { { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((0 << 16) | (1 << MCOI::TIED_TO)) }, };
static const MCOperandInfo OperandInfo119[] = { { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo120[] = { { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo121[] = { { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((0 << 16) | (1 << MCOI::TIED_TO)) }, };
static const MCOperandInfo OperandInfo122[] = { { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo123[] = { { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((0 << 16) | (1 << MCOI::TIED_TO)) }, };
static const MCOperandInfo OperandInfo124[] = { { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, { PPC::F4RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { 1, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { 0, 0|(1<<MCOI::LookupPtrRegClass), MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo125[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo126[] = { { PPC::CTRRCRegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo127[] = { { PPC::CTRRC8RegClassID, 0, MCOI::OPERAND_REGISTER, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };
static const MCOperandInfo OperandInfo128[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo129[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::G8RCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo130[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo131[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::GPRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo132[] = { { PPC::VRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo133[] = { { PPC::VRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo134[] = { { PPC::VRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo135[] = { { PPC::VRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo136[] = { { PPC::VRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo137[] = { { PPC::VRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo138[] = { { PPC::VSFRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VSFRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo139[] = { { PPC::VSFRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VSFRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VSFRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo140[] = { { PPC::CRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VSFRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VSFRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo141[] = { { PPC::VSFRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VSFRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { PPC::VSFRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VSFRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo142[] = { { PPC::CRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VSFRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo143[] = { { PPC::VSRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VSRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo144[] = { { PPC::VSRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VSRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VSRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo145[] = { { PPC::VSRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VSRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, ((0 << 16) | (1 << MCOI::TIED_TO)) }, { PPC::VSRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VSRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo146[] = { { PPC::CRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VSRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VSRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo147[] = { { PPC::CRRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VSRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo148[] = { { PPC::VSRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VSRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VSRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo149[] = { { PPC::VSRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VSRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VSRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VSRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo150[] = { { PPC::VSRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::VSRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo151[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, };
static const MCOperandInfo OperandInfo152[] = { { -1, 0, MCOI::OPERAND_UNKNOWN, 0 }, { PPC::CRBITRCRegClassID, 0, MCOI::OPERAND_UNKNOWN, 0 }, { -1, 0, MCOI::OPERAND_IMMEDIATE, 0 }, };

extern const MCInstrDesc PPCInsts[] = {
  { 0,	0,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Variadic)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, nullptr,0,nullptr },  // Inst #0 = PHI
  { 1,	0,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Variadic), 0x0ULL, nullptr, nullptr, nullptr,0,nullptr },  // Inst #1 = INLINEASM
  { 2,	1,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::NotDuplicable)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo2,0,nullptr },  // Inst #2 = CFI_INSTRUCTION
  { 3,	1,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::NotDuplicable)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo2,0,nullptr },  // Inst #3 = EH_LABEL
  { 4,	1,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::NotDuplicable)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo2,0,nullptr },  // Inst #4 = GC_LABEL
  { 5,	0,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Variadic), 0x0ULL, nullptr, nullptr, nullptr,0,nullptr },  // Inst #5 = KILL
  { 6,	3,	1,	0,	0,	0|(1<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo3,0,nullptr },  // Inst #6 = EXTRACT_SUBREG
  { 7,	4,	1,	0,	0,	0|(1<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo4,0,nullptr },  // Inst #7 = INSERT_SUBREG
  { 8,	1,	1,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Rematerializable)|(1<<MCID::CheapAsAMove), 0x0ULL, nullptr, nullptr, OperandInfo5,0,nullptr },  // Inst #8 = IMPLICIT_DEF
  { 9,	4,	1,	0,	0,	0|(1<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo6,0,nullptr },  // Inst #9 = SUBREG_TO_REG
  { 10,	3,	1,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::CheapAsAMove), 0x0ULL, nullptr, nullptr, OperandInfo3,0,nullptr },  // Inst #10 = COPY_TO_REGCLASS
  { 11,	0,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Variadic), 0x0ULL, nullptr, nullptr, nullptr,0,nullptr },  // Inst #11 = DBG_VALUE
  { 12,	1,	1,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Variadic)|(1<<MCID::CheapAsAMove), 0x0ULL, nullptr, nullptr, OperandInfo5,0,nullptr },  // Inst #12 = REG_SEQUENCE
  { 13,	2,	1,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::CheapAsAMove), 0x0ULL, nullptr, nullptr, OperandInfo7,0,nullptr },  // Inst #13 = COPY
  { 14,	0,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Variadic)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, nullptr,0,nullptr },  // Inst #14 = BUNDLE
  { 15,	1,	0,	0,	0,	0|(1<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo2,0,nullptr },  // Inst #15 = LIFETIME_START
  { 16,	1,	0,	0,	0,	0|(1<<MCID::Pseudo), 0x0ULL, nullptr, nullptr, OperandInfo2,0,nullptr },  // Inst #16 = LIFETIME_END
  { 17,	2,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Call)|(1<<MCID::MayLoad)|(1<<MCID::UsesCustomInserter)|(1<<MCID::Variadic)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo8,0,nullptr },  // Inst #17 = STACKMAP
  { 18,	6,	1,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::Call)|(1<<MCID::MayLoad)|(1<<MCID::UsesCustomInserter)|(1<<MCID::Variadic)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo9,0,nullptr },  // Inst #18 = PATCHPOINT
  { 19,	1,	1,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::MayLoad)|(1<<MCID::Rematerializable), 0x0ULL, nullptr, nullptr, OperandInfo10,0,nullptr },  // Inst #19 = LOAD_STACK_GUARD
  { 20,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo11,0,nullptr },  // Inst #20 = ADD4
  { 21,	3,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #21 = ADD4TLS
  { 22,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList1, OperandInfo11,0,nullptr },  // Inst #22 = ADD4o
  { 23,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo13,0,nullptr },  // Inst #23 = ADD8
  { 24,	3,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo14,0,nullptr },  // Inst #24 = ADD8TLS
  { 25,	3,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo14,0,nullptr },  // Inst #25 = ADD8TLS_
  { 26,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList1, OperandInfo13,0,nullptr },  // Inst #26 = ADD8o
  { 27,	3,	1,	2,	4,	0|(1<<MCID::Commutable), 0xcULL, nullptr, ImplicitList2, OperandInfo11,0,nullptr },  // Inst #27 = ADDC
  { 28,	3,	1,	2,	4,	0|(1<<MCID::Commutable), 0xcULL, nullptr, ImplicitList2, OperandInfo13,0,nullptr },  // Inst #28 = ADDC8
  { 29,	3,	1,	2,	4,	0|(1<<MCID::Commutable), 0xcULL, nullptr, ImplicitList3, OperandInfo13,0,nullptr },  // Inst #29 = ADDC8o
  { 30,	3,	1,	2,	4,	0|(1<<MCID::Commutable), 0xcULL, nullptr, ImplicitList3, OperandInfo11,0,nullptr },  // Inst #30 = ADDCo
  { 31,	3,	1,	2,	4,	0|(1<<MCID::Commutable), 0x8ULL, ImplicitList2, ImplicitList2, OperandInfo11,0,nullptr },  // Inst #31 = ADDE
  { 32,	3,	1,	2,	4,	0|(1<<MCID::Commutable), 0x8ULL, ImplicitList2, ImplicitList2, OperandInfo13,0,nullptr },  // Inst #32 = ADDE8
  { 33,	3,	1,	2,	4,	0|(1<<MCID::Commutable), 0x8ULL, ImplicitList2, ImplicitList3, OperandInfo13,0,nullptr },  // Inst #33 = ADDE8o
  { 34,	3,	1,	2,	4,	0|(1<<MCID::Commutable), 0x8ULL, ImplicitList2, ImplicitList3, OperandInfo11,0,nullptr },  // Inst #34 = ADDEo
  { 35,	3,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo15,0,nullptr },  // Inst #35 = ADDI
  { 36,	3,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo16,0,nullptr },  // Inst #36 = ADDI8
  { 37,	3,	1,	2,	4,	0, 0xcULL, nullptr, ImplicitList2, OperandInfo12,0,nullptr },  // Inst #37 = ADDIC
  { 38,	3,	1,	2,	4,	0, 0x8ULL, nullptr, ImplicitList2, OperandInfo14,0,nullptr },  // Inst #38 = ADDIC8
  { 39,	3,	1,	2,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x8ULL, nullptr, ImplicitList3, OperandInfo12,0,nullptr },  // Inst #39 = ADDICo
  { 40,	3,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo15,0,nullptr },  // Inst #40 = ADDIS
  { 41,	3,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo16,0,nullptr },  // Inst #41 = ADDIS8
  { 42,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo16,0,nullptr },  // Inst #42 = ADDISdtprelHA
  { 43,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo15,0,nullptr },  // Inst #43 = ADDISdtprelHA32
  { 44,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo16,0,nullptr },  // Inst #44 = ADDISgotTprelHA
  { 45,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo16,0,nullptr },  // Inst #45 = ADDIStlsgdHA
  { 46,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo16,0,nullptr },  // Inst #46 = ADDIStlsldHA
  { 47,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo16,0,nullptr },  // Inst #47 = ADDIStocHA
  { 48,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo16,0,nullptr },  // Inst #48 = ADDIdtprelL
  { 49,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo15,0,nullptr },  // Inst #49 = ADDIdtprelL32
  { 50,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo16,0,nullptr },  // Inst #50 = ADDItlsgdL
  { 51,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo15,0,nullptr },  // Inst #51 = ADDItlsgdL32
  { 52,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo16,0,nullptr },  // Inst #52 = ADDItlsldL
  { 53,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo15,0,nullptr },  // Inst #53 = ADDItlsldL32
  { 54,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo16,0,nullptr },  // Inst #54 = ADDItocL
  { 55,	2,	1,	2,	4,	0, 0x8ULL, ImplicitList2, ImplicitList2, OperandInfo17,0,nullptr },  // Inst #55 = ADDME
  { 56,	2,	1,	2,	4,	0, 0x8ULL, ImplicitList2, ImplicitList2, OperandInfo18,0,nullptr },  // Inst #56 = ADDME8
  { 57,	2,	1,	2,	4,	0, 0x8ULL, ImplicitList2, ImplicitList3, OperandInfo18,0,nullptr },  // Inst #57 = ADDME8o
  { 58,	2,	1,	2,	4,	0, 0x8ULL, ImplicitList2, ImplicitList3, OperandInfo17,0,nullptr },  // Inst #58 = ADDMEo
  { 59,	2,	1,	2,	4,	0, 0x8ULL, ImplicitList2, ImplicitList2, OperandInfo17,0,nullptr },  // Inst #59 = ADDZE
  { 60,	2,	1,	2,	4,	0, 0x8ULL, ImplicitList2, ImplicitList2, OperandInfo18,0,nullptr },  // Inst #60 = ADDZE8
  { 61,	2,	1,	2,	4,	0, 0x8ULL, ImplicitList2, ImplicitList3, OperandInfo18,0,nullptr },  // Inst #61 = ADDZE8o
  { 62,	2,	1,	2,	4,	0, 0x8ULL, ImplicitList2, ImplicitList3, OperandInfo17,0,nullptr },  // Inst #62 = ADDZEo
  { 63,	1,	0,	0,	4,	0, 0x0ULL, ImplicitList4, ImplicitList4, OperandInfo5,0,nullptr },  // Inst #63 = ADJCALLSTACKDOWN
  { 64,	2,	0,	0,	4,	0, 0x0ULL, ImplicitList4, ImplicitList4, OperandInfo7,0,nullptr },  // Inst #64 = ADJCALLSTACKUP
  { 65,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo11,0,nullptr },  // Inst #65 = AND
  { 66,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo13,0,nullptr },  // Inst #66 = AND8
  { 67,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList1, OperandInfo13,0,nullptr },  // Inst #67 = AND8o
  { 68,	3,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo11,0,nullptr },  // Inst #68 = ANDC
  { 69,	3,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo13,0,nullptr },  // Inst #69 = ANDC8
  { 70,	3,	1,	1,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo13,0,nullptr },  // Inst #70 = ANDC8o
  { 71,	3,	1,	1,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo11,0,nullptr },  // Inst #71 = ANDCo
  { 72,	3,	1,	2,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo12,0,nullptr },  // Inst #72 = ANDISo
  { 73,	3,	1,	2,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo14,0,nullptr },  // Inst #73 = ANDISo8
  { 74,	3,	1,	2,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo12,0,nullptr },  // Inst #74 = ANDIo
  { 75,	3,	1,	2,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo14,0,nullptr },  // Inst #75 = ANDIo8
  { 76,	2,	1,	0,	4,	0|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, nullptr, OperandInfo19,0,nullptr },  // Inst #76 = ANDIo_1_EQ_BIT
  { 77,	2,	1,	0,	4,	0|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, nullptr, OperandInfo20,0,nullptr },  // Inst #77 = ANDIo_1_EQ_BIT8
  { 78,	2,	1,	0,	4,	0|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, nullptr, OperandInfo19,0,nullptr },  // Inst #78 = ANDIo_1_GT_BIT
  { 79,	2,	1,	0,	4,	0|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, nullptr, OperandInfo20,0,nullptr },  // Inst #79 = ANDIo_1_GT_BIT8
  { 80,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList1, OperandInfo11,0,nullptr },  // Inst #80 = ANDo
  { 81,	5,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo21,0,nullptr },  // Inst #81 = ATOMIC_CMP_SWAP_I16
  { 82,	5,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo21,0,nullptr },  // Inst #82 = ATOMIC_CMP_SWAP_I32
  { 83,	5,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo22,0,nullptr },  // Inst #83 = ATOMIC_CMP_SWAP_I64
  { 84,	5,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo21,0,nullptr },  // Inst #84 = ATOMIC_CMP_SWAP_I8
  { 85,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo23,0,nullptr },  // Inst #85 = ATOMIC_LOAD_ADD_I16
  { 86,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo23,0,nullptr },  // Inst #86 = ATOMIC_LOAD_ADD_I32
  { 87,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo24,0,nullptr },  // Inst #87 = ATOMIC_LOAD_ADD_I64
  { 88,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo23,0,nullptr },  // Inst #88 = ATOMIC_LOAD_ADD_I8
  { 89,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo23,0,nullptr },  // Inst #89 = ATOMIC_LOAD_AND_I16
  { 90,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo23,0,nullptr },  // Inst #90 = ATOMIC_LOAD_AND_I32
  { 91,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo24,0,nullptr },  // Inst #91 = ATOMIC_LOAD_AND_I64
  { 92,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo23,0,nullptr },  // Inst #92 = ATOMIC_LOAD_AND_I8
  { 93,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo23,0,nullptr },  // Inst #93 = ATOMIC_LOAD_NAND_I16
  { 94,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo23,0,nullptr },  // Inst #94 = ATOMIC_LOAD_NAND_I32
  { 95,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo24,0,nullptr },  // Inst #95 = ATOMIC_LOAD_NAND_I64
  { 96,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo23,0,nullptr },  // Inst #96 = ATOMIC_LOAD_NAND_I8
  { 97,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo23,0,nullptr },  // Inst #97 = ATOMIC_LOAD_OR_I16
  { 98,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo23,0,nullptr },  // Inst #98 = ATOMIC_LOAD_OR_I32
  { 99,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo24,0,nullptr },  // Inst #99 = ATOMIC_LOAD_OR_I64
  { 100,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo23,0,nullptr },  // Inst #100 = ATOMIC_LOAD_OR_I8
  { 101,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo23,0,nullptr },  // Inst #101 = ATOMIC_LOAD_SUB_I16
  { 102,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo23,0,nullptr },  // Inst #102 = ATOMIC_LOAD_SUB_I32
  { 103,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo24,0,nullptr },  // Inst #103 = ATOMIC_LOAD_SUB_I64
  { 104,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo23,0,nullptr },  // Inst #104 = ATOMIC_LOAD_SUB_I8
  { 105,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo23,0,nullptr },  // Inst #105 = ATOMIC_LOAD_XOR_I16
  { 106,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo23,0,nullptr },  // Inst #106 = ATOMIC_LOAD_XOR_I32
  { 107,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo24,0,nullptr },  // Inst #107 = ATOMIC_LOAD_XOR_I64
  { 108,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo23,0,nullptr },  // Inst #108 = ATOMIC_LOAD_XOR_I8
  { 109,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo23,0,nullptr },  // Inst #109 = ATOMIC_SWAP_I16
  { 110,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo23,0,nullptr },  // Inst #110 = ATOMIC_SWAP_I32
  { 111,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo24,0,nullptr },  // Inst #111 = ATOMIC_SWAP_I64
  { 112,	4,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UsesCustomInserter), 0x0ULL, nullptr, ImplicitList1, OperandInfo23,0,nullptr },  // Inst #112 = ATOMIC_SWAP_I8
  { 113,	1,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::Barrier)|(1<<MCID::Terminator), 0x38ULL, nullptr, nullptr, OperandInfo5,0,nullptr },  // Inst #113 = B
  { 114,	1,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::Barrier)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, nullptr, nullptr, OperandInfo5,0,nullptr },  // Inst #114 = BA
  { 115,	2,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::Terminator), 0x38ULL, nullptr, nullptr, OperandInfo25,0,nullptr },  // Inst #115 = BC
  { 116,	3,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, nullptr, nullptr, OperandInfo26,0,nullptr },  // Inst #116 = BCC
  { 117,	3,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, nullptr, nullptr, OperandInfo26,0,nullptr },  // Inst #117 = BCCA
  { 118,	2,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::IndirectBranch)|(1<<MCID::Barrier)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList5, nullptr, OperandInfo27,0,nullptr },  // Inst #118 = BCCCTR
  { 119,	2,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::IndirectBranch)|(1<<MCID::Barrier)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList6, nullptr, OperandInfo27,0,nullptr },  // Inst #119 = BCCCTR8
  { 120,	2,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, ImplicitList8, OperandInfo27,0,nullptr },  // Inst #120 = BCCCTRL
  { 121,	2,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList9, ImplicitList10, OperandInfo27,0,nullptr },  // Inst #121 = BCCCTRL8
  { 122,	3,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList11, ImplicitList8, OperandInfo26,0,nullptr },  // Inst #122 = BCCL
  { 123,	3,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList11, ImplicitList8, OperandInfo26,0,nullptr },  // Inst #123 = BCCLA
  { 124,	2,	0,	3,	4,	0|(1<<MCID::Return)|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList12, nullptr, OperandInfo27,0,nullptr },  // Inst #124 = BCCLR
  { 125,	2,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList12, ImplicitList8, OperandInfo27,0,nullptr },  // Inst #125 = BCCLRL
  { 126,	1,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::IndirectBranch)|(1<<MCID::Barrier)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList5, nullptr, OperandInfo28,0,nullptr },  // Inst #126 = BCCTR
  { 127,	1,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::IndirectBranch)|(1<<MCID::Barrier)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList6, nullptr, OperandInfo28,0,nullptr },  // Inst #127 = BCCTR8
  { 128,	1,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::IndirectBranch)|(1<<MCID::Barrier)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList6, nullptr, OperandInfo28,0,nullptr },  // Inst #128 = BCCTR8n
  { 129,	1,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, ImplicitList8, OperandInfo28,0,nullptr },  // Inst #129 = BCCTRL
  { 130,	1,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList9, ImplicitList10, OperandInfo28,0,nullptr },  // Inst #130 = BCCTRL8
  { 131,	1,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList9, ImplicitList10, OperandInfo28,0,nullptr },  // Inst #131 = BCCTRL8n
  { 132,	1,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, ImplicitList8, OperandInfo28,0,nullptr },  // Inst #132 = BCCTRLn
  { 133,	1,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::IndirectBranch)|(1<<MCID::Barrier)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList5, nullptr, OperandInfo28,0,nullptr },  // Inst #133 = BCCTRn
  { 134,	2,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList11, ImplicitList8, OperandInfo25,0,nullptr },  // Inst #134 = BCL
  { 135,	1,	0,	3,	4,	0|(1<<MCID::Return)|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList12, nullptr, OperandInfo28,0,nullptr },  // Inst #135 = BCLR
  { 136,	1,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList12, ImplicitList8, OperandInfo28,0,nullptr },  // Inst #136 = BCLRL
  { 137,	1,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList12, ImplicitList8, OperandInfo28,0,nullptr },  // Inst #137 = BCLRLn
  { 138,	1,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, nullptr, nullptr, OperandInfo28,0,nullptr },  // Inst #138 = BCLRn
  { 139,	1,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList11, ImplicitList8, OperandInfo5,0,nullptr },  // Inst #139 = BCLalways
  { 140,	2,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList11, ImplicitList8, OperandInfo25,0,nullptr },  // Inst #140 = BCLn
  { 141,	0,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::IndirectBranch)|(1<<MCID::Barrier)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList5, nullptr, nullptr,0,nullptr },  // Inst #141 = BCTR
  { 142,	0,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::IndirectBranch)|(1<<MCID::Barrier)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList6, nullptr, nullptr,0,nullptr },  // Inst #142 = BCTR8
  { 143,	0,	0,	3,	4,	0|(1<<MCID::Call), 0x38ULL, ImplicitList7, ImplicitList8, nullptr,0,nullptr },  // Inst #143 = BCTRL
  { 144,	0,	0,	3,	4,	0|(1<<MCID::Call), 0x38ULL, ImplicitList9, ImplicitList10, nullptr,0,nullptr },  // Inst #144 = BCTRL8
  { 145,	2,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::Terminator), 0x38ULL, nullptr, nullptr, OperandInfo25,0,nullptr },  // Inst #145 = BCn
  { 146,	1,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList5, ImplicitList5, OperandInfo5,0,nullptr },  // Inst #146 = BDNZ
  { 147,	1,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList6, ImplicitList6, OperandInfo5,0,nullptr },  // Inst #147 = BDNZ8
  { 148,	1,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList5, ImplicitList5, OperandInfo5,0,nullptr },  // Inst #148 = BDNZA
  { 149,	1,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList5, ImplicitList5, OperandInfo5,0,nullptr },  // Inst #149 = BDNZAm
  { 150,	1,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList5, ImplicitList5, OperandInfo5,0,nullptr },  // Inst #150 = BDNZAp
  { 151,	1,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, ImplicitList5, OperandInfo5,0,nullptr },  // Inst #151 = BDNZL
  { 152,	1,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, ImplicitList5, OperandInfo5,0,nullptr },  // Inst #152 = BDNZLA
  { 153,	1,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, ImplicitList5, OperandInfo5,0,nullptr },  // Inst #153 = BDNZLAm
  { 154,	1,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, ImplicitList5, OperandInfo5,0,nullptr },  // Inst #154 = BDNZLAp
  { 155,	0,	0,	3,	4,	0|(1<<MCID::Return)|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList13, ImplicitList5, nullptr,0,nullptr },  // Inst #155 = BDNZLR
  { 156,	0,	0,	3,	4,	0|(1<<MCID::Return)|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList14, ImplicitList6, nullptr,0,nullptr },  // Inst #156 = BDNZLR8
  { 157,	0,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList13, ImplicitList5, nullptr,0,nullptr },  // Inst #157 = BDNZLRL
  { 158,	0,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList13, ImplicitList5, nullptr,0,nullptr },  // Inst #158 = BDNZLRLm
  { 159,	0,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList13, ImplicitList5, nullptr,0,nullptr },  // Inst #159 = BDNZLRLp
  { 160,	0,	0,	3,	4,	0|(1<<MCID::Return)|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList13, ImplicitList5, nullptr,0,nullptr },  // Inst #160 = BDNZLRm
  { 161,	0,	0,	3,	4,	0|(1<<MCID::Return)|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList13, ImplicitList5, nullptr,0,nullptr },  // Inst #161 = BDNZLRp
  { 162,	1,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, ImplicitList5, OperandInfo5,0,nullptr },  // Inst #162 = BDNZLm
  { 163,	1,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, ImplicitList5, OperandInfo5,0,nullptr },  // Inst #163 = BDNZLp
  { 164,	1,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList5, ImplicitList5, OperandInfo5,0,nullptr },  // Inst #164 = BDNZm
  { 165,	1,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList5, ImplicitList5, OperandInfo5,0,nullptr },  // Inst #165 = BDNZp
  { 166,	1,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList5, ImplicitList5, OperandInfo5,0,nullptr },  // Inst #166 = BDZ
  { 167,	1,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList6, ImplicitList6, OperandInfo5,0,nullptr },  // Inst #167 = BDZ8
  { 168,	1,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList5, ImplicitList5, OperandInfo5,0,nullptr },  // Inst #168 = BDZA
  { 169,	1,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList5, ImplicitList5, OperandInfo5,0,nullptr },  // Inst #169 = BDZAm
  { 170,	1,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList5, ImplicitList5, OperandInfo5,0,nullptr },  // Inst #170 = BDZAp
  { 171,	1,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, ImplicitList5, OperandInfo5,0,nullptr },  // Inst #171 = BDZL
  { 172,	1,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, ImplicitList5, OperandInfo5,0,nullptr },  // Inst #172 = BDZLA
  { 173,	1,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, ImplicitList5, OperandInfo5,0,nullptr },  // Inst #173 = BDZLAm
  { 174,	1,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, ImplicitList5, OperandInfo5,0,nullptr },  // Inst #174 = BDZLAp
  { 175,	0,	0,	3,	4,	0|(1<<MCID::Return)|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList13, ImplicitList5, nullptr,0,nullptr },  // Inst #175 = BDZLR
  { 176,	0,	0,	3,	4,	0|(1<<MCID::Return)|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList14, ImplicitList6, nullptr,0,nullptr },  // Inst #176 = BDZLR8
  { 177,	0,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList13, ImplicitList5, nullptr,0,nullptr },  // Inst #177 = BDZLRL
  { 178,	0,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList13, ImplicitList5, nullptr,0,nullptr },  // Inst #178 = BDZLRLm
  { 179,	0,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList13, ImplicitList5, nullptr,0,nullptr },  // Inst #179 = BDZLRLp
  { 180,	0,	0,	3,	4,	0|(1<<MCID::Return)|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList13, ImplicitList5, nullptr,0,nullptr },  // Inst #180 = BDZLRm
  { 181,	0,	0,	3,	4,	0|(1<<MCID::Return)|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList13, ImplicitList5, nullptr,0,nullptr },  // Inst #181 = BDZLRp
  { 182,	1,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, ImplicitList5, OperandInfo5,0,nullptr },  // Inst #182 = BDZLm
  { 183,	1,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, ImplicitList5, OperandInfo5,0,nullptr },  // Inst #183 = BDZLp
  { 184,	1,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList5, ImplicitList5, OperandInfo5,0,nullptr },  // Inst #184 = BDZm
  { 185,	1,	0,	3,	4,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList5, ImplicitList5, OperandInfo5,0,nullptr },  // Inst #185 = BDZp
  { 186,	1,	0,	3,	4,	0|(1<<MCID::Call), 0x38ULL, ImplicitList11, ImplicitList8, OperandInfo5,0,nullptr },  // Inst #186 = BL
  { 187,	1,	0,	3,	4,	0|(1<<MCID::Call), 0x38ULL, ImplicitList11, ImplicitList10, OperandInfo5,0,nullptr },  // Inst #187 = BL8
  { 188,	1,	0,	3,	8,	0|(1<<MCID::Call), 0x38ULL, ImplicitList11, ImplicitList10, OperandInfo5,0,nullptr },  // Inst #188 = BL8_NOP
  { 189,	2,	0,	3,	8,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList11, ImplicitList10, OperandInfo7,0,nullptr },  // Inst #189 = BL8_NOP_TLS
  { 190,	2,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList11, ImplicitList10, OperandInfo7,0,nullptr },  // Inst #190 = BL8_TLS
  { 191,	2,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList11, ImplicitList10, OperandInfo7,0,nullptr },  // Inst #191 = BL8_TLS_
  { 192,	1,	0,	3,	4,	0|(1<<MCID::Call), 0x38ULL, ImplicitList11, ImplicitList8, OperandInfo5,0,nullptr },  // Inst #192 = BLA
  { 193,	1,	0,	3,	4,	0|(1<<MCID::Call), 0x38ULL, ImplicitList11, ImplicitList10, OperandInfo5,0,nullptr },  // Inst #193 = BLA8
  { 194,	1,	0,	3,	8,	0|(1<<MCID::Call), 0x38ULL, ImplicitList11, ImplicitList10, OperandInfo5,0,nullptr },  // Inst #194 = BLA8_NOP
  { 195,	0,	0,	3,	4,	0|(1<<MCID::Return)|(1<<MCID::Barrier)|(1<<MCID::Terminator), 0x38ULL, ImplicitList12, nullptr, nullptr,0,nullptr },  // Inst #195 = BLR
  { 196,	0,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList12, ImplicitList8, nullptr,0,nullptr },  // Inst #196 = BLRL
  { 197,	2,	0,	3,	4,	0|(1<<MCID::Call)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList11, ImplicitList8, OperandInfo7,0,nullptr },  // Inst #197 = BL_TLS
  { 198,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo29,0,nullptr },  // Inst #198 = CLRLSLDI
  { 199,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo29,0,nullptr },  // Inst #199 = CLRLSLDIo
  { 200,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo30,0,nullptr },  // Inst #200 = CLRLSLWI
  { 201,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo30,0,nullptr },  // Inst #201 = CLRLSLWIo
  { 202,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo14,0,nullptr },  // Inst #202 = CLRRDI
  { 203,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo14,0,nullptr },  // Inst #203 = CLRRDIo
  { 204,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #204 = CLRRWI
  { 205,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #205 = CLRRWIo
  { 206,	3,	1,	4,	4,	0|(1<<MCID::Compare), 0x8ULL, nullptr, nullptr, OperandInfo31,0,nullptr },  // Inst #206 = CMPD
  { 207,	3,	1,	4,	4,	0|(1<<MCID::Compare), 0x8ULL, nullptr, nullptr, OperandInfo32,0,nullptr },  // Inst #207 = CMPDI
  { 208,	3,	1,	4,	4,	0|(1<<MCID::Compare), 0x8ULL, nullptr, nullptr, OperandInfo31,0,nullptr },  // Inst #208 = CMPLD
  { 209,	3,	1,	4,	4,	0|(1<<MCID::Compare), 0x8ULL, nullptr, nullptr, OperandInfo32,0,nullptr },  // Inst #209 = CMPLDI
  { 210,	3,	1,	4,	4,	0|(1<<MCID::Compare), 0x8ULL, nullptr, nullptr, OperandInfo33,0,nullptr },  // Inst #210 = CMPLW
  { 211,	3,	1,	4,	4,	0|(1<<MCID::Compare), 0x8ULL, nullptr, nullptr, OperandInfo34,0,nullptr },  // Inst #211 = CMPLWI
  { 212,	3,	1,	4,	4,	0|(1<<MCID::Compare), 0x8ULL, nullptr, nullptr, OperandInfo33,0,nullptr },  // Inst #212 = CMPW
  { 213,	3,	1,	4,	4,	0|(1<<MCID::Compare), 0x8ULL, nullptr, nullptr, OperandInfo34,0,nullptr },  // Inst #213 = CMPWI
  { 214,	2,	1,	2,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo18,0,nullptr },  // Inst #214 = CNTLZD
  { 215,	2,	1,	2,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo18,0,nullptr },  // Inst #215 = CNTLZDo
  { 216,	2,	1,	2,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo17,0,nullptr },  // Inst #216 = CNTLZW
  { 217,	2,	1,	2,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo17,0,nullptr },  // Inst #217 = CNTLZWo
  { 218,	0,	0,	5,	4,	0, 0x0ULL, nullptr, ImplicitList15, nullptr,0,nullptr },  // Inst #218 = CR6SET
  { 219,	0,	0,	5,	4,	0, 0x0ULL, nullptr, ImplicitList15, nullptr,0,nullptr },  // Inst #219 = CR6UNSET
  { 220,	3,	1,	5,	4,	0|(1<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo35,0,nullptr },  // Inst #220 = CRAND
  { 221,	3,	1,	5,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo35,0,nullptr },  // Inst #221 = CRANDC
  { 222,	3,	1,	5,	4,	0|(1<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo35,0,nullptr },  // Inst #222 = CREQV
  { 223,	3,	1,	5,	4,	0|(1<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo35,0,nullptr },  // Inst #223 = CRNAND
  { 224,	3,	1,	5,	4,	0|(1<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo35,0,nullptr },  // Inst #224 = CRNOR
  { 225,	3,	1,	5,	4,	0|(1<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo35,0,nullptr },  // Inst #225 = CROR
  { 226,	3,	1,	5,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo35,0,nullptr },  // Inst #226 = CRORC
  { 227,	1,	1,	5,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo28,0,nullptr },  // Inst #227 = CRSET
  { 228,	1,	1,	5,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo28,0,nullptr },  // Inst #228 = CRUNSET
  { 229,	3,	1,	5,	4,	0|(1<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo35,0,nullptr },  // Inst #229 = CRXOR
  { 230,	2,	0,	6,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x2ULL, nullptr, nullptr, OperandInfo36,0,nullptr },  // Inst #230 = DCBA
  { 231,	2,	0,	6,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x2ULL, nullptr, nullptr, OperandInfo36,0,nullptr },  // Inst #231 = DCBF
  { 232,	2,	0,	6,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x2ULL, nullptr, nullptr, OperandInfo36,0,nullptr },  // Inst #232 = DCBI
  { 233,	2,	0,	6,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x2ULL, nullptr, nullptr, OperandInfo36,0,nullptr },  // Inst #233 = DCBST
  { 234,	2,	0,	6,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore), 0x2ULL, nullptr, nullptr, OperandInfo36,0,nullptr },  // Inst #234 = DCBT
  { 235,	2,	0,	6,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x2ULL, nullptr, nullptr, OperandInfo36,0,nullptr },  // Inst #235 = DCBTST
  { 236,	2,	0,	6,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x2ULL, nullptr, nullptr, OperandInfo36,0,nullptr },  // Inst #236 = DCBZ
  { 237,	2,	0,	6,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x2ULL, nullptr, nullptr, OperandInfo36,0,nullptr },  // Inst #237 = DCBZL
  { 238,	3,	1,	7,	4,	0, 0xdULL, nullptr, nullptr, OperandInfo13,0,nullptr },  // Inst #238 = DIVD
  { 239,	3,	1,	7,	4,	0, 0xdULL, nullptr, nullptr, OperandInfo13,0,nullptr },  // Inst #239 = DIVDU
  { 240,	3,	1,	7,	4,	0, 0xdULL, nullptr, ImplicitList1, OperandInfo13,0,nullptr },  // Inst #240 = DIVDUo
  { 241,	3,	1,	7,	4,	0, 0xdULL, nullptr, ImplicitList1, OperandInfo13,0,nullptr },  // Inst #241 = DIVDo
  { 242,	3,	1,	8,	4,	0, 0xdULL, nullptr, nullptr, OperandInfo11,0,nullptr },  // Inst #242 = DIVW
  { 243,	3,	1,	8,	4,	0, 0xdULL, nullptr, nullptr, OperandInfo11,0,nullptr },  // Inst #243 = DIVWU
  { 244,	3,	1,	8,	4,	0, 0xdULL, nullptr, ImplicitList1, OperandInfo11,0,nullptr },  // Inst #244 = DIVWUo
  { 245,	3,	1,	8,	4,	0, 0xdULL, nullptr, ImplicitList1, OperandInfo11,0,nullptr },  // Inst #245 = DIVWo
  { 246,	4,	0,	9,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo37,PPC::DeprecatedDST,nullptr },  // Inst #246 = DSS
  { 247,	4,	0,	9,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo37,PPC::DeprecatedDST,nullptr },  // Inst #247 = DSSALL
  { 248,	4,	0,	9,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo38,PPC::DeprecatedDST,nullptr },  // Inst #248 = DST
  { 249,	4,	0,	9,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo39,PPC::DeprecatedDST,nullptr },  // Inst #249 = DST64
  { 250,	4,	0,	9,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo38,PPC::DeprecatedDST,nullptr },  // Inst #250 = DSTST
  { 251,	4,	0,	9,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo39,PPC::DeprecatedDST,nullptr },  // Inst #251 = DSTST64
  { 252,	4,	0,	9,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo38,PPC::DeprecatedDST,nullptr },  // Inst #252 = DSTSTT
  { 253,	4,	0,	9,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo39,PPC::DeprecatedDST,nullptr },  // Inst #253 = DSTSTT64
  { 254,	4,	0,	9,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo38,PPC::DeprecatedDST,nullptr },  // Inst #254 = DSTT
  { 255,	4,	0,	9,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo39,PPC::DeprecatedDST,nullptr },  // Inst #255 = DSTT64
  { 256,	4,	1,	0,	4,	0, 0x0ULL, ImplicitList4, ImplicitList4, OperandInfo40,0,nullptr },  // Inst #256 = DYNALLOC
  { 257,	4,	1,	0,	4,	0, 0x0ULL, ImplicitList16, ImplicitList16, OperandInfo41,0,nullptr },  // Inst #257 = DYNALLOC8
  { 258,	1,	0,	0,	4,	0|(1<<MCID::Barrier)|(1<<MCID::Terminator)|(1<<MCID::UsesCustomInserter)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo10,0,nullptr },  // Inst #258 = EH_SjLj_LongJmp32
  { 259,	1,	0,	0,	4,	0|(1<<MCID::Barrier)|(1<<MCID::Terminator)|(1<<MCID::UsesCustomInserter)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo10,0,nullptr },  // Inst #259 = EH_SjLj_LongJmp64
  { 260,	2,	1,	0,	4,	0|(1<<MCID::Barrier)|(1<<MCID::UsesCustomInserter)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, ImplicitList5, OperandInfo42,0,nullptr },  // Inst #260 = EH_SjLj_SetJmp32
  { 261,	2,	1,	0,	4,	0|(1<<MCID::Barrier)|(1<<MCID::UsesCustomInserter)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, ImplicitList6, OperandInfo42,0,nullptr },  // Inst #261 = EH_SjLj_SetJmp64
  { 262,	1,	0,	0,	4,	0|(1<<MCID::Branch)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo5,0,nullptr },  // Inst #262 = EH_SjLj_Setup
  { 263,	0,	0,	9,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, nullptr,0,nullptr },  // Inst #263 = EIEIO
  { 264,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo11,0,nullptr },  // Inst #264 = EQV
  { 265,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo13,0,nullptr },  // Inst #265 = EQV8
  { 266,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList1, OperandInfo13,0,nullptr },  // Inst #266 = EQV8o
  { 267,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList1, OperandInfo11,0,nullptr },  // Inst #267 = EQVo
  { 268,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo29,0,nullptr },  // Inst #268 = EXTLDI
  { 269,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo29,0,nullptr },  // Inst #269 = EXTLDIo
  { 270,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo30,0,nullptr },  // Inst #270 = EXTLWI
  { 271,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo30,0,nullptr },  // Inst #271 = EXTLWIo
  { 272,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo29,0,nullptr },  // Inst #272 = EXTRDI
  { 273,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo29,0,nullptr },  // Inst #273 = EXTRDIo
  { 274,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo30,0,nullptr },  // Inst #274 = EXTRWI
  { 275,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo30,0,nullptr },  // Inst #275 = EXTRWIo
  { 276,	2,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo17,0,nullptr },  // Inst #276 = EXTSB
  { 277,	2,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo18,0,nullptr },  // Inst #277 = EXTSB8
  { 278,	2,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo43,0,nullptr },  // Inst #278 = EXTSB8_32_64
  { 279,	2,	1,	1,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo18,0,nullptr },  // Inst #279 = EXTSB8o
  { 280,	2,	1,	1,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo17,0,nullptr },  // Inst #280 = EXTSBo
  { 281,	2,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo17,0,nullptr },  // Inst #281 = EXTSH
  { 282,	2,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo18,0,nullptr },  // Inst #282 = EXTSH8
  { 283,	2,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo43,0,nullptr },  // Inst #283 = EXTSH8_32_64
  { 284,	2,	1,	1,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo18,0,nullptr },  // Inst #284 = EXTSH8o
  { 285,	2,	1,	1,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo17,0,nullptr },  // Inst #285 = EXTSHo
  { 286,	2,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo18,0,nullptr },  // Inst #286 = EXTSW
  { 287,	2,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo43,0,nullptr },  // Inst #287 = EXTSW_32_64
  { 288,	2,	1,	1,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo43,0,nullptr },  // Inst #288 = EXTSW_32_64o
  { 289,	2,	1,	1,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo18,0,nullptr },  // Inst #289 = EXTSWo
  { 290,	2,	1,	10,	4,	0, 0x18ULL, nullptr, nullptr, OperandInfo44,0,nullptr },  // Inst #290 = FABSD
  { 291,	2,	1,	10,	4,	0, 0x18ULL, nullptr, ImplicitList17, OperandInfo44,0,nullptr },  // Inst #291 = FABSDo
  { 292,	2,	1,	10,	4,	0, 0x18ULL, nullptr, nullptr, OperandInfo45,0,nullptr },  // Inst #292 = FABSS
  { 293,	2,	1,	10,	4,	0, 0x18ULL, nullptr, ImplicitList17, OperandInfo45,0,nullptr },  // Inst #293 = FABSSo
  { 294,	3,	1,	11,	4,	0|(1<<MCID::Commutable), 0x18ULL, ImplicitList11, nullptr, OperandInfo46,0,nullptr },  // Inst #294 = FADD
  { 295,	3,	1,	10,	4,	0|(1<<MCID::Commutable), 0x18ULL, ImplicitList11, nullptr, OperandInfo47,0,nullptr },  // Inst #295 = FADDS
  { 296,	3,	1,	10,	4,	0|(1<<MCID::Commutable), 0x18ULL, ImplicitList11, ImplicitList17, OperandInfo47,0,nullptr },  // Inst #296 = FADDSo
  { 297,	3,	1,	11,	4,	0|(1<<MCID::Commutable), 0x18ULL, ImplicitList11, ImplicitList17, OperandInfo46,0,nullptr },  // Inst #297 = FADDo
  { 298,	3,	1,	0,	4,	0|(1<<MCID::UsesCustomInserter), 0x0ULL, ImplicitList11, nullptr, OperandInfo46,0,nullptr },  // Inst #298 = FADDrtz
  { 299,	2,	1,	10,	4,	0, 0x18ULL, ImplicitList11, nullptr, OperandInfo44,0,nullptr },  // Inst #299 = FCFID
  { 300,	2,	1,	10,	4,	0, 0x18ULL, ImplicitList11, nullptr, OperandInfo48,0,nullptr },  // Inst #300 = FCFIDS
  { 301,	2,	1,	10,	4,	0, 0x18ULL, ImplicitList11, ImplicitList17, OperandInfo48,0,nullptr },  // Inst #301 = FCFIDSo
  { 302,	2,	1,	10,	4,	0, 0x18ULL, ImplicitList11, nullptr, OperandInfo44,0,nullptr },  // Inst #302 = FCFIDU
  { 303,	2,	1,	10,	4,	0, 0x18ULL, ImplicitList11, nullptr, OperandInfo48,0,nullptr },  // Inst #303 = FCFIDUS
  { 304,	2,	1,	10,	4,	0, 0x18ULL, ImplicitList11, ImplicitList17, OperandInfo48,0,nullptr },  // Inst #304 = FCFIDUSo
  { 305,	2,	1,	10,	4,	0, 0x18ULL, ImplicitList11, ImplicitList17, OperandInfo44,0,nullptr },  // Inst #305 = FCFIDUo
  { 306,	2,	1,	10,	4,	0, 0x18ULL, ImplicitList11, ImplicitList17, OperandInfo44,0,nullptr },  // Inst #306 = FCFIDo
  { 307,	3,	1,	12,	4,	0|(1<<MCID::Compare), 0x18ULL, nullptr, nullptr, OperandInfo49,0,nullptr },  // Inst #307 = FCMPUD
  { 308,	3,	1,	12,	4,	0|(1<<MCID::Compare), 0x18ULL, nullptr, nullptr, OperandInfo50,0,nullptr },  // Inst #308 = FCMPUS
  { 309,	3,	1,	10,	4,	0, 0x18ULL, nullptr, nullptr, OperandInfo46,0,nullptr },  // Inst #309 = FCPSGND
  { 310,	3,	1,	10,	4,	0, 0x18ULL, nullptr, ImplicitList17, OperandInfo46,0,nullptr },  // Inst #310 = FCPSGNDo
  { 311,	3,	1,	10,	4,	0, 0x18ULL, nullptr, nullptr, OperandInfo47,0,nullptr },  // Inst #311 = FCPSGNS
  { 312,	3,	1,	10,	4,	0, 0x18ULL, nullptr, ImplicitList17, OperandInfo47,0,nullptr },  // Inst #312 = FCPSGNSo
  { 313,	2,	1,	10,	4,	0, 0x18ULL, ImplicitList11, nullptr, OperandInfo44,0,nullptr },  // Inst #313 = FCTID
  { 314,	2,	1,	10,	4,	0, 0x18ULL, ImplicitList11, nullptr, OperandInfo44,0,nullptr },  // Inst #314 = FCTIDUZ
  { 315,	2,	1,	10,	4,	0, 0x18ULL, ImplicitList11, ImplicitList17, OperandInfo44,0,nullptr },  // Inst #315 = FCTIDUZo
  { 316,	2,	1,	10,	4,	0, 0x18ULL, ImplicitList11, nullptr, OperandInfo44,0,nullptr },  // Inst #316 = FCTIDZ
  { 317,	2,	1,	10,	4,	0, 0x18ULL, ImplicitList11, ImplicitList17, OperandInfo44,0,nullptr },  // Inst #317 = FCTIDZo
  { 318,	2,	1,	10,	4,	0, 0x18ULL, ImplicitList11, ImplicitList17, OperandInfo44,0,nullptr },  // Inst #318 = FCTIDo
  { 319,	2,	1,	10,	4,	0, 0x18ULL, ImplicitList11, nullptr, OperandInfo44,0,nullptr },  // Inst #319 = FCTIW
  { 320,	2,	1,	10,	4,	0, 0x18ULL, ImplicitList11, nullptr, OperandInfo44,0,nullptr },  // Inst #320 = FCTIWUZ
  { 321,	2,	1,	10,	4,	0, 0x18ULL, ImplicitList11, ImplicitList17, OperandInfo44,0,nullptr },  // Inst #321 = FCTIWUZo
  { 322,	2,	1,	10,	4,	0, 0x18ULL, ImplicitList11, nullptr, OperandInfo44,0,nullptr },  // Inst #322 = FCTIWZ
  { 323,	2,	1,	10,	4,	0, 0x18ULL, ImplicitList11, ImplicitList17, OperandInfo44,0,nullptr },  // Inst #323 = FCTIWZo
  { 324,	2,	1,	10,	4,	0, 0x18ULL, ImplicitList11, ImplicitList17, OperandInfo44,0,nullptr },  // Inst #324 = FCTIWo
  { 325,	3,	1,	13,	4,	0, 0x18ULL, ImplicitList11, nullptr, OperandInfo46,0,nullptr },  // Inst #325 = FDIV
  { 326,	3,	1,	14,	4,	0, 0x18ULL, ImplicitList11, nullptr, OperandInfo47,0,nullptr },  // Inst #326 = FDIVS
  { 327,	3,	1,	14,	4,	0, 0x18ULL, ImplicitList11, ImplicitList17, OperandInfo47,0,nullptr },  // Inst #327 = FDIVSo
  { 328,	3,	1,	13,	4,	0, 0x18ULL, ImplicitList11, ImplicitList17, OperandInfo46,0,nullptr },  // Inst #328 = FDIVo
  { 329,	4,	1,	15,	4,	0|(1<<MCID::Commutable), 0x18ULL, ImplicitList11, nullptr, OperandInfo51,0,nullptr },  // Inst #329 = FMADD
  { 330,	4,	1,	10,	4,	0|(1<<MCID::Commutable), 0x18ULL, ImplicitList11, nullptr, OperandInfo52,0,nullptr },  // Inst #330 = FMADDS
  { 331,	4,	1,	10,	4,	0|(1<<MCID::Commutable), 0x18ULL, ImplicitList11, ImplicitList17, OperandInfo52,0,nullptr },  // Inst #331 = FMADDSo
  { 332,	4,	1,	15,	4,	0|(1<<MCID::Commutable), 0x18ULL, ImplicitList11, ImplicitList17, OperandInfo51,0,nullptr },  // Inst #332 = FMADDo
  { 333,	2,	1,	10,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo45,0,nullptr },  // Inst #333 = FMR
  { 334,	2,	1,	10,	4,	0, 0x0ULL, nullptr, ImplicitList17, OperandInfo45,0,nullptr },  // Inst #334 = FMRo
  { 335,	4,	1,	15,	4,	0|(1<<MCID::Commutable), 0x18ULL, ImplicitList11, nullptr, OperandInfo51,0,nullptr },  // Inst #335 = FMSUB
  { 336,	4,	1,	10,	4,	0|(1<<MCID::Commutable), 0x18ULL, ImplicitList11, nullptr, OperandInfo52,0,nullptr },  // Inst #336 = FMSUBS
  { 337,	4,	1,	10,	4,	0|(1<<MCID::Commutable), 0x18ULL, ImplicitList11, ImplicitList17, OperandInfo52,0,nullptr },  // Inst #337 = FMSUBSo
  { 338,	4,	1,	15,	4,	0|(1<<MCID::Commutable), 0x18ULL, ImplicitList11, ImplicitList17, OperandInfo51,0,nullptr },  // Inst #338 = FMSUBo
  { 339,	3,	1,	15,	4,	0|(1<<MCID::Commutable), 0x18ULL, ImplicitList11, nullptr, OperandInfo46,0,nullptr },  // Inst #339 = FMUL
  { 340,	3,	1,	10,	4,	0|(1<<MCID::Commutable), 0x18ULL, ImplicitList11, nullptr, OperandInfo47,0,nullptr },  // Inst #340 = FMULS
  { 341,	3,	1,	10,	4,	0|(1<<MCID::Commutable), 0x18ULL, ImplicitList11, ImplicitList17, OperandInfo47,0,nullptr },  // Inst #341 = FMULSo
  { 342,	3,	1,	15,	4,	0|(1<<MCID::Commutable), 0x18ULL, ImplicitList11, ImplicitList17, OperandInfo46,0,nullptr },  // Inst #342 = FMULo
  { 343,	2,	1,	10,	4,	0, 0x18ULL, nullptr, nullptr, OperandInfo44,0,nullptr },  // Inst #343 = FNABSD
  { 344,	2,	1,	10,	4,	0, 0x18ULL, nullptr, ImplicitList17, OperandInfo44,0,nullptr },  // Inst #344 = FNABSDo
  { 345,	2,	1,	10,	4,	0, 0x18ULL, nullptr, nullptr, OperandInfo45,0,nullptr },  // Inst #345 = FNABSS
  { 346,	2,	1,	10,	4,	0, 0x18ULL, nullptr, ImplicitList17, OperandInfo45,0,nullptr },  // Inst #346 = FNABSSo
  { 347,	2,	1,	10,	4,	0, 0x18ULL, nullptr, nullptr, OperandInfo44,0,nullptr },  // Inst #347 = FNEGD
  { 348,	2,	1,	10,	4,	0, 0x18ULL, nullptr, ImplicitList17, OperandInfo44,0,nullptr },  // Inst #348 = FNEGDo
  { 349,	2,	1,	10,	4,	0, 0x18ULL, nullptr, nullptr, OperandInfo45,0,nullptr },  // Inst #349 = FNEGS
  { 350,	2,	1,	10,	4,	0, 0x18ULL, nullptr, ImplicitList17, OperandInfo45,0,nullptr },  // Inst #350 = FNEGSo
  { 351,	4,	1,	15,	4,	0|(1<<MCID::Commutable), 0x18ULL, ImplicitList11, nullptr, OperandInfo51,0,nullptr },  // Inst #351 = FNMADD
  { 352,	4,	1,	10,	4,	0|(1<<MCID::Commutable), 0x18ULL, ImplicitList11, nullptr, OperandInfo52,0,nullptr },  // Inst #352 = FNMADDS
  { 353,	4,	1,	10,	4,	0|(1<<MCID::Commutable), 0x18ULL, ImplicitList11, ImplicitList17, OperandInfo52,0,nullptr },  // Inst #353 = FNMADDSo
  { 354,	4,	1,	15,	4,	0|(1<<MCID::Commutable), 0x18ULL, ImplicitList11, ImplicitList17, OperandInfo51,0,nullptr },  // Inst #354 = FNMADDo
  { 355,	4,	1,	15,	4,	0|(1<<MCID::Commutable), 0x18ULL, ImplicitList11, nullptr, OperandInfo51,0,nullptr },  // Inst #355 = FNMSUB
  { 356,	4,	1,	10,	4,	0|(1<<MCID::Commutable), 0x18ULL, ImplicitList11, nullptr, OperandInfo52,0,nullptr },  // Inst #356 = FNMSUBS
  { 357,	4,	1,	10,	4,	0|(1<<MCID::Commutable), 0x18ULL, ImplicitList11, ImplicitList17, OperandInfo52,0,nullptr },  // Inst #357 = FNMSUBSo
  { 358,	4,	1,	15,	4,	0|(1<<MCID::Commutable), 0x18ULL, ImplicitList11, ImplicitList17, OperandInfo51,0,nullptr },  // Inst #358 = FNMSUBo
  { 359,	2,	1,	10,	4,	0, 0x18ULL, nullptr, nullptr, OperandInfo44,0,nullptr },  // Inst #359 = FRE
  { 360,	2,	1,	10,	4,	0, 0x18ULL, nullptr, nullptr, OperandInfo45,0,nullptr },  // Inst #360 = FRES
  { 361,	2,	1,	10,	4,	0, 0x18ULL, nullptr, ImplicitList17, OperandInfo45,0,nullptr },  // Inst #361 = FRESo
  { 362,	2,	1,	10,	4,	0, 0x18ULL, nullptr, ImplicitList17, OperandInfo44,0,nullptr },  // Inst #362 = FREo
  { 363,	2,	1,	10,	4,	0, 0x18ULL, ImplicitList11, nullptr, OperandInfo44,0,nullptr },  // Inst #363 = FRIMD
  { 364,	2,	1,	10,	4,	0, 0x18ULL, ImplicitList11, ImplicitList17, OperandInfo44,0,nullptr },  // Inst #364 = FRIMDo
  { 365,	2,	1,	10,	4,	0, 0x18ULL, ImplicitList11, nullptr, OperandInfo45,0,nullptr },  // Inst #365 = FRIMS
  { 366,	2,	1,	10,	4,	0, 0x18ULL, ImplicitList11, ImplicitList17, OperandInfo45,0,nullptr },  // Inst #366 = FRIMSo
  { 367,	2,	1,	10,	4,	0, 0x18ULL, ImplicitList11, nullptr, OperandInfo44,0,nullptr },  // Inst #367 = FRIND
  { 368,	2,	1,	10,	4,	0, 0x18ULL, ImplicitList11, ImplicitList17, OperandInfo44,0,nullptr },  // Inst #368 = FRINDo
  { 369,	2,	1,	10,	4,	0, 0x18ULL, ImplicitList11, nullptr, OperandInfo45,0,nullptr },  // Inst #369 = FRINS
  { 370,	2,	1,	10,	4,	0, 0x18ULL, ImplicitList11, ImplicitList17, OperandInfo45,0,nullptr },  // Inst #370 = FRINSo
  { 371,	2,	1,	10,	4,	0, 0x18ULL, ImplicitList11, nullptr, OperandInfo44,0,nullptr },  // Inst #371 = FRIPD
  { 372,	2,	1,	10,	4,	0, 0x18ULL, ImplicitList11, ImplicitList17, OperandInfo44,0,nullptr },  // Inst #372 = FRIPDo
  { 373,	2,	1,	10,	4,	0, 0x18ULL, ImplicitList11, nullptr, OperandInfo45,0,nullptr },  // Inst #373 = FRIPS
  { 374,	2,	1,	10,	4,	0, 0x18ULL, ImplicitList11, ImplicitList17, OperandInfo45,0,nullptr },  // Inst #374 = FRIPSo
  { 375,	2,	1,	10,	4,	0, 0x18ULL, ImplicitList11, nullptr, OperandInfo44,0,nullptr },  // Inst #375 = FRIZD
  { 376,	2,	1,	10,	4,	0, 0x18ULL, ImplicitList11, ImplicitList17, OperandInfo44,0,nullptr },  // Inst #376 = FRIZDo
  { 377,	2,	1,	10,	4,	0, 0x18ULL, ImplicitList11, nullptr, OperandInfo45,0,nullptr },  // Inst #377 = FRIZS
  { 378,	2,	1,	10,	4,	0, 0x18ULL, ImplicitList11, ImplicitList17, OperandInfo45,0,nullptr },  // Inst #378 = FRIZSo
  { 379,	2,	1,	10,	4,	0, 0x18ULL, ImplicitList11, nullptr, OperandInfo48,0,nullptr },  // Inst #379 = FRSP
  { 380,	2,	1,	10,	4,	0, 0x18ULL, ImplicitList11, ImplicitList17, OperandInfo48,0,nullptr },  // Inst #380 = FRSPo
  { 381,	2,	1,	10,	4,	0, 0x18ULL, nullptr, nullptr, OperandInfo44,0,nullptr },  // Inst #381 = FRSQRTE
  { 382,	2,	1,	10,	4,	0, 0x18ULL, nullptr, nullptr, OperandInfo45,0,nullptr },  // Inst #382 = FRSQRTES
  { 383,	2,	1,	10,	4,	0, 0x18ULL, nullptr, ImplicitList17, OperandInfo45,0,nullptr },  // Inst #383 = FRSQRTESo
  { 384,	2,	1,	10,	4,	0, 0x18ULL, nullptr, ImplicitList17, OperandInfo44,0,nullptr },  // Inst #384 = FRSQRTEo
  { 385,	4,	1,	10,	4,	0, 0x18ULL, nullptr, nullptr, OperandInfo51,0,nullptr },  // Inst #385 = FSELD
  { 386,	4,	1,	10,	4,	0, 0x18ULL, nullptr, ImplicitList17, OperandInfo51,0,nullptr },  // Inst #386 = FSELDo
  { 387,	4,	1,	10,	4,	0, 0x18ULL, nullptr, nullptr, OperandInfo53,0,nullptr },  // Inst #387 = FSELS
  { 388,	4,	1,	10,	4,	0, 0x18ULL, nullptr, ImplicitList17, OperandInfo53,0,nullptr },  // Inst #388 = FSELSo
  { 389,	2,	1,	16,	4,	0, 0x18ULL, ImplicitList11, nullptr, OperandInfo44,0,nullptr },  // Inst #389 = FSQRT
  { 390,	2,	1,	17,	4,	0, 0x18ULL, ImplicitList11, nullptr, OperandInfo45,0,nullptr },  // Inst #390 = FSQRTS
  { 391,	2,	1,	17,	4,	0, 0x18ULL, ImplicitList11, ImplicitList17, OperandInfo45,0,nullptr },  // Inst #391 = FSQRTSo
  { 392,	2,	1,	16,	4,	0, 0x18ULL, ImplicitList11, ImplicitList17, OperandInfo44,0,nullptr },  // Inst #392 = FSQRTo
  { 393,	3,	1,	11,	4,	0, 0x18ULL, ImplicitList11, nullptr, OperandInfo46,0,nullptr },  // Inst #393 = FSUB
  { 394,	3,	1,	10,	4,	0, 0x18ULL, ImplicitList11, nullptr, OperandInfo47,0,nullptr },  // Inst #394 = FSUBS
  { 395,	3,	1,	10,	4,	0, 0x18ULL, ImplicitList11, ImplicitList17, OperandInfo47,0,nullptr },  // Inst #395 = FSUBSo
  { 396,	3,	1,	11,	4,	0, 0x18ULL, ImplicitList11, ImplicitList17, OperandInfo46,0,nullptr },  // Inst #396 = FSUBo
  { 397,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo14,0,nullptr },  // Inst #397 = GETtlsADDR
  { 398,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #398 = GETtlsADDR32
  { 399,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo14,0,nullptr },  // Inst #399 = GETtlsldADDR
  { 400,	3,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #400 = GETtlsldADDR32
  { 401,	2,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo17,0,nullptr },  // Inst #401 = GetGBRO
  { 402,	2,	0,	18,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo36,0,nullptr },  // Inst #402 = ICBI
  { 403,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo30,0,nullptr },  // Inst #403 = INSLWI
  { 404,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo30,0,nullptr },  // Inst #404 = INSLWIo
  { 405,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo29,0,nullptr },  // Inst #405 = INSRDI
  { 406,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo29,0,nullptr },  // Inst #406 = INSRDIo
  { 407,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo30,0,nullptr },  // Inst #407 = INSRWI
  { 408,	4,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo30,0,nullptr },  // Inst #408 = INSRWIo
  { 409,	4,	1,	2,	4,	0|(1<<MCID::Select), 0x8ULL, nullptr, nullptr, OperandInfo54,0,nullptr },  // Inst #409 = ISEL
  { 410,	4,	1,	2,	4,	0|(1<<MCID::Select), 0x8ULL, nullptr, nullptr, OperandInfo55,0,nullptr },  // Inst #410 = ISEL8
  { 411,	0,	0,	19,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, nullptr,0,nullptr },  // Inst #411 = ISYNC
  { 412,	3,	1,	2,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo15,0,nullptr },  // Inst #412 = LA
  { 413,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo56,0,nullptr },  // Inst #413 = LAx
  { 414,	3,	1,	9,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo56,0,nullptr },  // Inst #414 = LBZ
  { 415,	3,	1,	9,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo57,0,nullptr },  // Inst #415 = LBZ8
  { 416,	4,	2,	20,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo58,0,nullptr },  // Inst #416 = LBZU
  { 417,	4,	2,	20,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo59,0,nullptr },  // Inst #417 = LBZU8
  { 418,	4,	2,	21,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo60,0,nullptr },  // Inst #418 = LBZUX
  { 419,	4,	2,	21,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo61,0,nullptr },  // Inst #419 = LBZUX8
  { 420,	3,	1,	9,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo62,0,nullptr },  // Inst #420 = LBZX
  { 421,	3,	1,	9,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo63,0,nullptr },  // Inst #421 = LBZX8
  { 422,	3,	1,	22,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo57,0,nullptr },  // Inst #422 = LD
  { 423,	3,	1,	23,	4,	0|(1<<MCID::MayLoad), 0x0ULL, nullptr, nullptr, OperandInfo63,0,nullptr },  // Inst #423 = LDARX
  { 424,	3,	1,	9,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo63,0,nullptr },  // Inst #424 = LDBRX
  { 425,	4,	2,	24,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo59,0,nullptr },  // Inst #425 = LDU
  { 426,	4,	2,	25,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo61,0,nullptr },  // Inst #426 = LDUX
  { 427,	3,	1,	22,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo63,0,nullptr },  // Inst #427 = LDX
  { 428,	3,	1,	0,	4,	0|(1<<MCID::MayLoad), 0x0ULL, nullptr, nullptr, OperandInfo64,0,nullptr },  // Inst #428 = LDgotTprelL
  { 429,	3,	1,	0,	4,	0|(1<<MCID::MayLoad), 0x0ULL, nullptr, nullptr, OperandInfo65,0,nullptr },  // Inst #429 = LDgotTprelL32
  { 430,	2,	0,	22,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::UnmodeledSideEffects), 0x10ULL, nullptr, nullptr, OperandInfo66,0,nullptr },  // Inst #430 = LDinto_toc
  { 431,	3,	1,	0,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo67,0,nullptr },  // Inst #431 = LDtoc
  { 432,	3,	1,	0,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo67,0,nullptr },  // Inst #432 = LDtocCPT
  { 433,	3,	1,	0,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo67,0,nullptr },  // Inst #433 = LDtocJTI
  { 434,	3,	1,	0,	4,	0|(1<<MCID::MayLoad), 0x0ULL, nullptr, nullptr, OperandInfo64,0,nullptr },  // Inst #434 = LDtocL
  { 435,	3,	1,	26,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo68,0,nullptr },  // Inst #435 = LFD
  { 436,	4,	2,	27,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo69,0,nullptr },  // Inst #436 = LFDU
  { 437,	4,	2,	28,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo70,0,nullptr },  // Inst #437 = LFDUX
  { 438,	3,	1,	26,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo71,0,nullptr },  // Inst #438 = LFDX
  { 439,	3,	1,	26,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo71,0,nullptr },  // Inst #439 = LFIWAX
  { 440,	3,	1,	26,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo71,0,nullptr },  // Inst #440 = LFIWZX
  { 441,	3,	1,	26,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo72,0,nullptr },  // Inst #441 = LFS
  { 442,	4,	2,	27,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo73,0,nullptr },  // Inst #442 = LFSU
  { 443,	4,	2,	28,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo74,0,nullptr },  // Inst #443 = LFSUX
  { 444,	3,	1,	26,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo75,0,nullptr },  // Inst #444 = LFSX
  { 445,	3,	1,	29,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x14ULL, nullptr, nullptr, OperandInfo56,0,nullptr },  // Inst #445 = LHA
  { 446,	3,	1,	29,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x14ULL, nullptr, nullptr, OperandInfo57,0,nullptr },  // Inst #446 = LHA8
  { 447,	4,	2,	30,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo58,0,nullptr },  // Inst #447 = LHAU
  { 448,	4,	2,	30,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo59,0,nullptr },  // Inst #448 = LHAU8
  { 449,	4,	2,	31,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo60,0,nullptr },  // Inst #449 = LHAUX
  { 450,	4,	2,	31,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo61,0,nullptr },  // Inst #450 = LHAUX8
  { 451,	3,	1,	29,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x14ULL, nullptr, nullptr, OperandInfo62,0,nullptr },  // Inst #451 = LHAX
  { 452,	3,	1,	29,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x14ULL, nullptr, nullptr, OperandInfo63,0,nullptr },  // Inst #452 = LHAX8
  { 453,	3,	1,	9,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo62,0,nullptr },  // Inst #453 = LHBRX
  { 454,	3,	1,	9,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo56,0,nullptr },  // Inst #454 = LHZ
  { 455,	3,	1,	9,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo57,0,nullptr },  // Inst #455 = LHZ8
  { 456,	4,	2,	20,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo58,0,nullptr },  // Inst #456 = LHZU
  { 457,	4,	2,	20,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo59,0,nullptr },  // Inst #457 = LHZU8
  { 458,	4,	2,	21,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo60,0,nullptr },  // Inst #458 = LHZUX
  { 459,	4,	2,	21,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo61,0,nullptr },  // Inst #459 = LHZUX8
  { 460,	3,	1,	9,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo62,0,nullptr },  // Inst #460 = LHZX
  { 461,	3,	1,	9,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo63,0,nullptr },  // Inst #461 = LHZX8
  { 462,	2,	1,	1,	4,	0|(1<<MCID::MoveImm)|(1<<MCID::Rematerializable)|(1<<MCID::CheapAsAMove), 0x8ULL, nullptr, nullptr, OperandInfo76,0,nullptr },  // Inst #462 = LI
  { 463,	2,	1,	1,	4,	0|(1<<MCID::MoveImm)|(1<<MCID::Rematerializable)|(1<<MCID::CheapAsAMove), 0x8ULL, nullptr, nullptr, OperandInfo77,0,nullptr },  // Inst #463 = LI8
  { 464,	2,	1,	1,	4,	0|(1<<MCID::MoveImm)|(1<<MCID::Rematerializable)|(1<<MCID::CheapAsAMove), 0x8ULL, nullptr, nullptr, OperandInfo76,0,nullptr },  // Inst #464 = LIS
  { 465,	2,	1,	1,	4,	0|(1<<MCID::MoveImm)|(1<<MCID::Rematerializable)|(1<<MCID::CheapAsAMove), 0x8ULL, nullptr, nullptr, OperandInfo77,0,nullptr },  // Inst #465 = LIS8
  { 466,	3,	1,	32,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo56,0,nullptr },  // Inst #466 = LMW
  { 467,	3,	1,	9,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo78,0,nullptr },  // Inst #467 = LVEBX
  { 468,	3,	1,	9,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo78,0,nullptr },  // Inst #468 = LVEHX
  { 469,	3,	1,	9,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo78,0,nullptr },  // Inst #469 = LVEWX
  { 470,	3,	1,	9,	4,	0, 0x10ULL, nullptr, nullptr, OperandInfo78,0,nullptr },  // Inst #470 = LVSL
  { 471,	3,	1,	9,	4,	0, 0x10ULL, nullptr, nullptr, OperandInfo78,0,nullptr },  // Inst #471 = LVSR
  { 472,	3,	1,	9,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo78,0,nullptr },  // Inst #472 = LVX
  { 473,	3,	1,	9,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo78,0,nullptr },  // Inst #473 = LVXL
  { 474,	3,	1,	33,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x14ULL, nullptr, nullptr, OperandInfo57,0,nullptr },  // Inst #474 = LWA
  { 475,	3,	1,	34,	4,	0|(1<<MCID::MayLoad), 0x0ULL, nullptr, nullptr, OperandInfo62,0,nullptr },  // Inst #475 = LWARX
  { 476,	4,	2,	31,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo61,0,nullptr },  // Inst #476 = LWAUX
  { 477,	3,	1,	29,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x14ULL, nullptr, nullptr, OperandInfo63,0,nullptr },  // Inst #477 = LWAX
  { 478,	3,	1,	29,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad)|(1<<MCID::UnmodeledSideEffects), 0x14ULL, nullptr, nullptr, OperandInfo62,0,nullptr },  // Inst #478 = LWAX_32
  { 479,	3,	1,	33,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad)|(1<<MCID::UnmodeledSideEffects), 0x14ULL, nullptr, nullptr, OperandInfo56,0,nullptr },  // Inst #479 = LWA_32
  { 480,	3,	1,	9,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo62,0,nullptr },  // Inst #480 = LWBRX
  { 481,	3,	1,	9,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo56,0,nullptr },  // Inst #481 = LWZ
  { 482,	3,	1,	9,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo57,0,nullptr },  // Inst #482 = LWZ8
  { 483,	4,	2,	20,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo58,0,nullptr },  // Inst #483 = LWZU
  { 484,	4,	2,	20,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo59,0,nullptr },  // Inst #484 = LWZU8
  { 485,	4,	2,	21,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo60,0,nullptr },  // Inst #485 = LWZUX
  { 486,	4,	2,	21,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo61,0,nullptr },  // Inst #486 = LWZUX8
  { 487,	3,	1,	9,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo62,0,nullptr },  // Inst #487 = LWZX
  { 488,	3,	1,	9,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x10ULL, nullptr, nullptr, OperandInfo63,0,nullptr },  // Inst #488 = LWZX8
  { 489,	3,	1,	0,	4,	0|(1<<MCID::MayLoad), 0x0ULL, nullptr, nullptr, OperandInfo79,0,nullptr },  // Inst #489 = LWZtoc
  { 490,	3,	1,	26,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x0ULL, ImplicitList11, nullptr, OperandInfo80,0,nullptr },  // Inst #490 = LXSDX
  { 491,	3,	1,	26,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x0ULL, ImplicitList11, nullptr, OperandInfo81,0,nullptr },  // Inst #491 = LXVD2X
  { 492,	3,	1,	26,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x0ULL, ImplicitList11, nullptr, OperandInfo81,0,nullptr },  // Inst #492 = LXVDSX
  { 493,	3,	1,	26,	4,	0|(1<<MCID::FoldableAsLoad)|(1<<MCID::MayLoad), 0x0ULL, ImplicitList11, nullptr, OperandInfo81,0,nullptr },  // Inst #493 = LXVW4X
  { 494,	2,	1,	35,	4,	0, 0x21ULL, nullptr, nullptr, OperandInfo82,0,nullptr },  // Inst #494 = MCRF
  { 495,	1,	1,	36,	4,	0, 0x20ULL, nullptr, nullptr, OperandInfo83,0,nullptr },  // Inst #495 = MFCR
  { 496,	1,	1,	36,	4,	0, 0x20ULL, nullptr, nullptr, OperandInfo84,0,nullptr },  // Inst #496 = MFCR8
  { 497,	1,	1,	37,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x9ULL, ImplicitList5, nullptr, OperandInfo83,0,nullptr },  // Inst #497 = MFCTR
  { 498,	1,	1,	37,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x9ULL, ImplicitList6, nullptr, OperandInfo84,0,nullptr },  // Inst #498 = MFCTR8
  { 499,	1,	1,	38,	4,	0, 0x1aULL, ImplicitList11, nullptr, OperandInfo85,0,nullptr },  // Inst #499 = MFFS
  { 500,	1,	1,	37,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x9ULL, ImplicitList8, nullptr, OperandInfo83,0,nullptr },  // Inst #500 = MFLR
  { 501,	1,	1,	37,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x9ULL, ImplicitList10, nullptr, OperandInfo84,0,nullptr },  // Inst #501 = MFLR8
  { 502,	1,	1,	39,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo83,0,nullptr },  // Inst #502 = MFMSR
  { 503,	2,	1,	40,	4,	0|(1<<MCID::ExtraSrcRegAllocReq), 0x21ULL, nullptr, nullptr, OperandInfo76,0,nullptr },  // Inst #503 = MFOCRF
  { 504,	2,	1,	40,	4,	0|(1<<MCID::ExtraSrcRegAllocReq), 0x21ULL, nullptr, nullptr, OperandInfo77,0,nullptr },  // Inst #504 = MFOCRF8
  { 505,	2,	1,	37,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo86,0,nullptr },  // Inst #505 = MFSPR
  { 506,	2,	1,	41,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo86,PPC::DeprecatedMFTB,nullptr },  // Inst #506 = MFTB
  { 507,	1,	1,	41,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x9ULL, nullptr, nullptr, OperandInfo84,0,nullptr },  // Inst #507 = MFTB8
  { 508,	1,	1,	2,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x9ULL, nullptr, nullptr, OperandInfo83,0,nullptr },  // Inst #508 = MFVRSAVE
  { 509,	2,	1,	2,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x9ULL, nullptr, nullptr, OperandInfo87,0,nullptr },  // Inst #509 = MFVRSAVEv
  { 510,	1,	1,	42,	4,	0|(1<<MCID::MayLoad), 0x0ULL, nullptr, nullptr, OperandInfo88,0,nullptr },  // Inst #510 = MFVSCR
  { 511,	0,	0,	43,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, nullptr,0,nullptr },  // Inst #511 = MSYNC
  { 512,	2,	0,	44,	4,	0, 0x20ULL, nullptr, nullptr, OperandInfo89,0,nullptr },  // Inst #512 = MTCRF
  { 513,	2,	0,	44,	4,	0, 0x20ULL, nullptr, nullptr, OperandInfo90,0,nullptr },  // Inst #513 = MTCRF8
  { 514,	1,	0,	45,	4,	0, 0x9ULL, nullptr, ImplicitList5, OperandInfo83,0,nullptr },  // Inst #514 = MTCTR
  { 515,	1,	0,	45,	4,	0, 0x9ULL, nullptr, ImplicitList6, OperandInfo84,0,nullptr },  // Inst #515 = MTCTR8
  { 516,	1,	0,	45,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x9ULL, nullptr, ImplicitList6, OperandInfo84,0,nullptr },  // Inst #516 = MTCTR8loop
  { 517,	1,	0,	45,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x9ULL, nullptr, ImplicitList5, OperandInfo83,0,nullptr },  // Inst #517 = MTCTRloop
  { 518,	1,	0,	46,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x1aULL, ImplicitList11, ImplicitList11, OperandInfo5,0,nullptr },  // Inst #518 = MTFSB0
  { 519,	1,	0,	46,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x1aULL, ImplicitList11, ImplicitList11, OperandInfo5,0,nullptr },  // Inst #519 = MTFSB1
  { 520,	2,	0,	46,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x1aULL, ImplicitList11, ImplicitList11, OperandInfo91,0,nullptr },  // Inst #520 = MTFSF
  { 521,	1,	0,	45,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x9ULL, nullptr, ImplicitList8, OperandInfo83,0,nullptr },  // Inst #521 = MTLR
  { 522,	1,	0,	45,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x9ULL, nullptr, ImplicitList10, OperandInfo84,0,nullptr },  // Inst #522 = MTLR8
  { 523,	2,	0,	47,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo86,0,nullptr },  // Inst #523 = MTMSR
  { 524,	2,	0,	48,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo86,0,nullptr },  // Inst #524 = MTMSRD
  { 525,	2,	1,	44,	4,	0, 0x21ULL, nullptr, nullptr, OperandInfo92,0,nullptr },  // Inst #525 = MTOCRF
  { 526,	2,	1,	44,	4,	0, 0x21ULL, nullptr, nullptr, OperandInfo93,0,nullptr },  // Inst #526 = MTOCRF8
  { 527,	2,	0,	45,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo89,0,nullptr },  // Inst #527 = MTSPR
  { 528,	1,	0,	2,	4,	0|(1<<MCID::UnmodeledSideEffects), 0xaULL, nullptr, nullptr, OperandInfo83,0,nullptr },  // Inst #528 = MTVRSAVE
  { 529,	2,	1,	2,	4,	0|(1<<MCID::UnmodeledSideEffects), 0xaULL, nullptr, nullptr, OperandInfo94,0,nullptr },  // Inst #529 = MTVRSAVEv
  { 530,	1,	0,	9,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo88,0,nullptr },  // Inst #530 = MTVSCR
  { 531,	3,	1,	49,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo13,0,nullptr },  // Inst #531 = MULHD
  { 532,	3,	1,	50,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo13,0,nullptr },  // Inst #532 = MULHDU
  { 533,	3,	1,	50,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList1, OperandInfo13,0,nullptr },  // Inst #533 = MULHDUo
  { 534,	3,	1,	49,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList1, OperandInfo13,0,nullptr },  // Inst #534 = MULHDo
  { 535,	3,	1,	49,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo11,0,nullptr },  // Inst #535 = MULHW
  { 536,	3,	1,	50,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo11,0,nullptr },  // Inst #536 = MULHWU
  { 537,	3,	1,	50,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList1, OperandInfo11,0,nullptr },  // Inst #537 = MULHWUo
  { 538,	3,	1,	49,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList1, OperandInfo11,0,nullptr },  // Inst #538 = MULHWo
  { 539,	3,	1,	51,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo13,0,nullptr },  // Inst #539 = MULLD
  { 540,	3,	1,	51,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList1, OperandInfo13,0,nullptr },  // Inst #540 = MULLDo
  { 541,	3,	1,	52,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #541 = MULLI
  { 542,	3,	1,	52,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo14,0,nullptr },  // Inst #542 = MULLI8
  { 543,	3,	1,	49,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo11,0,nullptr },  // Inst #543 = MULLW
  { 544,	3,	1,	49,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList1, OperandInfo11,0,nullptr },  // Inst #544 = MULLWo
  { 545,	0,	0,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x38ULL, nullptr, ImplicitList8, nullptr,0,nullptr },  // Inst #545 = MovePCtoLR
  { 546,	0,	0,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x38ULL, nullptr, ImplicitList10, nullptr,0,nullptr },  // Inst #546 = MovePCtoLR8
  { 547,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo11,0,nullptr },  // Inst #547 = NAND
  { 548,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo13,0,nullptr },  // Inst #548 = NAND8
  { 549,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList1, OperandInfo13,0,nullptr },  // Inst #549 = NAND8o
  { 550,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList1, OperandInfo11,0,nullptr },  // Inst #550 = NANDo
  { 551,	2,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo17,0,nullptr },  // Inst #551 = NEG
  { 552,	2,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo18,0,nullptr },  // Inst #552 = NEG8
  { 553,	2,	1,	1,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo18,0,nullptr },  // Inst #553 = NEG8o
  { 554,	2,	1,	1,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo17,0,nullptr },  // Inst #554 = NEGo
  { 555,	0,	0,	1,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x8ULL, nullptr, nullptr, nullptr,0,nullptr },  // Inst #555 = NOP
  { 556,	0,	0,	1,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x8ULL, nullptr, nullptr, nullptr,0,nullptr },  // Inst #556 = NOP_GT_PWR6
  { 557,	0,	0,	1,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x8ULL, nullptr, nullptr, nullptr,0,nullptr },  // Inst #557 = NOP_GT_PWR7
  { 558,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo11,0,nullptr },  // Inst #558 = NOR
  { 559,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo13,0,nullptr },  // Inst #559 = NOR8
  { 560,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList1, OperandInfo13,0,nullptr },  // Inst #560 = NOR8o
  { 561,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList1, OperandInfo11,0,nullptr },  // Inst #561 = NORo
  { 562,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo11,0,nullptr },  // Inst #562 = OR
  { 563,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo13,0,nullptr },  // Inst #563 = OR8
  { 564,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList1, OperandInfo13,0,nullptr },  // Inst #564 = OR8o
  { 565,	3,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo11,0,nullptr },  // Inst #565 = ORC
  { 566,	3,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo13,0,nullptr },  // Inst #566 = ORC8
  { 567,	3,	1,	1,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo13,0,nullptr },  // Inst #567 = ORC8o
  { 568,	3,	1,	1,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo11,0,nullptr },  // Inst #568 = ORCo
  { 569,	3,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #569 = ORI
  { 570,	3,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo14,0,nullptr },  // Inst #570 = ORI8
  { 571,	3,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #571 = ORIS
  { 572,	3,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo14,0,nullptr },  // Inst #572 = ORIS8
  { 573,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList1, OperandInfo11,0,nullptr },  // Inst #573 = ORo
  { 574,	2,	1,	2,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo18,0,nullptr },  // Inst #574 = POPCNTD
  { 575,	2,	1,	2,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo17,0,nullptr },  // Inst #575 = POPCNTW
  { 576,	1,	1,	0,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo83,0,nullptr },  // Inst #576 = PPC32GOT
  { 577,	2,	2,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo17,0,nullptr },  // Inst #577 = PPC32PICGOT
  { 578,	3,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo95,0,nullptr },  // Inst #578 = RESTORE_CR
  { 579,	3,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo96,0,nullptr },  // Inst #579 = RESTORE_CRBIT
  { 580,	3,	1,	0,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo97,0,nullptr },  // Inst #580 = RESTORE_VRSAVE
  { 581,	4,	1,	53,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo98,0,nullptr },  // Inst #581 = RLDCL
  { 582,	4,	1,	53,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo98,0,nullptr },  // Inst #582 = RLDCLo
  { 583,	4,	1,	53,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo98,0,nullptr },  // Inst #583 = RLDCR
  { 584,	4,	1,	53,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo98,0,nullptr },  // Inst #584 = RLDCRo
  { 585,	4,	1,	54,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo29,0,nullptr },  // Inst #585 = RLDIC
  { 586,	4,	1,	54,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo29,0,nullptr },  // Inst #586 = RLDICL
  { 587,	4,	1,	54,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo99,0,nullptr },  // Inst #587 = RLDICL_32_64
  { 588,	4,	1,	54,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo29,0,nullptr },  // Inst #588 = RLDICLo
  { 589,	4,	1,	54,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo29,0,nullptr },  // Inst #589 = RLDICR
  { 590,	4,	1,	54,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo29,0,nullptr },  // Inst #590 = RLDICRo
  { 591,	4,	1,	54,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo29,0,nullptr },  // Inst #591 = RLDICo
  { 592,	5,	1,	54,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo100,0,nullptr },  // Inst #592 = RLDIMI
  { 593,	5,	1,	54,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList1, OperandInfo100,0,nullptr },  // Inst #593 = RLDIMIo
  { 594,	6,	1,	55,	4,	0|(1<<MCID::Commutable), 0xcULL, nullptr, nullptr, OperandInfo101,0,nullptr },  // Inst #594 = RLWIMI
  { 595,	6,	1,	55,	4,	0|(1<<MCID::Commutable), 0xcULL, nullptr, nullptr, OperandInfo102,0,nullptr },  // Inst #595 = RLWIMI8
  { 596,	6,	1,	55,	4,	0|(1<<MCID::Commutable), 0xcULL, nullptr, ImplicitList1, OperandInfo102,0,nullptr },  // Inst #596 = RLWIMI8o
  { 597,	6,	1,	55,	4,	0|(1<<MCID::Commutable), 0xcULL, nullptr, ImplicitList1, OperandInfo101,0,nullptr },  // Inst #597 = RLWIMIo
  { 598,	5,	1,	2,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo103,0,nullptr },  // Inst #598 = RLWINM
  { 599,	5,	1,	2,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo104,0,nullptr },  // Inst #599 = RLWINM8
  { 600,	5,	1,	2,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo104,0,nullptr },  // Inst #600 = RLWINM8o
  { 601,	5,	1,	2,	4,	0, 0xcULL, nullptr, ImplicitList1, OperandInfo103,0,nullptr },  // Inst #601 = RLWINMo
  { 602,	5,	1,	2,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo105,0,nullptr },  // Inst #602 = RLWNM
  { 603,	5,	1,	2,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo105,0,nullptr },  // Inst #603 = RLWNMo
  { 604,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo14,0,nullptr },  // Inst #604 = ROTRDI
  { 605,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo14,0,nullptr },  // Inst #605 = ROTRDIo
  { 606,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #606 = ROTRWI
  { 607,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #607 = ROTRWIo
  { 608,	1,	0,	3,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x38ULL, nullptr, nullptr, OperandInfo2,0,nullptr },  // Inst #608 = SC
  { 609,	5,	1,	0,	4,	0|(1<<MCID::UsesCustomInserter)|(1<<MCID::UnmodeledSideEffects), 0x2ULL, nullptr, nullptr, OperandInfo106,0,nullptr },  // Inst #609 = SELECT_CC_F4
  { 610,	5,	1,	0,	4,	0|(1<<MCID::UsesCustomInserter)|(1<<MCID::UnmodeledSideEffects), 0x2ULL, nullptr, nullptr, OperandInfo107,0,nullptr },  // Inst #610 = SELECT_CC_F8
  { 611,	5,	1,	0,	4,	0|(1<<MCID::UsesCustomInserter)|(1<<MCID::UnmodeledSideEffects), 0x2ULL, nullptr, nullptr, OperandInfo108,0,nullptr },  // Inst #611 = SELECT_CC_I4
  { 612,	5,	1,	0,	4,	0|(1<<MCID::UsesCustomInserter)|(1<<MCID::UnmodeledSideEffects), 0x2ULL, nullptr, nullptr, OperandInfo109,0,nullptr },  // Inst #612 = SELECT_CC_I8
  { 613,	5,	1,	0,	4,	0|(1<<MCID::UsesCustomInserter)|(1<<MCID::UnmodeledSideEffects), 0x2ULL, nullptr, nullptr, OperandInfo110,0,nullptr },  // Inst #613 = SELECT_CC_VRRC
  { 614,	4,	1,	0,	4,	0|(1<<MCID::UsesCustomInserter), 0x2ULL, nullptr, nullptr, OperandInfo111,0,nullptr },  // Inst #614 = SELECT_F4
  { 615,	4,	1,	0,	4,	0|(1<<MCID::UsesCustomInserter), 0x2ULL, nullptr, nullptr, OperandInfo112,0,nullptr },  // Inst #615 = SELECT_F8
  { 616,	4,	1,	0,	4,	0|(1<<MCID::UsesCustomInserter), 0x2ULL, nullptr, nullptr, OperandInfo113,0,nullptr },  // Inst #616 = SELECT_I4
  { 617,	4,	1,	0,	4,	0|(1<<MCID::UsesCustomInserter), 0x2ULL, nullptr, nullptr, OperandInfo114,0,nullptr },  // Inst #617 = SELECT_I8
  { 618,	4,	1,	0,	4,	0|(1<<MCID::UsesCustomInserter), 0x2ULL, nullptr, nullptr, OperandInfo115,0,nullptr },  // Inst #618 = SELECT_VRRC
  { 619,	0,	0,	56,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, nullptr,0,nullptr },  // Inst #619 = SLBIA
  { 620,	1,	0,	57,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo83,0,nullptr },  // Inst #620 = SLBIE
  { 621,	2,	1,	58,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo17,0,nullptr },  // Inst #621 = SLBMFEE
  { 622,	2,	0,	59,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo17,0,nullptr },  // Inst #622 = SLBMTE
  { 623,	3,	1,	53,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo116,0,nullptr },  // Inst #623 = SLD
  { 624,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo14,0,nullptr },  // Inst #624 = SLDI
  { 625,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo14,0,nullptr },  // Inst #625 = SLDIo
  { 626,	3,	1,	53,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo116,0,nullptr },  // Inst #626 = SLDo
  { 627,	3,	1,	2,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo11,0,nullptr },  // Inst #627 = SLW
  { 628,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #628 = SLWI
  { 629,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #629 = SLWIo
  { 630,	3,	1,	2,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo11,0,nullptr },  // Inst #630 = SLWo
  { 631,	3,	0,	0,	4,	0|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo95,0,nullptr },  // Inst #631 = SPILL_CR
  { 632,	3,	0,	0,	4,	0|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo96,0,nullptr },  // Inst #632 = SPILL_CRBIT
  { 633,	3,	0,	0,	4,	0|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo97,0,nullptr },  // Inst #633 = SPILL_VRSAVE
  { 634,	3,	1,	53,	4,	0, 0x8ULL, nullptr, ImplicitList2, OperandInfo116,0,nullptr },  // Inst #634 = SRAD
  { 635,	3,	1,	54,	4,	0, 0x8ULL, nullptr, ImplicitList2, OperandInfo14,0,nullptr },  // Inst #635 = SRADI
  { 636,	3,	1,	54,	4,	0, 0x8ULL, nullptr, ImplicitList3, OperandInfo14,0,nullptr },  // Inst #636 = SRADIo
  { 637,	3,	1,	53,	4,	0, 0x8ULL, nullptr, ImplicitList3, OperandInfo116,0,nullptr },  // Inst #637 = SRADo
  { 638,	3,	1,	60,	4,	0, 0x8ULL, nullptr, ImplicitList2, OperandInfo11,0,nullptr },  // Inst #638 = SRAW
  { 639,	3,	1,	60,	4,	0, 0x8ULL, nullptr, ImplicitList2, OperandInfo12,0,nullptr },  // Inst #639 = SRAWI
  { 640,	3,	1,	60,	4,	0, 0x8ULL, nullptr, ImplicitList3, OperandInfo12,0,nullptr },  // Inst #640 = SRAWIo
  { 641,	3,	1,	60,	4,	0, 0x8ULL, nullptr, ImplicitList3, OperandInfo11,0,nullptr },  // Inst #641 = SRAWo
  { 642,	3,	1,	53,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo116,0,nullptr },  // Inst #642 = SRD
  { 643,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo14,0,nullptr },  // Inst #643 = SRDI
  { 644,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo14,0,nullptr },  // Inst #644 = SRDIo
  { 645,	3,	1,	53,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo116,0,nullptr },  // Inst #645 = SRDo
  { 646,	3,	1,	2,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo11,0,nullptr },  // Inst #646 = SRW
  { 647,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #647 = SRWI
  { 648,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #648 = SRWIo
  { 649,	3,	1,	2,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo11,0,nullptr },  // Inst #649 = SRWo
  { 650,	3,	0,	42,	4,	0|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo56,0,nullptr },  // Inst #650 = STB
  { 651,	3,	0,	42,	4,	0|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo57,0,nullptr },  // Inst #651 = STB8
  { 652,	4,	1,	61,	4,	0|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo117,0,nullptr },  // Inst #652 = STBU
  { 653,	4,	1,	61,	4,	0|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo118,0,nullptr },  // Inst #653 = STBU8
  { 654,	4,	1,	61,	4,	0|(1<<MCID::MayStore), 0x14ULL, nullptr, nullptr, OperandInfo119,0,nullptr },  // Inst #654 = STBUX
  { 655,	4,	1,	61,	4,	0|(1<<MCID::MayStore), 0x14ULL, nullptr, nullptr, OperandInfo120,0,nullptr },  // Inst #655 = STBUX8
  { 656,	3,	0,	42,	4,	0|(1<<MCID::MayStore), 0x14ULL, nullptr, nullptr, OperandInfo62,0,nullptr },  // Inst #656 = STBX
  { 657,	3,	0,	42,	4,	0|(1<<MCID::MayStore), 0x14ULL, nullptr, nullptr, OperandInfo63,0,nullptr },  // Inst #657 = STBX8
  { 658,	3,	0,	62,	4,	0|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo57,0,nullptr },  // Inst #658 = STD
  { 659,	3,	0,	42,	4,	0|(1<<MCID::MayStore), 0x14ULL, nullptr, nullptr, OperandInfo63,0,nullptr },  // Inst #659 = STDBRX
  { 660,	3,	0,	63,	4,	0|(1<<MCID::MayStore), 0x0ULL, nullptr, ImplicitList1, OperandInfo63,0,nullptr },  // Inst #660 = STDCX
  { 661,	4,	1,	64,	4,	0|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo118,0,nullptr },  // Inst #661 = STDU
  { 662,	4,	1,	65,	4,	0|(1<<MCID::MayStore), 0x14ULL, nullptr, nullptr, OperandInfo120,0,nullptr },  // Inst #662 = STDUX
  { 663,	3,	0,	62,	4,	0|(1<<MCID::MayStore), 0x14ULL, nullptr, nullptr, OperandInfo63,0,nullptr },  // Inst #663 = STDX
  { 664,	3,	0,	66,	4,	0|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo68,0,nullptr },  // Inst #664 = STFD
  { 665,	4,	1,	67,	4,	0|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo121,0,nullptr },  // Inst #665 = STFDU
  { 666,	4,	1,	67,	4,	0|(1<<MCID::MayStore), 0x14ULL, nullptr, nullptr, OperandInfo122,0,nullptr },  // Inst #666 = STFDUX
  { 667,	3,	0,	66,	4,	0|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo71,0,nullptr },  // Inst #667 = STFDX
  { 668,	3,	0,	66,	4,	0|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo71,0,nullptr },  // Inst #668 = STFIWX
  { 669,	3,	0,	66,	4,	0|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo72,0,nullptr },  // Inst #669 = STFS
  { 670,	4,	1,	67,	4,	0|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo123,0,nullptr },  // Inst #670 = STFSU
  { 671,	4,	1,	67,	4,	0|(1<<MCID::MayStore), 0x14ULL, nullptr, nullptr, OperandInfo124,0,nullptr },  // Inst #671 = STFSUX
  { 672,	3,	0,	66,	4,	0|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo75,0,nullptr },  // Inst #672 = STFSX
  { 673,	3,	0,	42,	4,	0|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo56,0,nullptr },  // Inst #673 = STH
  { 674,	3,	0,	42,	4,	0|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo57,0,nullptr },  // Inst #674 = STH8
  { 675,	3,	0,	42,	4,	0|(1<<MCID::MayStore), 0x14ULL, nullptr, nullptr, OperandInfo62,0,nullptr },  // Inst #675 = STHBRX
  { 676,	4,	1,	61,	4,	0|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo117,0,nullptr },  // Inst #676 = STHU
  { 677,	4,	1,	61,	4,	0|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo118,0,nullptr },  // Inst #677 = STHU8
  { 678,	4,	1,	61,	4,	0|(1<<MCID::MayStore), 0x14ULL, nullptr, nullptr, OperandInfo119,0,nullptr },  // Inst #678 = STHUX
  { 679,	4,	1,	61,	4,	0|(1<<MCID::MayStore), 0x14ULL, nullptr, nullptr, OperandInfo120,0,nullptr },  // Inst #679 = STHUX8
  { 680,	3,	0,	42,	4,	0|(1<<MCID::MayStore), 0x14ULL, nullptr, nullptr, OperandInfo62,0,nullptr },  // Inst #680 = STHX
  { 681,	3,	0,	42,	4,	0|(1<<MCID::MayStore), 0x14ULL, nullptr, nullptr, OperandInfo63,0,nullptr },  // Inst #681 = STHX8
  { 682,	3,	0,	32,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo56,0,nullptr },  // Inst #682 = STMW
  { 683,	3,	0,	42,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo78,0,nullptr },  // Inst #683 = STVEBX
  { 684,	3,	0,	42,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo78,0,nullptr },  // Inst #684 = STVEHX
  { 685,	3,	0,	42,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo78,0,nullptr },  // Inst #685 = STVEWX
  { 686,	3,	0,	42,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo78,0,nullptr },  // Inst #686 = STVX
  { 687,	3,	0,	42,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo78,0,nullptr },  // Inst #687 = STVXL
  { 688,	3,	0,	42,	4,	0|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo56,0,nullptr },  // Inst #688 = STW
  { 689,	3,	0,	42,	4,	0|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo57,0,nullptr },  // Inst #689 = STW8
  { 690,	3,	0,	42,	4,	0|(1<<MCID::MayStore), 0x14ULL, nullptr, nullptr, OperandInfo62,0,nullptr },  // Inst #690 = STWBRX
  { 691,	3,	0,	68,	4,	0|(1<<MCID::MayStore), 0x0ULL, nullptr, ImplicitList1, OperandInfo62,0,nullptr },  // Inst #691 = STWCX
  { 692,	4,	1,	61,	4,	0|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo117,0,nullptr },  // Inst #692 = STWU
  { 693,	4,	1,	61,	4,	0|(1<<MCID::MayStore), 0x10ULL, nullptr, nullptr, OperandInfo118,0,nullptr },  // Inst #693 = STWU8
  { 694,	4,	1,	61,	4,	0|(1<<MCID::MayStore), 0x14ULL, nullptr, nullptr, OperandInfo119,0,nullptr },  // Inst #694 = STWUX
  { 695,	4,	1,	61,	4,	0|(1<<MCID::MayStore), 0x14ULL, nullptr, nullptr, OperandInfo120,0,nullptr },  // Inst #695 = STWUX8
  { 696,	3,	0,	42,	4,	0|(1<<MCID::MayStore), 0x14ULL, nullptr, nullptr, OperandInfo62,0,nullptr },  // Inst #696 = STWX
  { 697,	3,	0,	42,	4,	0|(1<<MCID::MayStore), 0x14ULL, nullptr, nullptr, OperandInfo63,0,nullptr },  // Inst #697 = STWX8
  { 698,	3,	0,	66,	4,	0|(1<<MCID::MayStore), 0x0ULL, ImplicitList11, nullptr, OperandInfo80,0,nullptr },  // Inst #698 = STXSDX
  { 699,	3,	0,	66,	4,	0|(1<<MCID::MayStore), 0x0ULL, ImplicitList11, nullptr, OperandInfo81,0,nullptr },  // Inst #699 = STXVD2X
  { 700,	3,	0,	66,	4,	0|(1<<MCID::MayStore), 0x0ULL, ImplicitList11, nullptr, OperandInfo81,0,nullptr },  // Inst #700 = STXVW4X
  { 701,	3,	1,	2,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo11,0,nullptr },  // Inst #701 = SUBF
  { 702,	3,	1,	2,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo13,0,nullptr },  // Inst #702 = SUBF8
  { 703,	3,	1,	2,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo13,0,nullptr },  // Inst #703 = SUBF8o
  { 704,	3,	1,	2,	4,	0, 0xcULL, nullptr, ImplicitList2, OperandInfo11,0,nullptr },  // Inst #704 = SUBFC
  { 705,	3,	1,	2,	4,	0, 0xcULL, nullptr, ImplicitList2, OperandInfo13,0,nullptr },  // Inst #705 = SUBFC8
  { 706,	3,	1,	2,	4,	0, 0xcULL, nullptr, ImplicitList2, OperandInfo13,0,nullptr },  // Inst #706 = SUBFC8o
  { 707,	3,	1,	2,	4,	0, 0xcULL, nullptr, ImplicitList3, OperandInfo11,0,nullptr },  // Inst #707 = SUBFCo
  { 708,	3,	1,	2,	4,	0, 0x8ULL, ImplicitList2, ImplicitList2, OperandInfo11,0,nullptr },  // Inst #708 = SUBFE
  { 709,	3,	1,	2,	4,	0, 0x8ULL, ImplicitList2, ImplicitList2, OperandInfo13,0,nullptr },  // Inst #709 = SUBFE8
  { 710,	3,	1,	2,	4,	0, 0x8ULL, ImplicitList2, ImplicitList3, OperandInfo13,0,nullptr },  // Inst #710 = SUBFE8o
  { 711,	3,	1,	2,	4,	0, 0x8ULL, ImplicitList2, ImplicitList3, OperandInfo11,0,nullptr },  // Inst #711 = SUBFEo
  { 712,	3,	1,	2,	4,	0, 0x8ULL, nullptr, ImplicitList2, OperandInfo12,0,nullptr },  // Inst #712 = SUBFIC
  { 713,	3,	1,	2,	4,	0, 0x8ULL, nullptr, ImplicitList2, OperandInfo14,0,nullptr },  // Inst #713 = SUBFIC8
  { 714,	2,	1,	2,	4,	0, 0x8ULL, ImplicitList2, ImplicitList2, OperandInfo17,0,nullptr },  // Inst #714 = SUBFME
  { 715,	2,	1,	2,	4,	0, 0x8ULL, ImplicitList2, ImplicitList2, OperandInfo18,0,nullptr },  // Inst #715 = SUBFME8
  { 716,	2,	1,	2,	4,	0, 0x8ULL, ImplicitList2, ImplicitList3, OperandInfo18,0,nullptr },  // Inst #716 = SUBFME8o
  { 717,	2,	1,	2,	4,	0, 0x8ULL, ImplicitList2, ImplicitList3, OperandInfo17,0,nullptr },  // Inst #717 = SUBFMEo
  { 718,	2,	1,	2,	4,	0, 0x8ULL, ImplicitList2, ImplicitList2, OperandInfo17,0,nullptr },  // Inst #718 = SUBFZE
  { 719,	2,	1,	2,	4,	0, 0x8ULL, ImplicitList2, ImplicitList2, OperandInfo18,0,nullptr },  // Inst #719 = SUBFZE8
  { 720,	2,	1,	2,	4,	0, 0x8ULL, ImplicitList2, ImplicitList3, OperandInfo18,0,nullptr },  // Inst #720 = SUBFZE8o
  { 721,	2,	1,	2,	4,	0, 0x8ULL, ImplicitList2, ImplicitList3, OperandInfo17,0,nullptr },  // Inst #721 = SUBFZEo
  { 722,	3,	1,	2,	4,	0, 0x8ULL, nullptr, ImplicitList1, OperandInfo11,0,nullptr },  // Inst #722 = SUBFo
  { 723,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #723 = SUBI
  { 724,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #724 = SUBIC
  { 725,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #725 = SUBICo
  { 726,	3,	0,	0,	0,	0|(1<<MCID::Pseudo)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #726 = SUBIS
  { 727,	1,	0,	43,	4,	0|(1<<MCID::MayLoad)|(1<<MCID::MayStore)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo2,0,nullptr },  // Inst #727 = SYNC
  { 728,	1,	0,	3,	4,	0|(1<<MCID::Return)|(1<<MCID::Branch)|(1<<MCID::Barrier)|(1<<MCID::Call)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList11, nullptr, OperandInfo5,0,nullptr },  // Inst #728 = TAILB
  { 729,	1,	0,	3,	4,	0|(1<<MCID::Return)|(1<<MCID::Branch)|(1<<MCID::Barrier)|(1<<MCID::Call)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList11, nullptr, OperandInfo5,0,nullptr },  // Inst #729 = TAILB8
  { 730,	1,	0,	3,	4,	0|(1<<MCID::Return)|(1<<MCID::Branch)|(1<<MCID::Barrier)|(1<<MCID::Call)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList11, nullptr, OperandInfo5,0,nullptr },  // Inst #730 = TAILBA
  { 731,	1,	0,	3,	4,	0|(1<<MCID::Return)|(1<<MCID::Branch)|(1<<MCID::Barrier)|(1<<MCID::Call)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList11, nullptr, OperandInfo5,0,nullptr },  // Inst #731 = TAILBA8
  { 732,	0,	0,	3,	4,	0|(1<<MCID::Return)|(1<<MCID::Branch)|(1<<MCID::IndirectBranch)|(1<<MCID::Barrier)|(1<<MCID::Call)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, nullptr, nullptr,0,nullptr },  // Inst #732 = TAILBCTR
  { 733,	0,	0,	3,	4,	0|(1<<MCID::Return)|(1<<MCID::Branch)|(1<<MCID::IndirectBranch)|(1<<MCID::Barrier)|(1<<MCID::Call)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList9, nullptr, nullptr,0,nullptr },  // Inst #733 = TAILBCTR8
  { 734,	2,	0,	0,	4,	0|(1<<MCID::Return)|(1<<MCID::Barrier)|(1<<MCID::Call)|(1<<MCID::Terminator), 0x0ULL, ImplicitList11, nullptr, OperandInfo125,0,nullptr },  // Inst #734 = TCRETURNai
  { 735,	2,	0,	0,	4,	0|(1<<MCID::Return)|(1<<MCID::Barrier)|(1<<MCID::Call)|(1<<MCID::Terminator), 0x0ULL, ImplicitList11, nullptr, OperandInfo125,0,nullptr },  // Inst #735 = TCRETURNai8
  { 736,	2,	0,	0,	4,	0|(1<<MCID::Return)|(1<<MCID::Barrier)|(1<<MCID::Call)|(1<<MCID::Terminator), 0x0ULL, ImplicitList11, nullptr, OperandInfo125,0,nullptr },  // Inst #736 = TCRETURNdi
  { 737,	2,	0,	0,	4,	0|(1<<MCID::Return)|(1<<MCID::Barrier)|(1<<MCID::Call)|(1<<MCID::Terminator), 0x0ULL, ImplicitList11, nullptr, OperandInfo125,0,nullptr },  // Inst #737 = TCRETURNdi8
  { 738,	2,	0,	0,	4,	0|(1<<MCID::Return)|(1<<MCID::Barrier)|(1<<MCID::Call)|(1<<MCID::Terminator), 0x0ULL, ImplicitList11, nullptr, OperandInfo126,0,nullptr },  // Inst #738 = TCRETURNri
  { 739,	2,	0,	0,	4,	0|(1<<MCID::Return)|(1<<MCID::Barrier)|(1<<MCID::Call)|(1<<MCID::Terminator), 0x0ULL, ImplicitList11, nullptr, OperandInfo127,0,nullptr },  // Inst #739 = TCRETURNri8
  { 740,	3,	0,	69,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo128,0,nullptr },  // Inst #740 = TD
  { 741,	3,	0,	69,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo129,0,nullptr },  // Inst #741 = TDI
  { 742,	2,	0,	70,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo17,0,nullptr },  // Inst #742 = TLBIE
  { 743,	1,	0,	71,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo83,0,nullptr },  // Inst #743 = TLBIEL
  { 744,	0,	0,	72,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, nullptr,0,nullptr },  // Inst #744 = TLBSYNC
  { 745,	0,	0,	9,	4,	0|(1<<MCID::Barrier)|(1<<MCID::Terminator)|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, nullptr,0,nullptr },  // Inst #745 = TRAP
  { 746,	3,	0,	73,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo130,0,nullptr },  // Inst #746 = TW
  { 747,	3,	0,	73,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo131,0,nullptr },  // Inst #747 = TWI
  { 748,	2,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo17,0,nullptr },  // Inst #748 = UPDATE_VRSAVE
  { 749,	2,	1,	0,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo17,0,nullptr },  // Inst #749 = UpdateGBR
  { 750,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #750 = VADDCUW
  { 751,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #751 = VADDFP
  { 752,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #752 = VADDSBS
  { 753,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #753 = VADDSHS
  { 754,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #754 = VADDSWS
  { 755,	3,	1,	75,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #755 = VADDUBM
  { 756,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #756 = VADDUBS
  { 757,	3,	1,	75,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #757 = VADDUHM
  { 758,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #758 = VADDUHS
  { 759,	3,	1,	75,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #759 = VADDUWM
  { 760,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #760 = VADDUWS
  { 761,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #761 = VAND
  { 762,	3,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #762 = VANDC
  { 763,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #763 = VAVGSB
  { 764,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #764 = VAVGSH
  { 765,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #765 = VAVGSW
  { 766,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #766 = VAVGUB
  { 767,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #767 = VAVGUH
  { 768,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #768 = VAVGUW
  { 769,	3,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo133,0,nullptr },  // Inst #769 = VCFSX
  { 770,	2,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo134,0,nullptr },  // Inst #770 = VCFSX_0
  { 771,	3,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo133,0,nullptr },  // Inst #771 = VCFUX
  { 772,	2,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo134,0,nullptr },  // Inst #772 = VCFUX_0
  { 773,	3,	1,	76,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #773 = VCMPBFP
  { 774,	3,	1,	76,	4,	0, 0x28ULL, nullptr, ImplicitList18, OperandInfo132,0,nullptr },  // Inst #774 = VCMPBFPo
  { 775,	3,	1,	76,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #775 = VCMPEQFP
  { 776,	3,	1,	76,	4,	0, 0x28ULL, nullptr, ImplicitList18, OperandInfo132,0,nullptr },  // Inst #776 = VCMPEQFPo
  { 777,	3,	1,	76,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #777 = VCMPEQUB
  { 778,	3,	1,	76,	4,	0, 0x28ULL, nullptr, ImplicitList18, OperandInfo132,0,nullptr },  // Inst #778 = VCMPEQUBo
  { 779,	3,	1,	76,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #779 = VCMPEQUH
  { 780,	3,	1,	76,	4,	0, 0x28ULL, nullptr, ImplicitList18, OperandInfo132,0,nullptr },  // Inst #780 = VCMPEQUHo
  { 781,	3,	1,	76,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #781 = VCMPEQUW
  { 782,	3,	1,	76,	4,	0, 0x28ULL, nullptr, ImplicitList18, OperandInfo132,0,nullptr },  // Inst #782 = VCMPEQUWo
  { 783,	3,	1,	76,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #783 = VCMPGEFP
  { 784,	3,	1,	76,	4,	0, 0x28ULL, nullptr, ImplicitList18, OperandInfo132,0,nullptr },  // Inst #784 = VCMPGEFPo
  { 785,	3,	1,	76,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #785 = VCMPGTFP
  { 786,	3,	1,	76,	4,	0, 0x28ULL, nullptr, ImplicitList18, OperandInfo132,0,nullptr },  // Inst #786 = VCMPGTFPo
  { 787,	3,	1,	76,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #787 = VCMPGTSB
  { 788,	3,	1,	76,	4,	0, 0x28ULL, nullptr, ImplicitList18, OperandInfo132,0,nullptr },  // Inst #788 = VCMPGTSBo
  { 789,	3,	1,	76,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #789 = VCMPGTSH
  { 790,	3,	1,	76,	4,	0, 0x28ULL, nullptr, ImplicitList18, OperandInfo132,0,nullptr },  // Inst #790 = VCMPGTSHo
  { 791,	3,	1,	76,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #791 = VCMPGTSW
  { 792,	3,	1,	76,	4,	0, 0x28ULL, nullptr, ImplicitList18, OperandInfo132,0,nullptr },  // Inst #792 = VCMPGTSWo
  { 793,	3,	1,	76,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #793 = VCMPGTUB
  { 794,	3,	1,	76,	4,	0, 0x28ULL, nullptr, ImplicitList18, OperandInfo132,0,nullptr },  // Inst #794 = VCMPGTUBo
  { 795,	3,	1,	76,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #795 = VCMPGTUH
  { 796,	3,	1,	76,	4,	0, 0x28ULL, nullptr, ImplicitList18, OperandInfo132,0,nullptr },  // Inst #796 = VCMPGTUHo
  { 797,	3,	1,	76,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #797 = VCMPGTUW
  { 798,	3,	1,	76,	4,	0, 0x28ULL, nullptr, ImplicitList18, OperandInfo132,0,nullptr },  // Inst #798 = VCMPGTUWo
  { 799,	3,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo133,0,nullptr },  // Inst #799 = VCTSXS
  { 800,	2,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo134,0,nullptr },  // Inst #800 = VCTSXS_0
  { 801,	3,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo133,0,nullptr },  // Inst #801 = VCTUXS
  { 802,	2,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo134,0,nullptr },  // Inst #802 = VCTUXS_0
  { 803,	2,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo134,0,nullptr },  // Inst #803 = VEXPTEFP
  { 804,	2,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo134,0,nullptr },  // Inst #804 = VLOGEFP
  { 805,	4,	1,	74,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo135,0,nullptr },  // Inst #805 = VMADDFP
  { 806,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #806 = VMAXFP
  { 807,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #807 = VMAXSB
  { 808,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #808 = VMAXSH
  { 809,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #809 = VMAXSW
  { 810,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #810 = VMAXUB
  { 811,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #811 = VMAXUH
  { 812,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #812 = VMAXUW
  { 813,	4,	1,	74,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo135,0,nullptr },  // Inst #813 = VMHADDSHS
  { 814,	4,	1,	74,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo135,0,nullptr },  // Inst #814 = VMHRADDSHS
  { 815,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #815 = VMINFP
  { 816,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #816 = VMINSB
  { 817,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #817 = VMINSH
  { 818,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #818 = VMINSW
  { 819,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #819 = VMINUB
  { 820,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #820 = VMINUH
  { 821,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #821 = VMINUW
  { 822,	4,	1,	74,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo135,0,nullptr },  // Inst #822 = VMLADDUHM
  { 823,	3,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #823 = VMRGHB
  { 824,	3,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #824 = VMRGHH
  { 825,	3,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #825 = VMRGHW
  { 826,	3,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #826 = VMRGLB
  { 827,	3,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #827 = VMRGLH
  { 828,	3,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #828 = VMRGLW
  { 829,	4,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo135,0,nullptr },  // Inst #829 = VMSUMMBM
  { 830,	4,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo135,0,nullptr },  // Inst #830 = VMSUMSHM
  { 831,	4,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo135,0,nullptr },  // Inst #831 = VMSUMSHS
  { 832,	4,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo135,0,nullptr },  // Inst #832 = VMSUMUBM
  { 833,	4,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo135,0,nullptr },  // Inst #833 = VMSUMUHM
  { 834,	4,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo135,0,nullptr },  // Inst #834 = VMSUMUHS
  { 835,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #835 = VMULESB
  { 836,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #836 = VMULESH
  { 837,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #837 = VMULEUB
  { 838,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #838 = VMULEUH
  { 839,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #839 = VMULOSB
  { 840,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #840 = VMULOSH
  { 841,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #841 = VMULOUB
  { 842,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #842 = VMULOUH
  { 843,	4,	1,	74,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo135,0,nullptr },  // Inst #843 = VNMSUBFP
  { 844,	3,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #844 = VNOR
  { 845,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #845 = VOR
  { 846,	4,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo135,0,nullptr },  // Inst #846 = VPERM
  { 847,	3,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #847 = VPKPX
  { 848,	3,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #848 = VPKSHSS
  { 849,	3,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #849 = VPKSHUS
  { 850,	3,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #850 = VPKSWSS
  { 851,	3,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #851 = VPKSWUS
  { 852,	3,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #852 = VPKUHUM
  { 853,	3,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #853 = VPKUHUS
  { 854,	3,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #854 = VPKUWUM
  { 855,	3,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #855 = VPKUWUS
  { 856,	2,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo134,0,nullptr },  // Inst #856 = VREFP
  { 857,	2,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo134,0,nullptr },  // Inst #857 = VRFIM
  { 858,	2,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo134,0,nullptr },  // Inst #858 = VRFIN
  { 859,	2,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo134,0,nullptr },  // Inst #859 = VRFIP
  { 860,	2,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo134,0,nullptr },  // Inst #860 = VRFIZ
  { 861,	3,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #861 = VRLB
  { 862,	3,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #862 = VRLH
  { 863,	3,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #863 = VRLW
  { 864,	2,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo134,0,nullptr },  // Inst #864 = VRSQRTEFP
  { 865,	4,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo135,0,nullptr },  // Inst #865 = VSEL
  { 866,	3,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #866 = VSL
  { 867,	3,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #867 = VSLB
  { 868,	4,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo136,0,nullptr },  // Inst #868 = VSLDOI
  { 869,	3,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #869 = VSLH
  { 870,	3,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #870 = VSLO
  { 871,	3,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #871 = VSLW
  { 872,	3,	1,	77,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo133,0,nullptr },  // Inst #872 = VSPLTB
  { 873,	3,	1,	77,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo133,0,nullptr },  // Inst #873 = VSPLTH
  { 874,	2,	1,	77,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo137,0,nullptr },  // Inst #874 = VSPLTISB
  { 875,	2,	1,	77,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo137,0,nullptr },  // Inst #875 = VSPLTISH
  { 876,	2,	1,	77,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo137,0,nullptr },  // Inst #876 = VSPLTISW
  { 877,	3,	1,	77,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo133,0,nullptr },  // Inst #877 = VSPLTW
  { 878,	3,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #878 = VSR
  { 879,	3,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #879 = VSRAB
  { 880,	3,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #880 = VSRAH
  { 881,	3,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #881 = VSRAW
  { 882,	3,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #882 = VSRB
  { 883,	3,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #883 = VSRH
  { 884,	3,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #884 = VSRO
  { 885,	3,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #885 = VSRW
  { 886,	3,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #886 = VSUBCUW
  { 887,	3,	1,	75,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #887 = VSUBFP
  { 888,	3,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #888 = VSUBSBS
  { 889,	3,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #889 = VSUBSHS
  { 890,	3,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #890 = VSUBSWS
  { 891,	3,	1,	75,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #891 = VSUBUBM
  { 892,	3,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #892 = VSUBUBS
  { 893,	3,	1,	75,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #893 = VSUBUHM
  { 894,	3,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #894 = VSUBUHS
  { 895,	3,	1,	75,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #895 = VSUBUWM
  { 896,	3,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #896 = VSUBUWS
  { 897,	3,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #897 = VSUM2SWS
  { 898,	3,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #898 = VSUM4SBS
  { 899,	3,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #899 = VSUM4SHS
  { 900,	3,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #900 = VSUM4UBS
  { 901,	3,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #901 = VSUMSWS
  { 902,	2,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo134,0,nullptr },  // Inst #902 = VUPKHPX
  { 903,	2,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo134,0,nullptr },  // Inst #903 = VUPKHSB
  { 904,	2,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo134,0,nullptr },  // Inst #904 = VUPKHSH
  { 905,	2,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo134,0,nullptr },  // Inst #905 = VUPKLPX
  { 906,	2,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo134,0,nullptr },  // Inst #906 = VUPKLSB
  { 907,	2,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo134,0,nullptr },  // Inst #907 = VUPKLSH
  { 908,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x28ULL, nullptr, nullptr, OperandInfo132,0,nullptr },  // Inst #908 = VXOR
  { 909,	1,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo88,0,nullptr },  // Inst #909 = V_SET0
  { 910,	1,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo88,0,nullptr },  // Inst #910 = V_SET0B
  { 911,	1,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo88,0,nullptr },  // Inst #911 = V_SET0H
  { 912,	1,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo88,0,nullptr },  // Inst #912 = V_SETALLONES
  { 913,	1,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo88,0,nullptr },  // Inst #913 = V_SETALLONESB
  { 914,	1,	1,	74,	4,	0, 0x28ULL, nullptr, nullptr, OperandInfo88,0,nullptr },  // Inst #914 = V_SETALLONESH
  { 915,	1,	0,	9,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x0ULL, nullptr, nullptr, OperandInfo2,0,nullptr },  // Inst #915 = WAIT
  { 916,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo11,0,nullptr },  // Inst #916 = XOR
  { 917,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, nullptr, OperandInfo13,0,nullptr },  // Inst #917 = XOR8
  { 918,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList1, OperandInfo13,0,nullptr },  // Inst #918 = XOR8o
  { 919,	3,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #919 = XORI
  { 920,	3,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo14,0,nullptr },  // Inst #920 = XORI8
  { 921,	3,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo12,0,nullptr },  // Inst #921 = XORIS
  { 922,	3,	1,	1,	4,	0, 0x8ULL, nullptr, nullptr, OperandInfo14,0,nullptr },  // Inst #922 = XORIS8
  { 923,	3,	1,	1,	4,	0|(1<<MCID::Commutable), 0x8ULL, nullptr, ImplicitList1, OperandInfo11,0,nullptr },  // Inst #923 = XORo
  { 924,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo138,0,nullptr },  // Inst #924 = XSABSDP
  { 925,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList11, nullptr, OperandInfo139,0,nullptr },  // Inst #925 = XSADDDP
  { 926,	3,	1,	12,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo140,0,nullptr },  // Inst #926 = XSCMPODP
  { 927,	3,	1,	12,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo140,0,nullptr },  // Inst #927 = XSCMPUDP
  { 928,	3,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo139,0,nullptr },  // Inst #928 = XSCPSGNDP
  { 929,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo138,0,nullptr },  // Inst #929 = XSCVDPSP
  { 930,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo138,0,nullptr },  // Inst #930 = XSCVDPSXDS
  { 931,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo138,0,nullptr },  // Inst #931 = XSCVDPSXWS
  { 932,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo138,0,nullptr },  // Inst #932 = XSCVDPUXDS
  { 933,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo138,0,nullptr },  // Inst #933 = XSCVDPUXWS
  { 934,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo138,0,nullptr },  // Inst #934 = XSCVSPDP
  { 935,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo138,0,nullptr },  // Inst #935 = XSCVSXDDP
  { 936,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo138,0,nullptr },  // Inst #936 = XSCVUXDDP
  { 937,	3,	1,	13,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo139,0,nullptr },  // Inst #937 = XSDIVDP
  { 938,	4,	1,	74,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList11, nullptr, OperandInfo141,0,nullptr },  // Inst #938 = XSMADDADP
  { 939,	4,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo141,0,nullptr },  // Inst #939 = XSMADDMDP
  { 940,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList11, nullptr, OperandInfo139,0,nullptr },  // Inst #940 = XSMAXDP
  { 941,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList11, nullptr, OperandInfo139,0,nullptr },  // Inst #941 = XSMINDP
  { 942,	4,	1,	74,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList11, nullptr, OperandInfo141,0,nullptr },  // Inst #942 = XSMSUBADP
  { 943,	4,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo141,0,nullptr },  // Inst #943 = XSMSUBMDP
  { 944,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList11, nullptr, OperandInfo139,0,nullptr },  // Inst #944 = XSMULDP
  { 945,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo138,0,nullptr },  // Inst #945 = XSNABSDP
  { 946,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo138,0,nullptr },  // Inst #946 = XSNEGDP
  { 947,	4,	1,	74,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList11, nullptr, OperandInfo141,0,nullptr },  // Inst #947 = XSNMADDADP
  { 948,	4,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo141,0,nullptr },  // Inst #948 = XSNMADDMDP
  { 949,	4,	1,	74,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList11, nullptr, OperandInfo141,0,nullptr },  // Inst #949 = XSNMSUBADP
  { 950,	4,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo141,0,nullptr },  // Inst #950 = XSNMSUBMDP
  { 951,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo138,0,nullptr },  // Inst #951 = XSRDPI
  { 952,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo138,0,nullptr },  // Inst #952 = XSRDPIC
  { 953,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo138,0,nullptr },  // Inst #953 = XSRDPIM
  { 954,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo138,0,nullptr },  // Inst #954 = XSRDPIP
  { 955,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo138,0,nullptr },  // Inst #955 = XSRDPIZ
  { 956,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo138,0,nullptr },  // Inst #956 = XSREDP
  { 957,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo138,0,nullptr },  // Inst #957 = XSRSQRTEDP
  { 958,	2,	1,	16,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo138,0,nullptr },  // Inst #958 = XSSQRTDP
  { 959,	3,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo139,0,nullptr },  // Inst #959 = XSSUBDP
  { 960,	3,	1,	12,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo140,0,nullptr },  // Inst #960 = XSTDIVDP
  { 961,	2,	1,	12,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo142,0,nullptr },  // Inst #961 = XSTSQRTDP
  { 962,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo143,0,nullptr },  // Inst #962 = XVABSDP
  { 963,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo143,0,nullptr },  // Inst #963 = XVABSSP
  { 964,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList11, nullptr, OperandInfo144,0,nullptr },  // Inst #964 = XVADDDP
  { 965,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList11, nullptr, OperandInfo144,0,nullptr },  // Inst #965 = XVADDSP
  { 966,	3,	1,	76,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo144,0,nullptr },  // Inst #966 = XVCMPEQDP
  { 967,	3,	1,	76,	4,	0, 0x0ULL, ImplicitList11, ImplicitList18, OperandInfo144,0,nullptr },  // Inst #967 = XVCMPEQDPo
  { 968,	3,	1,	76,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo144,0,nullptr },  // Inst #968 = XVCMPEQSP
  { 969,	3,	1,	76,	4,	0, 0x0ULL, ImplicitList11, ImplicitList18, OperandInfo144,0,nullptr },  // Inst #969 = XVCMPEQSPo
  { 970,	3,	1,	76,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo144,0,nullptr },  // Inst #970 = XVCMPGEDP
  { 971,	3,	1,	76,	4,	0, 0x0ULL, ImplicitList11, ImplicitList18, OperandInfo144,0,nullptr },  // Inst #971 = XVCMPGEDPo
  { 972,	3,	1,	76,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo144,0,nullptr },  // Inst #972 = XVCMPGESP
  { 973,	3,	1,	76,	4,	0, 0x0ULL, ImplicitList11, ImplicitList18, OperandInfo144,0,nullptr },  // Inst #973 = XVCMPGESPo
  { 974,	3,	1,	76,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo144,0,nullptr },  // Inst #974 = XVCMPGTDP
  { 975,	3,	1,	76,	4,	0, 0x0ULL, ImplicitList11, ImplicitList18, OperandInfo144,0,nullptr },  // Inst #975 = XVCMPGTDPo
  { 976,	3,	1,	76,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo144,0,nullptr },  // Inst #976 = XVCMPGTSP
  { 977,	3,	1,	76,	4,	0, 0x0ULL, ImplicitList11, ImplicitList18, OperandInfo144,0,nullptr },  // Inst #977 = XVCMPGTSPo
  { 978,	3,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo144,0,nullptr },  // Inst #978 = XVCPSGNDP
  { 979,	3,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo144,0,nullptr },  // Inst #979 = XVCPSGNSP
  { 980,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo143,0,nullptr },  // Inst #980 = XVCVDPSP
  { 981,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo143,0,nullptr },  // Inst #981 = XVCVDPSXDS
  { 982,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo143,0,nullptr },  // Inst #982 = XVCVDPSXWS
  { 983,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo143,0,nullptr },  // Inst #983 = XVCVDPUXDS
  { 984,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo143,0,nullptr },  // Inst #984 = XVCVDPUXWS
  { 985,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo143,0,nullptr },  // Inst #985 = XVCVSPDP
  { 986,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo143,0,nullptr },  // Inst #986 = XVCVSPSXDS
  { 987,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo143,0,nullptr },  // Inst #987 = XVCVSPSXWS
  { 988,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo143,0,nullptr },  // Inst #988 = XVCVSPUXDS
  { 989,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo143,0,nullptr },  // Inst #989 = XVCVSPUXWS
  { 990,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo143,0,nullptr },  // Inst #990 = XVCVSXDDP
  { 991,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo143,0,nullptr },  // Inst #991 = XVCVSXDSP
  { 992,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo143,0,nullptr },  // Inst #992 = XVCVSXWDP
  { 993,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo143,0,nullptr },  // Inst #993 = XVCVSXWSP
  { 994,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo143,0,nullptr },  // Inst #994 = XVCVUXDDP
  { 995,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo143,0,nullptr },  // Inst #995 = XVCVUXDSP
  { 996,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo143,0,nullptr },  // Inst #996 = XVCVUXWDP
  { 997,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo143,0,nullptr },  // Inst #997 = XVCVUXWSP
  { 998,	3,	1,	13,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo144,0,nullptr },  // Inst #998 = XVDIVDP
  { 999,	3,	1,	14,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo144,0,nullptr },  // Inst #999 = XVDIVSP
  { 1000,	4,	1,	74,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList11, nullptr, OperandInfo145,0,nullptr },  // Inst #1000 = XVMADDADP
  { 1001,	4,	1,	74,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList11, nullptr, OperandInfo145,0,nullptr },  // Inst #1001 = XVMADDASP
  { 1002,	4,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo145,0,nullptr },  // Inst #1002 = XVMADDMDP
  { 1003,	4,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo145,0,nullptr },  // Inst #1003 = XVMADDMSP
  { 1004,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList11, nullptr, OperandInfo144,0,nullptr },  // Inst #1004 = XVMAXDP
  { 1005,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList11, nullptr, OperandInfo144,0,nullptr },  // Inst #1005 = XVMAXSP
  { 1006,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList11, nullptr, OperandInfo144,0,nullptr },  // Inst #1006 = XVMINDP
  { 1007,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList11, nullptr, OperandInfo144,0,nullptr },  // Inst #1007 = XVMINSP
  { 1008,	4,	1,	74,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList11, nullptr, OperandInfo145,0,nullptr },  // Inst #1008 = XVMSUBADP
  { 1009,	4,	1,	74,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList11, nullptr, OperandInfo145,0,nullptr },  // Inst #1009 = XVMSUBASP
  { 1010,	4,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo145,0,nullptr },  // Inst #1010 = XVMSUBMDP
  { 1011,	4,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo145,0,nullptr },  // Inst #1011 = XVMSUBMSP
  { 1012,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList11, nullptr, OperandInfo144,0,nullptr },  // Inst #1012 = XVMULDP
  { 1013,	3,	1,	74,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList11, nullptr, OperandInfo144,0,nullptr },  // Inst #1013 = XVMULSP
  { 1014,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo143,0,nullptr },  // Inst #1014 = XVNABSDP
  { 1015,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo143,0,nullptr },  // Inst #1015 = XVNABSSP
  { 1016,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo143,0,nullptr },  // Inst #1016 = XVNEGDP
  { 1017,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo143,0,nullptr },  // Inst #1017 = XVNEGSP
  { 1018,	4,	1,	74,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList11, nullptr, OperandInfo145,0,nullptr },  // Inst #1018 = XVNMADDADP
  { 1019,	4,	1,	74,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList11, nullptr, OperandInfo145,0,nullptr },  // Inst #1019 = XVNMADDASP
  { 1020,	4,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo145,0,nullptr },  // Inst #1020 = XVNMADDMDP
  { 1021,	4,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo145,0,nullptr },  // Inst #1021 = XVNMADDMSP
  { 1022,	4,	1,	74,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList11, nullptr, OperandInfo145,0,nullptr },  // Inst #1022 = XVNMSUBADP
  { 1023,	4,	1,	74,	4,	0|(1<<MCID::Commutable), 0x0ULL, ImplicitList11, nullptr, OperandInfo145,0,nullptr },  // Inst #1023 = XVNMSUBASP
  { 1024,	4,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo145,0,nullptr },  // Inst #1024 = XVNMSUBMDP
  { 1025,	4,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo145,0,nullptr },  // Inst #1025 = XVNMSUBMSP
  { 1026,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo143,0,nullptr },  // Inst #1026 = XVRDPI
  { 1027,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo143,0,nullptr },  // Inst #1027 = XVRDPIC
  { 1028,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo143,0,nullptr },  // Inst #1028 = XVRDPIM
  { 1029,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo143,0,nullptr },  // Inst #1029 = XVRDPIP
  { 1030,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo143,0,nullptr },  // Inst #1030 = XVRDPIZ
  { 1031,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo143,0,nullptr },  // Inst #1031 = XVREDP
  { 1032,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo143,0,nullptr },  // Inst #1032 = XVRESP
  { 1033,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo143,0,nullptr },  // Inst #1033 = XVRSPI
  { 1034,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo143,0,nullptr },  // Inst #1034 = XVRSPIC
  { 1035,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo143,0,nullptr },  // Inst #1035 = XVRSPIM
  { 1036,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo143,0,nullptr },  // Inst #1036 = XVRSPIP
  { 1037,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo143,0,nullptr },  // Inst #1037 = XVRSPIZ
  { 1038,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo143,0,nullptr },  // Inst #1038 = XVRSQRTEDP
  { 1039,	2,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo143,0,nullptr },  // Inst #1039 = XVRSQRTESP
  { 1040,	2,	1,	16,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo143,0,nullptr },  // Inst #1040 = XVSQRTDP
  { 1041,	2,	1,	17,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo143,0,nullptr },  // Inst #1041 = XVSQRTSP
  { 1042,	3,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo144,0,nullptr },  // Inst #1042 = XVSUBDP
  { 1043,	3,	1,	74,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo144,0,nullptr },  // Inst #1043 = XVSUBSP
  { 1044,	3,	1,	12,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo146,0,nullptr },  // Inst #1044 = XVTDIVDP
  { 1045,	3,	1,	12,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo146,0,nullptr },  // Inst #1045 = XVTDIVSP
  { 1046,	2,	1,	12,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo147,0,nullptr },  // Inst #1046 = XVTSQRTDP
  { 1047,	2,	1,	12,	4,	0, 0x0ULL, ImplicitList11, nullptr, OperandInfo147,0,nullptr },  // Inst #1047 = XVTSQRTSP
  { 1048,	3,	1,	75,	4,	0|(1<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo144,0,nullptr },  // Inst #1048 = XXLAND
  { 1049,	3,	1,	75,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo144,0,nullptr },  // Inst #1049 = XXLANDC
  { 1050,	3,	1,	75,	4,	0|(1<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo144,0,nullptr },  // Inst #1050 = XXLNOR
  { 1051,	3,	1,	75,	4,	0|(1<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo144,0,nullptr },  // Inst #1051 = XXLOR
  { 1052,	3,	1,	75,	4,	0|(1<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo139,0,nullptr },  // Inst #1052 = XXLORf
  { 1053,	3,	1,	75,	4,	0|(1<<MCID::Commutable), 0x0ULL, nullptr, nullptr, OperandInfo144,0,nullptr },  // Inst #1053 = XXLXOR
  { 1054,	3,	1,	77,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo144,0,nullptr },  // Inst #1054 = XXMRGHW
  { 1055,	3,	1,	77,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo144,0,nullptr },  // Inst #1055 = XXMRGLW
  { 1056,	4,	1,	77,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo148,0,nullptr },  // Inst #1056 = XXPERMDI
  { 1057,	4,	1,	77,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo149,0,nullptr },  // Inst #1057 = XXSEL
  { 1058,	4,	1,	77,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo148,0,nullptr },  // Inst #1058 = XXSLDWI
  { 1059,	3,	1,	77,	4,	0, 0x0ULL, nullptr, nullptr, OperandInfo150,0,nullptr },  // Inst #1059 = XXSPLTW
  { 1060,	3,	0,	3,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, ImplicitList5, OperandInfo151,0,nullptr },  // Inst #1060 = gBC
  { 1061,	3,	0,	3,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, ImplicitList5, OperandInfo151,0,nullptr },  // Inst #1061 = gBCA
  { 1062,	3,	0,	3,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList13, ImplicitList5, OperandInfo152,0,nullptr },  // Inst #1062 = gBCCTR
  { 1063,	3,	0,	3,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList13, ImplicitList19, OperandInfo152,0,nullptr },  // Inst #1063 = gBCCTRL
  { 1064,	3,	0,	3,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, ImplicitList19, OperandInfo151,0,nullptr },  // Inst #1064 = gBCL
  { 1065,	3,	0,	3,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList7, ImplicitList19, OperandInfo151,0,nullptr },  // Inst #1065 = gBCLA
  { 1066,	3,	0,	3,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList13, ImplicitList5, OperandInfo152,0,nullptr },  // Inst #1066 = gBCLR
  { 1067,	3,	0,	3,	4,	0|(1<<MCID::UnmodeledSideEffects), 0x38ULL, ImplicitList13, ImplicitList19, OperandInfo152,0,nullptr },  // Inst #1067 = gBCLRL
};

extern const char PPCInstrNameData[] = {
  /* 0 */ 'M', 'T', 'F', 'S', 'B', '0', 0,
  /* 7 */ 'V', '_', 'S', 'E', 'T', '0', 0,
  /* 14 */ 'V', 'C', 'T', 'S', 'X', 'S', '_', '0', 0,
  /* 23 */ 'V', 'C', 'T', 'U', 'X', 'S', '_', '0', 0,
  /* 32 */ 'V', 'C', 'F', 'S', 'X', '_', '0', 0,
  /* 40 */ 'V', 'C', 'F', 'U', 'X', '_', '0', 0,
  /* 48 */ 'M', 'T', 'F', 'S', 'B', '1', 0,
  /* 55 */ 'A', 'D', 'D', 'I', 'S', 'd', 't', 'p', 'r', 'e', 'l', 'H', 'A', '3', '2', 0,
  /* 71 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'S', 'U', 'B', '_', 'I', '3', '2', 0,
  /* 91 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'D', 'D', '_', 'I', '3', '2', 0,
  /* 111 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'N', 'A', 'N', 'D', '_', 'I', '3', '2', 0,
  /* 132 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'N', 'D', '_', 'I', '3', '2', 0,
  /* 152 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'S', 'W', 'A', 'P', '_', 'I', '3', '2', 0,
  /* 168 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'C', 'M', 'P', '_', 'S', 'W', 'A', 'P', '_', 'I', '3', '2', 0,
  /* 188 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'X', 'O', 'R', '_', 'I', '3', '2', 0,
  /* 208 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'O', 'R', '_', 'I', '3', '2', 0,
  /* 227 */ 'A', 'D', 'D', 'I', 't', 'l', 's', 'g', 'd', 'L', '3', '2', 0,
  /* 240 */ 'A', 'D', 'D', 'I', 't', 'l', 's', 'l', 'd', 'L', '3', '2', 0,
  /* 253 */ 'L', 'D', 'g', 'o', 't', 'T', 'p', 'r', 'e', 'l', 'L', '3', '2', 0,
  /* 267 */ 'A', 'D', 'D', 'I', 'd', 't', 'p', 'r', 'e', 'l', 'L', '3', '2', 0,
  /* 281 */ 'G', 'E', 'T', 't', 'l', 's', 'l', 'd', 'A', 'D', 'D', 'R', '3', '2', 0,
  /* 296 */ 'G', 'E', 'T', 't', 'l', 's', 'A', 'D', 'D', 'R', '3', '2', 0,
  /* 309 */ 'L', 'W', 'A', '_', '3', '2', 0,
  /* 316 */ 'L', 'W', 'A', 'X', '_', '3', '2', 0,
  /* 324 */ 'E', 'H', '_', 'S', 'j', 'L', 'j', '_', 'L', 'o', 'n', 'g', 'J', 'm', 'p', '3', '2', 0,
  /* 342 */ 'E', 'H', '_', 'S', 'j', 'L', 'j', '_', 'S', 'e', 't', 'J', 'm', 'p', '3', '2', 0,
  /* 359 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'S', 'U', 'B', '_', 'I', '6', '4', 0,
  /* 379 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'D', 'D', '_', 'I', '6', '4', 0,
  /* 399 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'N', 'A', 'N', 'D', '_', 'I', '6', '4', 0,
  /* 420 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'N', 'D', '_', 'I', '6', '4', 0,
  /* 440 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'S', 'W', 'A', 'P', '_', 'I', '6', '4', 0,
  /* 456 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'C', 'M', 'P', '_', 'S', 'W', 'A', 'P', '_', 'I', '6', '4', 0,
  /* 476 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'X', 'O', 'R', '_', 'I', '6', '4', 0,
  /* 496 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'O', 'R', '_', 'I', '6', '4', 0,
  /* 515 */ 'D', 'S', 'T', '6', '4', 0,
  /* 521 */ 'D', 'S', 'T', 'S', 'T', '6', '4', 0,
  /* 529 */ 'D', 'S', 'T', 'T', '6', '4', 0,
  /* 536 */ 'D', 'S', 'T', 'S', 'T', 'T', '6', '4', 0,
  /* 545 */ 'E', 'X', 'T', 'S', 'B', '8', '_', '3', '2', '_', '6', '4', 0,
  /* 558 */ 'E', 'X', 'T', 'S', 'H', '8', '_', '3', '2', '_', '6', '4', 0,
  /* 571 */ 'R', 'L', 'D', 'I', 'C', 'L', '_', '3', '2', '_', '6', '4', 0,
  /* 584 */ 'E', 'X', 'T', 'S', 'W', '_', '3', '2', '_', '6', '4', 0,
  /* 596 */ 'E', 'H', '_', 'S', 'j', 'L', 'j', '_', 'L', 'o', 'n', 'g', 'J', 'm', 'p', '6', '4', 0,
  /* 614 */ 'E', 'H', '_', 'S', 'j', 'L', 'j', '_', 'S', 'e', 't', 'J', 'm', 'p', '6', '4', 0,
  /* 631 */ 'A', 'D', 'D', '4', 0,
  /* 636 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'F', '4', 0,
  /* 649 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'F', '4', 0,
  /* 659 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'I', '4', 0,
  /* 672 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'I', '4', 0,
  /* 682 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'S', 'U', 'B', '_', 'I', '1', '6', 0,
  /* 702 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'D', 'D', '_', 'I', '1', '6', 0,
  /* 722 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'N', 'A', 'N', 'D', '_', 'I', '1', '6', 0,
  /* 743 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'N', 'D', '_', 'I', '1', '6', 0,
  /* 763 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'S', 'W', 'A', 'P', '_', 'I', '1', '6', 0,
  /* 779 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'C', 'M', 'P', '_', 'S', 'W', 'A', 'P', '_', 'I', '1', '6', 0,
  /* 799 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'X', 'O', 'R', '_', 'I', '1', '6', 0,
  /* 819 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'O', 'R', '_', 'I', '1', '6', 0,
  /* 838 */ 'N', 'O', 'P', '_', 'G', 'T', '_', 'P', 'W', 'R', '6', 0,
  /* 850 */ 'N', 'O', 'P', '_', 'G', 'T', '_', 'P', 'W', 'R', '7', 0,
  /* 862 */ 'T', 'A', 'I', 'L', 'B', 'A', '8', 0,
  /* 870 */ 'L', 'H', 'A', '8', 0,
  /* 875 */ 'B', 'L', 'A', '8', 0,
  /* 880 */ 'T', 'A', 'I', 'L', 'B', '8', 0,
  /* 887 */ 'E', 'X', 'T', 'S', 'B', '8', 0,
  /* 894 */ 'M', 'F', 'T', 'B', '8', 0,
  /* 900 */ 'S', 'T', 'B', '8', 0,
  /* 905 */ 'A', 'D', 'D', 'C', '8', 0,
  /* 911 */ 'A', 'N', 'D', 'C', '8', 0,
  /* 917 */ 'S', 'U', 'B', 'F', 'C', '8', 0,
  /* 924 */ 'A', 'D', 'D', 'I', 'C', '8', 0,
  /* 931 */ 'S', 'U', 'B', 'F', 'I', 'C', '8', 0,
  /* 939 */ 'D', 'Y', 'N', 'A', 'L', 'L', 'O', 'C', '8', 0,
  /* 949 */ 'O', 'R', 'C', '8', 0,
  /* 954 */ 'A', 'D', 'D', '8', 0,
  /* 959 */ 'N', 'A', 'N', 'D', '8', 0,
  /* 965 */ 'A', 'D', 'D', 'E', '8', 0,
  /* 971 */ 'S', 'U', 'B', 'F', 'E', '8', 0,
  /* 978 */ 'A', 'D', 'D', 'M', 'E', '8', 0,
  /* 985 */ 'S', 'U', 'B', 'F', 'M', 'E', '8', 0,
  /* 993 */ 'A', 'D', 'D', 'Z', 'E', '8', 0,
  /* 1000 */ 'S', 'U', 'B', 'F', 'Z', 'E', '8', 0,
  /* 1008 */ 'S', 'U', 'B', 'F', '8', 0,
  /* 1014 */ 'M', 'F', 'O', 'C', 'R', 'F', '8', 0,
  /* 1022 */ 'M', 'T', 'O', 'C', 'R', 'F', '8', 0,
  /* 1030 */ 'M', 'T', 'C', 'R', 'F', '8', 0,
  /* 1037 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'F', '8', 0,
  /* 1050 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'F', '8', 0,
  /* 1060 */ 'N', 'E', 'G', '8', 0,
  /* 1065 */ 'E', 'X', 'T', 'S', 'H', '8', 0,
  /* 1072 */ 'S', 'T', 'H', '8', 0,
  /* 1077 */ 'A', 'D', 'D', 'I', '8', 0,
  /* 1083 */ 'M', 'U', 'L', 'L', 'I', '8', 0,
  /* 1090 */ 'R', 'L', 'W', 'I', 'M', 'I', '8', 0,
  /* 1098 */ 'X', 'O', 'R', 'I', '8', 0,
  /* 1104 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'S', 'U', 'B', '_', 'I', '8', 0,
  /* 1123 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'I', '8', 0,
  /* 1136 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'D', 'D', '_', 'I', '8', 0,
  /* 1155 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'N', 'A', 'N', 'D', '_', 'I', '8', 0,
  /* 1175 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'N', 'D', '_', 'I', '8', 0,
  /* 1194 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'S', 'W', 'A', 'P', '_', 'I', '8', 0,
  /* 1209 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'C', 'M', 'P', '_', 'S', 'W', 'A', 'P', '_', 'I', '8', 0,
  /* 1228 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'X', 'O', 'R', '_', 'I', '8', 0,
  /* 1247 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'O', 'R', '_', 'I', '8', 0,
  /* 1265 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'I', '8', 0,
  /* 1275 */ 'B', 'L', '8', 0,
  /* 1279 */ 'I', 'S', 'E', 'L', '8', 0,
  /* 1285 */ 'B', 'C', 'T', 'R', 'L', '8', 0,
  /* 1292 */ 'B', 'C', 'C', 'T', 'R', 'L', '8', 0,
  /* 1300 */ 'B', 'C', 'C', 'C', 'T', 'R', 'L', '8', 0,
  /* 1309 */ 'R', 'L', 'W', 'I', 'N', 'M', '8', 0,
  /* 1317 */ 'M', 'F', 'C', 'R', '8', 0,
  /* 1323 */ 'M', 'F', 'L', 'R', '8', 0,
  /* 1329 */ 'M', 'T', 'L', 'R', '8', 0,
  /* 1335 */ 'B', 'D', 'Z', 'L', 'R', '8', 0,
  /* 1342 */ 'B', 'D', 'N', 'Z', 'L', 'R', '8', 0,
  /* 1350 */ 'M', 'o', 'v', 'e', 'P', 'C', 't', 'o', 'L', 'R', '8', 0,
  /* 1362 */ 'N', 'O', 'R', '8', 0,
  /* 1367 */ 'X', 'O', 'R', '8', 0,
  /* 1372 */ 'T', 'A', 'I', 'L', 'B', 'C', 'T', 'R', '8', 0,
  /* 1382 */ 'B', 'C', 'C', 'T', 'R', '8', 0,
  /* 1389 */ 'B', 'C', 'C', 'C', 'T', 'R', '8', 0,
  /* 1397 */ 'M', 'F', 'C', 'T', 'R', '8', 0,
  /* 1404 */ 'M', 'T', 'C', 'T', 'R', '8', 0,
  /* 1411 */ 'A', 'D', 'D', 'I', 'S', '8', 0,
  /* 1418 */ 'L', 'I', 'S', '8', 0,
  /* 1423 */ 'X', 'O', 'R', 'I', 'S', '8', 0,
  /* 1430 */ 'A', 'N', 'D', 'I', 'o', '_', '1', '_', 'E', 'Q', '_', 'B', 'I', 'T', '8', 0,
  /* 1446 */ 'A', 'N', 'D', 'I', 'o', '_', '1', '_', 'G', 'T', '_', 'B', 'I', 'T', '8', 0,
  /* 1462 */ 'L', 'H', 'A', 'U', '8', 0,
  /* 1468 */ 'S', 'T', 'B', 'U', '8', 0,
  /* 1474 */ 'S', 'T', 'H', 'U', '8', 0,
  /* 1480 */ 'S', 'T', 'W', 'U', '8', 0,
  /* 1486 */ 'L', 'B', 'Z', 'U', '8', 0,
  /* 1492 */ 'L', 'H', 'Z', 'U', '8', 0,
  /* 1498 */ 'L', 'W', 'Z', 'U', '8', 0,
  /* 1504 */ 'E', 'Q', 'V', '8', 0,
  /* 1509 */ 'S', 'T', 'W', '8', 0,
  /* 1514 */ 'L', 'H', 'A', 'X', '8', 0,
  /* 1520 */ 'S', 'T', 'B', 'X', '8', 0,
  /* 1526 */ 'S', 'T', 'H', 'X', '8', 0,
  /* 1532 */ 'L', 'H', 'A', 'U', 'X', '8', 0,
  /* 1539 */ 'S', 'T', 'B', 'U', 'X', '8', 0,
  /* 1546 */ 'S', 'T', 'H', 'U', 'X', '8', 0,
  /* 1553 */ 'S', 'T', 'W', 'U', 'X', '8', 0,
  /* 1560 */ 'L', 'B', 'Z', 'U', 'X', '8', 0,
  /* 1567 */ 'L', 'H', 'Z', 'U', 'X', '8', 0,
  /* 1574 */ 'L', 'W', 'Z', 'U', 'X', '8', 0,
  /* 1581 */ 'S', 'T', 'W', 'X', '8', 0,
  /* 1587 */ 'L', 'B', 'Z', 'X', '8', 0,
  /* 1593 */ 'L', 'H', 'Z', 'X', '8', 0,
  /* 1599 */ 'L', 'W', 'Z', 'X', '8', 0,
  /* 1605 */ 'L', 'B', 'Z', '8', 0,
  /* 1610 */ 'B', 'D', 'Z', '8', 0,
  /* 1615 */ 'L', 'H', 'Z', '8', 0,
  /* 1620 */ 'B', 'D', 'N', 'Z', '8', 0,
  /* 1626 */ 'L', 'W', 'Z', '8', 0,
  /* 1631 */ 'T', 'C', 'R', 'E', 'T', 'U', 'R', 'N', 'a', 'i', '8', 0,
  /* 1643 */ 'T', 'C', 'R', 'E', 'T', 'U', 'R', 'N', 'd', 'i', '8', 0,
  /* 1655 */ 'T', 'C', 'R', 'E', 'T', 'U', 'R', 'N', 'r', 'i', '8', 0,
  /* 1667 */ 'A', 'N', 'D', 'I', 'o', '8', 0,
  /* 1674 */ 'A', 'N', 'D', 'I', 'S', 'o', '8', 0,
  /* 1682 */ 'D', 'C', 'B', 'A', 0,
  /* 1687 */ 'T', 'A', 'I', 'L', 'B', 'A', 0,
  /* 1694 */ 'g', 'B', 'C', 'A', 0,
  /* 1699 */ 'B', 'C', 'C', 'A', 0,
  /* 1704 */ 'L', 'H', 'A', 0,
  /* 1708 */ 'A', 'D', 'D', 'I', 'S', 't', 'o', 'c', 'H', 'A', 0,
  /* 1719 */ 'A', 'D', 'D', 'I', 'S', 't', 'l', 's', 'g', 'd', 'H', 'A', 0,
  /* 1732 */ 'A', 'D', 'D', 'I', 'S', 't', 'l', 's', 'l', 'd', 'H', 'A', 0,
  /* 1745 */ 'A', 'D', 'D', 'I', 'S', 'g', 'o', 't', 'T', 'p', 'r', 'e', 'l', 'H', 'A', 0,
  /* 1761 */ 'A', 'D', 'D', 'I', 'S', 'd', 't', 'p', 'r', 'e', 'l', 'H', 'A', 0,
  /* 1775 */ 'S', 'L', 'B', 'I', 'A', 0,
  /* 1781 */ 'B', 'L', 'A', 0,
  /* 1785 */ 'g', 'B', 'C', 'L', 'A', 0,
  /* 1791 */ 'B', 'C', 'C', 'L', 'A', 0,
  /* 1797 */ 'B', 'D', 'Z', 'L', 'A', 0,
  /* 1803 */ 'B', 'D', 'N', 'Z', 'L', 'A', 0,
  /* 1810 */ 'L', 'W', 'A', 0,
  /* 1814 */ 'B', 'D', 'Z', 'A', 0,
  /* 1819 */ 'B', 'D', 'N', 'Z', 'A', 0,
  /* 1825 */ 'V', '_', 'S', 'E', 'T', '0', 'B', 0,
  /* 1833 */ 'V', 'S', 'R', 'A', 'B', 0,
  /* 1839 */ 'V', 'M', 'R', 'G', 'H', 'B', 0,
  /* 1846 */ 'V', 'M', 'R', 'G', 'L', 'B', 0,
  /* 1853 */ 'T', 'A', 'I', 'L', 'B', 0,
  /* 1859 */ 'V', 'R', 'L', 'B', 0,
  /* 1864 */ 'V', 'S', 'L', 'B', 0,
  /* 1869 */ 'V', 'S', 'R', 'B', 0,
  /* 1874 */ 'V', 'M', 'U', 'L', 'E', 'S', 'B', 0,
  /* 1882 */ 'V', '_', 'S', 'E', 'T', 'A', 'L', 'L', 'O', 'N', 'E', 'S', 'B', 0,
  /* 1896 */ 'V', 'A', 'V', 'G', 'S', 'B', 0,
  /* 1903 */ 'V', 'U', 'P', 'K', 'H', 'S', 'B', 0,
  /* 1911 */ 'V', 'S', 'P', 'L', 'T', 'I', 'S', 'B', 0,
  /* 1920 */ 'V', 'U', 'P', 'K', 'L', 'S', 'B', 0,
  /* 1928 */ 'V', 'M', 'I', 'N', 'S', 'B', 0,
  /* 1935 */ 'V', 'M', 'U', 'L', 'O', 'S', 'B', 0,
  /* 1943 */ 'V', 'C', 'M', 'P', 'G', 'T', 'S', 'B', 0,
  /* 1952 */ 'E', 'X', 'T', 'S', 'B', 0,
  /* 1958 */ 'V', 'M', 'A', 'X', 'S', 'B', 0,
  /* 1965 */ 'M', 'F', 'T', 'B', 0,
  /* 1970 */ 'V', 'S', 'P', 'L', 'T', 'B', 0,
  /* 1977 */ 'S', 'T', 'B', 0,
  /* 1981 */ 'V', 'M', 'U', 'L', 'E', 'U', 'B', 0,
  /* 1989 */ 'V', 'A', 'V', 'G', 'U', 'B', 0,
  /* 1996 */ 'V', 'M', 'I', 'N', 'U', 'B', 0,
  /* 2003 */ 'V', 'M', 'U', 'L', 'O', 'U', 'B', 0,
  /* 2011 */ 'V', 'C', 'M', 'P', 'E', 'Q', 'U', 'B', 0,
  /* 2020 */ 'F', 'S', 'U', 'B', 0,
  /* 2025 */ 'F', 'M', 'S', 'U', 'B', 0,
  /* 2031 */ 'F', 'N', 'M', 'S', 'U', 'B', 0,
  /* 2038 */ 'V', 'C', 'M', 'P', 'G', 'T', 'U', 'B', 0,
  /* 2047 */ 'V', 'M', 'A', 'X', 'U', 'B', 0,
  /* 2054 */ 'g', 'B', 'C', 0,
  /* 2058 */ 'B', 'C', 'C', 0,
  /* 2062 */ 'A', 'D', 'D', 'C', 0,
  /* 2067 */ 'X', 'X', 'L', 'A', 'N', 'D', 'C', 0,
  /* 2075 */ 'C', 'R', 'A', 'N', 'D', 'C', 0,
  /* 2082 */ 'V', 'A', 'N', 'D', 'C', 0,
  /* 2088 */ 'S', 'U', 'B', 'F', 'C', 0,
  /* 2094 */ 'S', 'U', 'B', 'I', 'C', 0,
  /* 2100 */ 'A', 'D', 'D', 'I', 'C', 0,
  /* 2106 */ 'R', 'L', 'D', 'I', 'C', 0,
  /* 2112 */ 'S', 'U', 'B', 'F', 'I', 'C', 0,
  /* 2119 */ 'X', 'S', 'R', 'D', 'P', 'I', 'C', 0,
  /* 2127 */ 'X', 'V', 'R', 'D', 'P', 'I', 'C', 0,
  /* 2135 */ 'X', 'V', 'R', 'S', 'P', 'I', 'C', 0,
  /* 2143 */ 'T', 'L', 'B', 'S', 'Y', 'N', 'C', 0,
  /* 2151 */ 'I', 'S', 'Y', 'N', 'C', 0,
  /* 2157 */ 'M', 'S', 'Y', 'N', 'C', 0,
  /* 2163 */ 'D', 'Y', 'N', 'A', 'L', 'L', 'O', 'C', 0,
  /* 2172 */ 'C', 'R', 'O', 'R', 'C', 0,
  /* 2178 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'V', 'R', 'R', 'C', 0,
  /* 2193 */ 'S', 'E', 'L', 'E', 'C', 'T', '_', 'V', 'R', 'R', 'C', 0,
  /* 2205 */ 'S', 'C', 0,
  /* 2208 */ 'S', 'R', 'A', 'D', 0,
  /* 2213 */ 'F', 'A', 'D', 'D', 0,
  /* 2218 */ 'F', 'M', 'A', 'D', 'D', 0,
  /* 2224 */ 'F', 'N', 'M', 'A', 'D', 'D', 0,
  /* 2231 */ 'L', 'F', 'D', 0,
  /* 2235 */ 'S', 'T', 'F', 'D', 0,
  /* 2240 */ 'F', 'N', 'E', 'G', 'D', 0,
  /* 2246 */ 'M', 'U', 'L', 'H', 'D', 0,
  /* 2252 */ 'F', 'C', 'F', 'I', 'D', 0,
  /* 2258 */ 'F', 'C', 'T', 'I', 'D', 0,
  /* 2264 */ 'F', 'S', 'E', 'L', 'D', 0,
  /* 2270 */ 'M', 'U', 'L', 'L', 'D', 0,
  /* 2276 */ 'C', 'M', 'P', 'L', 'D', 0,
  /* 2282 */ 'S', 'L', 'D', 0,
  /* 2286 */ 'F', 'R', 'I', 'M', 'D', 0,
  /* 2292 */ 'X', 'X', 'L', 'A', 'N', 'D', 0,
  /* 2299 */ 'C', 'R', 'N', 'A', 'N', 'D', 0,
  /* 2306 */ 'C', 'R', 'A', 'N', 'D', 0,
  /* 2312 */ 'V', 'A', 'N', 'D', 0,
  /* 2317 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'E', 'N', 'D', 0,
  /* 2330 */ 'F', 'C', 'P', 'S', 'G', 'N', 'D', 0,
  /* 2338 */ 'F', 'R', 'I', 'N', 'D', 0,
  /* 2344 */ 'F', 'R', 'I', 'P', 'D', 0,
  /* 2350 */ 'C', 'M', 'P', 'D', 0,
  /* 2355 */ 'L', 'O', 'A', 'D', '_', 'S', 'T', 'A', 'C', 'K', '_', 'G', 'U', 'A', 'R', 'D', 0,
  /* 2372 */ 'M', 'T', 'M', 'S', 'R', 'D', 0,
  /* 2379 */ 'F', 'A', 'B', 'S', 'D', 0,
  /* 2385 */ 'F', 'N', 'A', 'B', 'S', 'D', 0,
  /* 2392 */ 'P', 'O', 'P', 'C', 'N', 'T', 'D', 0,
  /* 2400 */ 'S', 'T', 'D', 0,
  /* 2404 */ 'F', 'C', 'M', 'P', 'U', 'D', 0,
  /* 2411 */ 'D', 'I', 'V', 'D', 0,
  /* 2416 */ 'F', 'R', 'I', 'Z', 'D', 0,
  /* 2422 */ 'C', 'N', 'T', 'L', 'Z', 'D', 0,
  /* 2429 */ 'R', 'E', 'G', '_', 'S', 'E', 'Q', 'U', 'E', 'N', 'C', 'E', 0,
  /* 2442 */ 'A', 'D', 'D', 'E', 0,
  /* 2447 */ 'S', 'L', 'B', 'M', 'F', 'E', 'E', 0,
  /* 2455 */ 'S', 'U', 'B', 'F', 'E', 0,
  /* 2461 */ 'S', 'L', 'B', 'I', 'E', 0,
  /* 2467 */ 'T', 'L', 'B', 'I', 'E', 0,
  /* 2473 */ 'B', 'U', 'N', 'D', 'L', 'E', 0,
  /* 2480 */ 'A', 'D', 'D', 'M', 'E', 0,
  /* 2486 */ 'S', 'U', 'B', 'F', 'M', 'E', 0,
  /* 2493 */ 'F', 'R', 'E', 0,
  /* 2497 */ 'S', 'L', 'B', 'M', 'T', 'E', 0,
  /* 2504 */ 'F', 'R', 'S', 'Q', 'R', 'T', 'E', 0,
  /* 2512 */ 'D', 'B', 'G', '_', 'V', 'A', 'L', 'U', 'E', 0,
  /* 2522 */ 'M', 'F', 'V', 'R', 'S', 'A', 'V', 'E', 0,
  /* 2531 */ 'M', 'T', 'V', 'R', 'S', 'A', 'V', 'E', 0,
  /* 2540 */ 'R', 'E', 'S', 'T', 'O', 'R', 'E', '_', 'V', 'R', 'S', 'A', 'V', 'E', 0,
  /* 2555 */ 'U', 'P', 'D', 'A', 'T', 'E', '_', 'V', 'R', 'S', 'A', 'V', 'E', 0,
  /* 2569 */ 'S', 'P', 'I', 'L', 'L', '_', 'V', 'R', 'S', 'A', 'V', 'E', 0,
  /* 2582 */ 'A', 'D', 'D', 'Z', 'E', 0,
  /* 2588 */ 'S', 'U', 'B', 'F', 'Z', 'E', 0,
  /* 2595 */ 'D', 'C', 'B', 'F', 0,
  /* 2600 */ 'S', 'U', 'B', 'F', 0,
  /* 2605 */ 'I', 'M', 'P', 'L', 'I', 'C', 'I', 'T', '_', 'D', 'E', 'F', 0,
  /* 2618 */ 'M', 'C', 'R', 'F', 0,
  /* 2623 */ 'M', 'F', 'O', 'C', 'R', 'F', 0,
  /* 2630 */ 'M', 'T', 'O', 'C', 'R', 'F', 0,
  /* 2637 */ 'M', 'T', 'C', 'R', 'F', 0,
  /* 2643 */ 'M', 'T', 'F', 'S', 'F', 0,
  /* 2649 */ 'N', 'E', 'G', 0,
  /* 2653 */ 'E', 'X', 'T', 'R', 'A', 'C', 'T', '_', 'S', 'U', 'B', 'R', 'E', 'G', 0,
  /* 2668 */ 'I', 'N', 'S', 'E', 'R', 'T', '_', 'S', 'U', 'B', 'R', 'E', 'G', 0,
  /* 2682 */ 'S', 'U', 'B', 'R', 'E', 'G', '_', 'T', 'O', '_', 'R', 'E', 'G', 0,
  /* 2696 */ 'V', '_', 'S', 'E', 'T', '0', 'H', 0,
  /* 2704 */ 'V', 'S', 'R', 'A', 'H', 0,
  /* 2710 */ 'V', 'M', 'R', 'G', 'H', 'H', 0,
  /* 2717 */ 'V', 'M', 'R', 'G', 'L', 'H', 0,
  /* 2724 */ 'V', 'R', 'L', 'H', 0,
  /* 2729 */ 'V', 'S', 'L', 'H', 0,
  /* 2734 */ 'V', 'S', 'R', 'H', 0,
  /* 2739 */ 'V', 'M', 'U', 'L', 'E', 'S', 'H', 0,
  /* 2747 */ 'V', '_', 'S', 'E', 'T', 'A', 'L', 'L', 'O', 'N', 'E', 'S', 'H', 0,
  /* 2761 */ 'V', 'A', 'V', 'G', 'S', 'H', 0,
  /* 2768 */ 'V', 'U', 'P', 'K', 'H', 'S', 'H', 0,
  /* 2776 */ 'V', 'S', 'P', 'L', 'T', 'I', 'S', 'H', 0,
  /* 2785 */ 'V', 'U', 'P', 'K', 'L', 'S', 'H', 0,
  /* 2793 */ 'V', 'M', 'I', 'N', 'S', 'H', 0,
  /* 2800 */ 'V', 'M', 'U', 'L', 'O', 'S', 'H', 0,
  /* 2808 */ 'V', 'C', 'M', 'P', 'G', 'T', 'S', 'H', 0,
  /* 2817 */ 'E', 'X', 'T', 'S', 'H', 0,
  /* 2823 */ 'V', 'M', 'A', 'X', 'S', 'H', 0,
  /* 2830 */ 'V', 'S', 'P', 'L', 'T', 'H', 0,
  /* 2837 */ 'S', 'T', 'H', 0,
  /* 2841 */ 'V', 'M', 'U', 'L', 'E', 'U', 'H', 0,
  /* 2849 */ 'V', 'A', 'V', 'G', 'U', 'H', 0,
  /* 2856 */ 'V', 'M', 'I', 'N', 'U', 'H', 0,
  /* 2863 */ 'V', 'M', 'U', 'L', 'O', 'U', 'H', 0,
  /* 2871 */ 'V', 'C', 'M', 'P', 'E', 'Q', 'U', 'H', 0,
  /* 2880 */ 'V', 'C', 'M', 'P', 'G', 'T', 'U', 'H', 0,
  /* 2889 */ 'V', 'M', 'A', 'X', 'U', 'H', 0,
  /* 2896 */ 'D', 'C', 'B', 'I', 0,
  /* 2901 */ 'I', 'C', 'B', 'I', 0,
  /* 2906 */ 'S', 'U', 'B', 'I', 0,
  /* 2911 */ 'S', 'R', 'A', 'D', 'I', 0,
  /* 2917 */ 'A', 'D', 'D', 'I', 0,
  /* 2922 */ 'C', 'M', 'P', 'L', 'D', 'I', 0,
  /* 2929 */ 'C', 'L', 'R', 'L', 'S', 'L', 'D', 'I', 0,
  /* 2938 */ 'E', 'X', 'T', 'L', 'D', 'I', 0,
  /* 2945 */ 'X', 'X', 'P', 'E', 'R', 'M', 'D', 'I', 0,
  /* 2954 */ 'C', 'M', 'P', 'D', 'I', 0,
  /* 2960 */ 'C', 'L', 'R', 'R', 'D', 'I', 0,
  /* 2967 */ 'I', 'N', 'S', 'R', 'D', 'I', 0,
  /* 2974 */ 'R', 'O', 'T', 'R', 'D', 'I', 0,
  /* 2981 */ 'E', 'X', 'T', 'R', 'D', 'I', 0,
  /* 2988 */ 'T', 'D', 'I', 0,
  /* 2992 */ 'P', 'H', 'I', 0,
  /* 2996 */ 'M', 'U', 'L', 'L', 'I', 0,
  /* 3002 */ 'R', 'L', 'D', 'I', 'M', 'I', 0,
  /* 3009 */ 'R', 'L', 'W', 'I', 'M', 'I', 0,
  /* 3016 */ 'V', 'S', 'L', 'D', 'O', 'I', 0,
  /* 3023 */ 'X', 'S', 'R', 'D', 'P', 'I', 0,
  /* 3030 */ 'X', 'V', 'R', 'D', 'P', 'I', 0,
  /* 3037 */ 'X', 'V', 'R', 'S', 'P', 'I', 0,
  /* 3044 */ 'X', 'O', 'R', 'I', 0,
  /* 3049 */ 'L', 'D', 't', 'o', 'c', 'J', 'T', 'I', 0,
  /* 3058 */ 'S', 'R', 'A', 'W', 'I', 0,
  /* 3064 */ 'X', 'X', 'S', 'L', 'D', 'W', 'I', 0,
  /* 3072 */ 'C', 'M', 'P', 'L', 'W', 'I', 0,
  /* 3079 */ 'C', 'L', 'R', 'L', 'S', 'L', 'W', 'I', 0,
  /* 3088 */ 'I', 'N', 'S', 'L', 'W', 'I', 0,
  /* 3095 */ 'E', 'X', 'T', 'L', 'W', 'I', 0,
  /* 3102 */ 'C', 'M', 'P', 'W', 'I', 0,
  /* 3108 */ 'C', 'L', 'R', 'R', 'W', 'I', 0,
  /* 3115 */ 'I', 'N', 'S', 'R', 'W', 'I', 0,
  /* 3122 */ 'R', 'O', 'T', 'R', 'W', 'I', 0,
  /* 3129 */ 'E', 'X', 'T', 'R', 'W', 'I', 0,
  /* 3136 */ 'T', 'W', 'I', 0,
  /* 3140 */ 'B', 'L', 0,
  /* 3143 */ 'g', 'B', 'C', 'L', 0,
  /* 3148 */ 'B', 'C', 'C', 'L', 0,
  /* 3153 */ 'R', 'L', 'D', 'C', 'L', 0,
  /* 3159 */ 'R', 'L', 'D', 'I', 'C', 'L', 0,
  /* 3166 */ 'G', 'C', '_', 'L', 'A', 'B', 'E', 'L', 0,
  /* 3175 */ 'E', 'H', '_', 'L', 'A', 'B', 'E', 'L', 0,
  /* 3184 */ 'T', 'L', 'B', 'I', 'E', 'L', 0,
  /* 3191 */ 'I', 'S', 'E', 'L', 0,
  /* 3196 */ 'V', 'S', 'E', 'L', 0,
  /* 3201 */ 'X', 'X', 'S', 'E', 'L', 0,
  /* 3207 */ 'D', 'S', 'S', 'A', 'L', 'L', 0,
  /* 3214 */ 'K', 'I', 'L', 'L', 0,
  /* 3219 */ 'B', 'L', 'R', 'L', 0,
  /* 3224 */ 'g', 'B', 'C', 'L', 'R', 'L', 0,
  /* 3231 */ 'B', 'C', 'C', 'L', 'R', 'L', 0,
  /* 3238 */ 'B', 'D', 'Z', 'L', 'R', 'L', 0,
  /* 3245 */ 'B', 'D', 'N', 'Z', 'L', 'R', 'L', 0,
  /* 3253 */ 'B', 'C', 'T', 'R', 'L', 0,
  /* 3259 */ 'g', 'B', 'C', 'C', 'T', 'R', 'L', 0,
  /* 3267 */ 'B', 'C', 'C', 'C', 'T', 'R', 'L', 0,
  /* 3275 */ 'L', 'V', 'S', 'L', 0,
  /* 3280 */ 'F', 'M', 'U', 'L', 0,
  /* 3285 */ 'L', 'V', 'X', 'L', 0,
  /* 3290 */ 'S', 'T', 'V', 'X', 'L', 0,
  /* 3296 */ 'D', 'C', 'B', 'Z', 'L', 0,
  /* 3302 */ 'B', 'D', 'Z', 'L', 0,
  /* 3307 */ 'B', 'D', 'N', 'Z', 'L', 0,
  /* 3313 */ 'L', 'D', 't', 'o', 'c', 'L', 0,
  /* 3320 */ 'A', 'D', 'D', 'I', 't', 'o', 'c', 'L', 0,
  /* 3329 */ 'A', 'D', 'D', 'I', 't', 'l', 's', 'g', 'd', 'L', 0,
  /* 3340 */ 'A', 'D', 'D', 'I', 't', 'l', 's', 'l', 'd', 'L', 0,
  /* 3351 */ 'L', 'D', 'g', 'o', 't', 'T', 'p', 'r', 'e', 'l', 'L', 0,
  /* 3363 */ 'A', 'D', 'D', 'I', 'd', 't', 'p', 'r', 'e', 'l', 'L', 0,
  /* 3375 */ 'V', 'M', 'S', 'U', 'M', 'M', 'B', 'M', 0,
  /* 3384 */ 'V', 'S', 'U', 'B', 'U', 'B', 'M', 0,
  /* 3392 */ 'V', 'A', 'D', 'D', 'U', 'B', 'M', 0,
  /* 3400 */ 'V', 'M', 'S', 'U', 'M', 'U', 'B', 'M', 0,
  /* 3409 */ 'V', 'M', 'S', 'U', 'M', 'S', 'H', 'M', 0,
  /* 3418 */ 'V', 'S', 'U', 'B', 'U', 'H', 'M', 0,
  /* 3426 */ 'V', 'M', 'L', 'A', 'D', 'D', 'U', 'H', 'M', 0,
  /* 3436 */ 'V', 'A', 'D', 'D', 'U', 'H', 'M', 0,
  /* 3444 */ 'V', 'M', 'S', 'U', 'M', 'U', 'H', 'M', 0,
  /* 3453 */ 'V', 'R', 'F', 'I', 'M', 0,
  /* 3459 */ 'X', 'S', 'R', 'D', 'P', 'I', 'M', 0,
  /* 3467 */ 'X', 'V', 'R', 'D', 'P', 'I', 'M', 0,
  /* 3475 */ 'X', 'V', 'R', 'S', 'P', 'I', 'M', 0,
  /* 3483 */ 'R', 'L', 'W', 'I', 'N', 'M', 0,
  /* 3490 */ 'R', 'L', 'W', 'N', 'M', 0,
  /* 3496 */ 'V', 'P', 'E', 'R', 'M', 0,
  /* 3502 */ 'I', 'N', 'L', 'I', 'N', 'E', 'A', 'S', 'M', 0,
  /* 3512 */ 'V', 'P', 'K', 'U', 'H', 'U', 'M', 0,
  /* 3520 */ 'V', 'P', 'K', 'U', 'W', 'U', 'M', 0,
  /* 3528 */ 'V', 'S', 'U', 'B', 'U', 'W', 'M', 0,
  /* 3536 */ 'V', 'A', 'D', 'D', 'U', 'W', 'M', 0,
  /* 3544 */ 'V', 'R', 'F', 'I', 'N', 0,
  /* 3550 */ 'C', 'F', 'I', '_', 'I', 'N', 'S', 'T', 'R', 'U', 'C', 'T', 'I', 'O', 'N', 0,
  /* 3566 */ 'A', 'D', 'J', 'C', 'A', 'L', 'L', 'S', 'T', 'A', 'C', 'K', 'D', 'O', 'W', 'N', 0,
  /* 3583 */ 'E', 'I', 'E', 'I', 'O', 0,
  /* 3589 */ 'V', 'S', 'L', 'O', 0,
  /* 3594 */ 'G', 'e', 't', 'G', 'B', 'R', 'O', 0,
  /* 3602 */ 'V', 'S', 'R', 'O', 0,
  /* 3607 */ 'S', 'T', 'A', 'C', 'K', 'M', 'A', 'P', 0,
  /* 3616 */ 'T', 'R', 'A', 'P', 0,
  /* 3621 */ 'X', 'S', 'N', 'M', 'S', 'U', 'B', 'A', 'D', 'P', 0,
  /* 3632 */ 'X', 'V', 'N', 'M', 'S', 'U', 'B', 'A', 'D', 'P', 0,
  /* 3643 */ 'X', 'S', 'M', 'S', 'U', 'B', 'A', 'D', 'P', 0,
  /* 3653 */ 'X', 'V', 'M', 'S', 'U', 'B', 'A', 'D', 'P', 0,
  /* 3663 */ 'X', 'S', 'N', 'M', 'A', 'D', 'D', 'A', 'D', 'P', 0,
  /* 3674 */ 'X', 'V', 'N', 'M', 'A', 'D', 'D', 'A', 'D', 'P', 0,
  /* 3685 */ 'X', 'S', 'M', 'A', 'D', 'D', 'A', 'D', 'P', 0,
  /* 3695 */ 'X', 'V', 'M', 'A', 'D', 'D', 'A', 'D', 'P', 0,
  /* 3705 */ 'X', 'S', 'S', 'U', 'B', 'D', 'P', 0,
  /* 3713 */ 'X', 'V', 'S', 'U', 'B', 'D', 'P', 0,
  /* 3721 */ 'X', 'S', 'A', 'D', 'D', 'D', 'P', 0,
  /* 3729 */ 'X', 'V', 'A', 'D', 'D', 'D', 'P', 0,
  /* 3737 */ 'X', 'S', 'C', 'V', 'S', 'X', 'D', 'D', 'P', 0,
  /* 3747 */ 'X', 'V', 'C', 'V', 'S', 'X', 'D', 'D', 'P', 0,
  /* 3757 */ 'X', 'S', 'C', 'V', 'U', 'X', 'D', 'D', 'P', 0,
  /* 3767 */ 'X', 'V', 'C', 'V', 'U', 'X', 'D', 'D', 'P', 0,
  /* 3777 */ 'X', 'V', 'C', 'M', 'P', 'G', 'E', 'D', 'P', 0,
  /* 3787 */ 'X', 'S', 'R', 'E', 'D', 'P', 0,
  /* 3794 */ 'X', 'V', 'R', 'E', 'D', 'P', 0,
  /* 3801 */ 'X', 'S', 'R', 'S', 'Q', 'R', 'T', 'E', 'D', 'P', 0,
  /* 3812 */ 'X', 'V', 'R', 'S', 'Q', 'R', 'T', 'E', 'D', 'P', 0,
  /* 3823 */ 'X', 'S', 'N', 'E', 'G', 'D', 'P', 0,
  /* 3831 */ 'X', 'V', 'N', 'E', 'G', 'D', 'P', 0,
  /* 3839 */ 'X', 'S', 'M', 'U', 'L', 'D', 'P', 0,
  /* 3847 */ 'X', 'V', 'M', 'U', 'L', 'D', 'P', 0,
  /* 3855 */ 'X', 'S', 'N', 'M', 'S', 'U', 'B', 'M', 'D', 'P', 0,
  /* 3866 */ 'X', 'V', 'N', 'M', 'S', 'U', 'B', 'M', 'D', 'P', 0,
  /* 3877 */ 'X', 'S', 'M', 'S', 'U', 'B', 'M', 'D', 'P', 0,
  /* 3887 */ 'X', 'V', 'M', 'S', 'U', 'B', 'M', 'D', 'P', 0,
  /* 3897 */ 'X', 'S', 'N', 'M', 'A', 'D', 'D', 'M', 'D', 'P', 0,
  /* 3908 */ 'X', 'V', 'N', 'M', 'A', 'D', 'D', 'M', 'D', 'P', 0,
  /* 3919 */ 'X', 'S', 'M', 'A', 'D', 'D', 'M', 'D', 'P', 0,
  /* 3929 */ 'X', 'V', 'M', 'A', 'D', 'D', 'M', 'D', 'P', 0,
  /* 3939 */ 'X', 'S', 'C', 'P', 'S', 'G', 'N', 'D', 'P', 0,
  /* 3949 */ 'X', 'V', 'C', 'P', 'S', 'G', 'N', 'D', 'P', 0,
  /* 3959 */ 'X', 'S', 'M', 'I', 'N', 'D', 'P', 0,
  /* 3967 */ 'X', 'V', 'M', 'I', 'N', 'D', 'P', 0,
  /* 3975 */ 'X', 'S', 'C', 'M', 'P', 'O', 'D', 'P', 0,
  /* 3984 */ 'X', 'S', 'C', 'V', 'S', 'P', 'D', 'P', 0,
  /* 3993 */ 'X', 'V', 'C', 'V', 'S', 'P', 'D', 'P', 0,
  /* 4002 */ 'X', 'V', 'C', 'M', 'P', 'E', 'Q', 'D', 'P', 0,
  /* 4012 */ 'X', 'S', 'N', 'A', 'B', 'S', 'D', 'P', 0,
  /* 4021 */ 'X', 'V', 'N', 'A', 'B', 'S', 'D', 'P', 0,
  /* 4030 */ 'X', 'S', 'A', 'B', 'S', 'D', 'P', 0,
  /* 4038 */ 'X', 'V', 'A', 'B', 'S', 'D', 'P', 0,
  /* 4046 */ 'X', 'V', 'C', 'M', 'P', 'G', 'T', 'D', 'P', 0,
  /* 4056 */ 'X', 'S', 'S', 'Q', 'R', 'T', 'D', 'P', 0,
  /* 4065 */ 'X', 'S', 'T', 'S', 'Q', 'R', 'T', 'D', 'P', 0,
  /* 4075 */ 'X', 'V', 'T', 'S', 'Q', 'R', 'T', 'D', 'P', 0,
  /* 4085 */ 'X', 'V', 'S', 'Q', 'R', 'T', 'D', 'P', 0,
  /* 4094 */ 'X', 'S', 'C', 'M', 'P', 'U', 'D', 'P', 0,
  /* 4103 */ 'X', 'S', 'D', 'I', 'V', 'D', 'P', 0,
  /* 4111 */ 'X', 'S', 'T', 'D', 'I', 'V', 'D', 'P', 0,
  /* 4120 */ 'X', 'V', 'T', 'D', 'I', 'V', 'D', 'P', 0,
  /* 4129 */ 'X', 'V', 'D', 'I', 'V', 'D', 'P', 0,
  /* 4137 */ 'X', 'V', 'C', 'V', 'S', 'X', 'W', 'D', 'P', 0,
  /* 4147 */ 'X', 'V', 'C', 'V', 'U', 'X', 'W', 'D', 'P', 0,
  /* 4157 */ 'X', 'S', 'M', 'A', 'X', 'D', 'P', 0,
  /* 4165 */ 'X', 'V', 'M', 'A', 'X', 'D', 'P', 0,
  /* 4173 */ 'V', 'C', 'M', 'P', 'B', 'F', 'P', 0,
  /* 4181 */ 'V', 'N', 'M', 'S', 'U', 'B', 'F', 'P', 0,
  /* 4190 */ 'V', 'S', 'U', 'B', 'F', 'P', 0,
  /* 4197 */ 'V', 'M', 'A', 'D', 'D', 'F', 'P', 0,
  /* 4205 */ 'V', 'A', 'D', 'D', 'F', 'P', 0,
  /* 4212 */ 'V', 'L', 'O', 'G', 'E', 'F', 'P', 0,
  /* 4220 */ 'V', 'C', 'M', 'P', 'G', 'E', 'F', 'P', 0,
  /* 4229 */ 'V', 'R', 'E', 'F', 'P', 0,
  /* 4235 */ 'V', 'E', 'X', 'P', 'T', 'E', 'F', 'P', 0,
  /* 4244 */ 'V', 'R', 'S', 'Q', 'R', 'T', 'E', 'F', 'P', 0,
  /* 4254 */ 'V', 'M', 'I', 'N', 'F', 'P', 0,
  /* 4261 */ 'V', 'C', 'M', 'P', 'E', 'Q', 'F', 'P', 0,
  /* 4270 */ 'V', 'C', 'M', 'P', 'G', 'T', 'F', 'P', 0,
  /* 4279 */ 'V', 'M', 'A', 'X', 'F', 'P', 0,
  /* 4286 */ 'V', 'R', 'F', 'I', 'P', 0,
  /* 4292 */ 'X', 'S', 'R', 'D', 'P', 'I', 'P', 0,
  /* 4300 */ 'X', 'V', 'R', 'D', 'P', 'I', 'P', 0,
  /* 4308 */ 'X', 'V', 'R', 'S', 'P', 'I', 'P', 0,
  /* 4316 */ 'B', 'L', 'A', '8', '_', 'N', 'O', 'P', 0,
  /* 4325 */ 'B', 'L', '8', '_', 'N', 'O', 'P', 0,
  /* 4333 */ 'X', 'V', 'N', 'M', 'S', 'U', 'B', 'A', 'S', 'P', 0,
  /* 4344 */ 'X', 'V', 'M', 'S', 'U', 'B', 'A', 'S', 'P', 0,
  /* 4354 */ 'X', 'V', 'N', 'M', 'A', 'D', 'D', 'A', 'S', 'P', 0,
  /* 4365 */ 'X', 'V', 'M', 'A', 'D', 'D', 'A', 'S', 'P', 0,
  /* 4375 */ 'X', 'V', 'S', 'U', 'B', 'S', 'P', 0,
  /* 4383 */ 'X', 'V', 'A', 'D', 'D', 'S', 'P', 0,
  /* 4391 */ 'X', 'V', 'C', 'V', 'S', 'X', 'D', 'S', 'P', 0,
  /* 4401 */ 'X', 'V', 'C', 'V', 'U', 'X', 'D', 'S', 'P', 0,
  /* 4411 */ 'X', 'V', 'C', 'M', 'P', 'G', 'E', 'S', 'P', 0,
  /* 4421 */ 'X', 'V', 'R', 'E', 'S', 'P', 0,
  /* 4428 */ 'X', 'V', 'R', 'S', 'Q', 'R', 'T', 'E', 'S', 'P', 0,
  /* 4439 */ 'X', 'V', 'N', 'E', 'G', 'S', 'P', 0,
  /* 4447 */ 'X', 'V', 'M', 'U', 'L', 'S', 'P', 0,
  /* 4455 */ 'X', 'V', 'N', 'M', 'S', 'U', 'B', 'M', 'S', 'P', 0,
  /* 4466 */ 'X', 'V', 'M', 'S', 'U', 'B', 'M', 'S', 'P', 0,
  /* 4476 */ 'X', 'V', 'N', 'M', 'A', 'D', 'D', 'M', 'S', 'P', 0,
  /* 4487 */ 'X', 'V', 'M', 'A', 'D', 'D', 'M', 'S', 'P', 0,
  /* 4497 */ 'X', 'V', 'C', 'P', 'S', 'G', 'N', 'S', 'P', 0,
  /* 4507 */ 'X', 'V', 'M', 'I', 'N', 'S', 'P', 0,
  /* 4515 */ 'X', 'S', 'C', 'V', 'D', 'P', 'S', 'P', 0,
  /* 4524 */ 'X', 'V', 'C', 'V', 'D', 'P', 'S', 'P', 0,
  /* 4533 */ 'X', 'V', 'C', 'M', 'P', 'E', 'Q', 'S', 'P', 0,
  /* 4543 */ 'F', 'R', 'S', 'P', 0,
  /* 4548 */ 'X', 'V', 'N', 'A', 'B', 'S', 'S', 'P', 0,
  /* 4557 */ 'X', 'V', 'A', 'B', 'S', 'S', 'P', 0,
  /* 4565 */ 'X', 'V', 'C', 'M', 'P', 'G', 'T', 'S', 'P', 0,
  /* 4575 */ 'X', 'V', 'T', 'S', 'Q', 'R', 'T', 'S', 'P', 0,
  /* 4585 */ 'X', 'V', 'S', 'Q', 'R', 'T', 'S', 'P', 0,
  /* 4594 */ 'X', 'V', 'T', 'D', 'I', 'V', 'S', 'P', 0,
  /* 4603 */ 'X', 'V', 'D', 'I', 'V', 'S', 'P', 0,
  /* 4611 */ 'X', 'V', 'C', 'V', 'S', 'X', 'W', 'S', 'P', 0,
  /* 4621 */ 'X', 'V', 'C', 'V', 'U', 'X', 'W', 'S', 'P', 0,
  /* 4631 */ 'X', 'V', 'M', 'A', 'X', 'S', 'P', 0,
  /* 4639 */ 'A', 'D', 'J', 'C', 'A', 'L', 'L', 'S', 'T', 'A', 'C', 'K', 'U', 'P', 0,
  /* 4654 */ 'U', 'p', 'd', 'a', 't', 'e', 'G', 'B', 'R', 0,
  /* 4664 */ 'R', 'L', 'D', 'C', 'R', 0,
  /* 4670 */ 'M', 'F', 'C', 'R', 0,
  /* 4675 */ 'R', 'L', 'D', 'I', 'C', 'R', 0,
  /* 4682 */ 'M', 'F', 'V', 'S', 'C', 'R', 0,
  /* 4689 */ 'M', 'T', 'V', 'S', 'C', 'R', 0,
  /* 4696 */ 'R', 'E', 'S', 'T', 'O', 'R', 'E', '_', 'C', 'R', 0,
  /* 4707 */ 'S', 'P', 'I', 'L', 'L', '_', 'C', 'R', 0,
  /* 4716 */ 'G', 'E', 'T', 't', 'l', 's', 'l', 'd', 'A', 'D', 'D', 'R', 0,
  /* 4729 */ 'G', 'E', 'T', 't', 'l', 's', 'A', 'D', 'D', 'R', 0,
  /* 4740 */ 'B', 'L', 'R', 0,
  /* 4744 */ 'g', 'B', 'C', 'L', 'R', 0,
  /* 4750 */ 'B', 'C', 'C', 'L', 'R', 0,
  /* 4756 */ 'M', 'F', 'L', 'R', 0,
  /* 4761 */ 'M', 'T', 'L', 'R', 0,
  /* 4766 */ 'B', 'D', 'Z', 'L', 'R', 0,
  /* 4772 */ 'B', 'D', 'N', 'Z', 'L', 'R', 0,
  /* 4779 */ 'M', 'o', 'v', 'e', 'P', 'C', 't', 'o', 'L', 'R', 0,
  /* 4790 */ 'F', 'M', 'R', 0,
  /* 4794 */ 'X', 'X', 'L', 'O', 'R', 0,
  /* 4800 */ 'X', 'X', 'L', 'N', 'O', 'R', 0,
  /* 4807 */ 'C', 'R', 'N', 'O', 'R', 0,
  /* 4813 */ 'V', 'N', 'O', 'R', 0,
  /* 4818 */ 'C', 'R', 'O', 'R', 0,
  /* 4823 */ 'V', 'O', 'R', 0,
  /* 4827 */ 'X', 'X', 'L', 'X', 'O', 'R', 0,
  /* 4834 */ 'C', 'R', 'X', 'O', 'R', 0,
  /* 4840 */ 'V', 'X', 'O', 'R', 0,
  /* 4845 */ 'M', 'F', 'S', 'P', 'R', 0,
  /* 4851 */ 'M', 'T', 'S', 'P', 'R', 0,
  /* 4857 */ 'M', 'F', 'M', 'S', 'R', 0,
  /* 4863 */ 'M', 'T', 'M', 'S', 'R', 0,
  /* 4869 */ 'L', 'V', 'S', 'R', 0,
  /* 4874 */ 'T', 'A', 'I', 'L', 'B', 'C', 'T', 'R', 0,
  /* 4883 */ 'g', 'B', 'C', 'C', 'T', 'R', 0,
  /* 4890 */ 'B', 'C', 'C', 'C', 'T', 'R', 0,
  /* 4897 */ 'M', 'F', 'C', 'T', 'R', 0,
  /* 4903 */ 'M', 'T', 'C', 'T', 'R', 0,
  /* 4909 */ 'V', 'S', 'U', 'M', '4', 'S', 'B', 'S', 0,
  /* 4918 */ 'V', 'S', 'U', 'B', 'S', 'B', 'S', 0,
  /* 4926 */ 'V', 'A', 'D', 'D', 'S', 'B', 'S', 0,
  /* 4934 */ 'V', 'S', 'U', 'M', '4', 'U', 'B', 'S', 0,
  /* 4943 */ 'V', 'S', 'U', 'B', 'U', 'B', 'S', 0,
  /* 4951 */ 'V', 'A', 'D', 'D', 'U', 'B', 'S', 0,
  /* 4959 */ 'F', 'S', 'U', 'B', 'S', 0,
  /* 4965 */ 'F', 'M', 'S', 'U', 'B', 'S', 0,
  /* 4972 */ 'F', 'N', 'M', 'S', 'U', 'B', 'S', 0,
  /* 4980 */ 'F', 'A', 'D', 'D', 'S', 0,
  /* 4986 */ 'F', 'M', 'A', 'D', 'D', 'S', 0,
  /* 4993 */ 'F', 'N', 'M', 'A', 'D', 'D', 'S', 0,
  /* 5001 */ 'F', 'C', 'F', 'I', 'D', 'S', 0,
  /* 5008 */ 'X', 'S', 'C', 'V', 'D', 'P', 'S', 'X', 'D', 'S', 0,
  /* 5019 */ 'X', 'V', 'C', 'V', 'D', 'P', 'S', 'X', 'D', 'S', 0,
  /* 5030 */ 'X', 'V', 'C', 'V', 'S', 'P', 'S', 'X', 'D', 'S', 0,
  /* 5041 */ 'X', 'S', 'C', 'V', 'D', 'P', 'U', 'X', 'D', 'S', 0,
  /* 5052 */ 'X', 'V', 'C', 'V', 'D', 'P', 'U', 'X', 'D', 'S', 0,
  /* 5063 */ 'X', 'V', 'C', 'V', 'S', 'P', 'U', 'X', 'D', 'S', 0,
  /* 5074 */ 'V', '_', 'S', 'E', 'T', 'A', 'L', 'L', 'O', 'N', 'E', 'S', 0,
  /* 5087 */ 'F', 'R', 'E', 'S', 0,
  /* 5092 */ 'F', 'R', 'S', 'Q', 'R', 'T', 'E', 'S', 0,
  /* 5101 */ 'M', 'F', 'F', 'S', 0,
  /* 5106 */ 'L', 'F', 'S', 0,
  /* 5110 */ 'S', 'T', 'F', 'S', 0,
  /* 5115 */ 'F', 'N', 'E', 'G', 'S', 0,
  /* 5121 */ 'V', 'S', 'U', 'M', '4', 'S', 'H', 'S', 0,
  /* 5130 */ 'V', 'S', 'U', 'B', 'S', 'H', 'S', 0,
  /* 5138 */ 'V', 'M', 'H', 'A', 'D', 'D', 'S', 'H', 'S', 0,
  /* 5148 */ 'V', 'M', 'H', 'R', 'A', 'D', 'D', 'S', 'H', 'S', 0,
  /* 5159 */ 'V', 'A', 'D', 'D', 'S', 'H', 'S', 0,
  /* 5167 */ 'V', 'M', 'S', 'U', 'M', 'S', 'H', 'S', 0,
  /* 5176 */ 'V', 'S', 'U', 'B', 'U', 'H', 'S', 0,
  /* 5184 */ 'V', 'A', 'D', 'D', 'U', 'H', 'S', 0,
  /* 5192 */ 'V', 'M', 'S', 'U', 'M', 'U', 'H', 'S', 0,
  /* 5201 */ 'S', 'U', 'B', 'I', 'S', 0,
  /* 5207 */ 'A', 'D', 'D', 'I', 'S', 0,
  /* 5213 */ 'L', 'I', 'S', 0,
  /* 5217 */ 'X', 'O', 'R', 'I', 'S', 0,
  /* 5223 */ 'F', 'S', 'E', 'L', 'S', 0,
  /* 5229 */ 'A', 'D', 'D', '4', 'T', 'L', 'S', 0,
  /* 5237 */ 'A', 'D', 'D', '8', 'T', 'L', 'S', 0,
  /* 5245 */ 'B', 'L', '8', '_', 'T', 'L', 'S', 0,
  /* 5253 */ 'B', 'L', '_', 'T', 'L', 'S', 0,
  /* 5260 */ 'B', 'L', '8', '_', 'N', 'O', 'P', '_', 'T', 'L', 'S', 0,
  /* 5272 */ 'F', 'M', 'U', 'L', 'S', 0,
  /* 5278 */ 'F', 'R', 'I', 'M', 'S', 0,
  /* 5284 */ 'F', 'C', 'P', 'S', 'G', 'N', 'S', 0,
  /* 5292 */ 'F', 'R', 'I', 'N', 'S', 0,
  /* 5298 */ 'F', 'R', 'I', 'P', 'S', 0,
  /* 5304 */ 'C', 'O', 'P', 'Y', '_', 'T', 'O', '_', 'R', 'E', 'G', 'C', 'L', 'A', 'S', 'S', 0,
  /* 5321 */ 'F', 'A', 'B', 'S', 'S', 0,
  /* 5327 */ 'F', 'N', 'A', 'B', 'S', 'S', 0,
  /* 5334 */ 'D', 'S', 'S', 0,
  /* 5338 */ 'V', 'P', 'K', 'S', 'H', 'S', 'S', 0,
  /* 5346 */ 'V', 'P', 'K', 'S', 'W', 'S', 'S', 0,
  /* 5354 */ 'F', 'S', 'Q', 'R', 'T', 'S', 0,
  /* 5361 */ 'F', 'C', 'F', 'I', 'D', 'U', 'S', 0,
  /* 5369 */ 'V', 'P', 'K', 'S', 'H', 'U', 'S', 0,
  /* 5377 */ 'V', 'P', 'K', 'U', 'H', 'U', 'S', 0,
  /* 5385 */ 'F', 'C', 'M', 'P', 'U', 'S', 0,
  /* 5392 */ 'V', 'P', 'K', 'S', 'W', 'U', 'S', 0,
  /* 5400 */ 'V', 'P', 'K', 'U', 'W', 'U', 'S', 0,
  /* 5408 */ 'F', 'D', 'I', 'V', 'S', 0,
  /* 5414 */ 'V', 'S', 'U', 'M', '2', 'S', 'W', 'S', 0,
  /* 5423 */ 'V', 'S', 'U', 'B', 'S', 'W', 'S', 0,
  /* 5431 */ 'V', 'A', 'D', 'D', 'S', 'W', 'S', 0,
  /* 5439 */ 'V', 'S', 'U', 'M', 'S', 'W', 'S', 0,
  /* 5447 */ 'V', 'S', 'U', 'B', 'U', 'W', 'S', 0,
  /* 5455 */ 'V', 'A', 'D', 'D', 'U', 'W', 'S', 0,
  /* 5463 */ 'X', 'S', 'C', 'V', 'D', 'P', 'S', 'X', 'W', 'S', 0,
  /* 5474 */ 'X', 'V', 'C', 'V', 'D', 'P', 'S', 'X', 'W', 'S', 0,
  /* 5485 */ 'X', 'V', 'C', 'V', 'S', 'P', 'S', 'X', 'W', 'S', 0,
  /* 5496 */ 'X', 'S', 'C', 'V', 'D', 'P', 'U', 'X', 'W', 'S', 0,
  /* 5507 */ 'X', 'V', 'C', 'V', 'D', 'P', 'U', 'X', 'W', 'S', 0,
  /* 5518 */ 'X', 'V', 'C', 'V', 'S', 'P', 'U', 'X', 'W', 'S', 0,
  /* 5529 */ 'V', 'C', 'T', 'S', 'X', 'S', 0,
  /* 5536 */ 'V', 'C', 'T', 'U', 'X', 'S', 0,
  /* 5543 */ 'F', 'R', 'I', 'Z', 'S', 0,
  /* 5549 */ 'D', 'C', 'B', 'T', 0,
  /* 5554 */ 'C', 'R', '6', 'S', 'E', 'T', 0,
  /* 5561 */ 'C', 'R', '6', 'U', 'N', 'S', 'E', 'T', 0,
  /* 5570 */ 'C', 'R', 'U', 'N', 'S', 'E', 'T', 0,
  /* 5578 */ 'C', 'R', 'S', 'E', 'T', 0,
  /* 5584 */ 'W', 'A', 'I', 'T', 0,
  /* 5589 */ 'R', 'E', 'S', 'T', 'O', 'R', 'E', '_', 'C', 'R', 'B', 'I', 'T', 0,
  /* 5603 */ 'S', 'P', 'I', 'L', 'L', '_', 'C', 'R', 'B', 'I', 'T', 0,
  /* 5615 */ 'A', 'N', 'D', 'I', 'o', '_', '1', '_', 'E', 'Q', '_', 'B', 'I', 'T', 0,
  /* 5630 */ 'A', 'N', 'D', 'I', 'o', '_', '1', '_', 'G', 'T', '_', 'B', 'I', 'T', 0,
  /* 5645 */ 'P', 'A', 'T', 'C', 'H', 'P', 'O', 'I', 'N', 'T', 0,
  /* 5656 */ 'P', 'P', 'C', '3', '2', 'G', 'O', 'T', 0,
  /* 5665 */ 'P', 'P', 'C', '3', '2', 'P', 'I', 'C', 'G', 'O', 'T', 0,
  /* 5677 */ 'L', 'D', 't', 'o', 'c', 'C', 'P', 'T', 0,
  /* 5686 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'S', 'T', 'A', 'R', 'T', 0,
  /* 5701 */ 'F', 'S', 'Q', 'R', 'T', 0,
  /* 5707 */ 'D', 'C', 'B', 'S', 'T', 0,
  /* 5713 */ 'D', 'S', 'T', 0,
  /* 5717 */ 'D', 'C', 'B', 'T', 'S', 'T', 0,
  /* 5724 */ 'D', 'S', 'T', 'S', 'T', 0,
  /* 5730 */ 'D', 'S', 'T', 'T', 0,
  /* 5735 */ 'D', 'S', 'T', 'S', 'T', 'T', 0,
  /* 5742 */ 'L', 'H', 'A', 'U', 0,
  /* 5747 */ 'S', 'T', 'B', 'U', 0,
  /* 5752 */ 'L', 'F', 'D', 'U', 0,
  /* 5757 */ 'S', 'T', 'F', 'D', 'U', 0,
  /* 5763 */ 'M', 'U', 'L', 'H', 'D', 'U', 0,
  /* 5770 */ 'F', 'C', 'F', 'I', 'D', 'U', 0,
  /* 5777 */ 'L', 'D', 'U', 0,
  /* 5781 */ 'S', 'T', 'D', 'U', 0,
  /* 5786 */ 'D', 'I', 'V', 'D', 'U', 0,
  /* 5792 */ 'S', 'T', 'H', 'U', 0,
  /* 5797 */ 'L', 'F', 'S', 'U', 0,
  /* 5802 */ 'S', 'T', 'F', 'S', 'U', 0,
  /* 5808 */ 'M', 'U', 'L', 'H', 'W', 'U', 0,
  /* 5815 */ 'S', 'T', 'W', 'U', 0,
  /* 5820 */ 'D', 'I', 'V', 'W', 'U', 0,
  /* 5826 */ 'L', 'B', 'Z', 'U', 0,
  /* 5831 */ 'L', 'H', 'Z', 'U', 0,
  /* 5836 */ 'L', 'W', 'Z', 'U', 0,
  /* 5841 */ 'F', 'D', 'I', 'V', 0,
  /* 5846 */ 'C', 'R', 'E', 'Q', 'V', 0,
  /* 5852 */ 'V', 'S', 'R', 'A', 'W', 0,
  /* 5858 */ 'V', 'M', 'R', 'G', 'H', 'W', 0,
  /* 5865 */ 'X', 'X', 'M', 'R', 'G', 'H', 'W', 0,
  /* 5873 */ 'M', 'U', 'L', 'H', 'W', 0,
  /* 5879 */ 'F', 'C', 'T', 'I', 'W', 0,
  /* 5885 */ 'V', 'M', 'R', 'G', 'L', 'W', 0,
  /* 5892 */ 'X', 'X', 'M', 'R', 'G', 'L', 'W', 0,
  /* 5900 */ 'M', 'U', 'L', 'L', 'W', 0,
  /* 5906 */ 'C', 'M', 'P', 'L', 'W', 0,
  /* 5912 */ 'V', 'R', 'L', 'W', 0,
  /* 5917 */ 'V', 'S', 'L', 'W', 0,
  /* 5922 */ 'L', 'M', 'W', 0,
  /* 5926 */ 'S', 'T', 'M', 'W', 0,
  /* 5931 */ 'C', 'M', 'P', 'W', 0,
  /* 5936 */ 'V', 'S', 'R', 'W', 0,
  /* 5941 */ 'V', 'A', 'V', 'G', 'S', 'W', 0,
  /* 5948 */ 'V', 'S', 'P', 'L', 'T', 'I', 'S', 'W', 0,
  /* 5957 */ 'V', 'M', 'I', 'N', 'S', 'W', 0,
  /* 5964 */ 'V', 'C', 'M', 'P', 'G', 'T', 'S', 'W', 0,
  /* 5973 */ 'E', 'X', 'T', 'S', 'W', 0,
  /* 5979 */ 'V', 'M', 'A', 'X', 'S', 'W', 0,
  /* 5986 */ 'V', 'S', 'P', 'L', 'T', 'W', 0,
  /* 5993 */ 'X', 'X', 'S', 'P', 'L', 'T', 'W', 0,
  /* 6001 */ 'P', 'O', 'P', 'C', 'N', 'T', 'W', 0,
  /* 6009 */ 'S', 'T', 'W', 0,
  /* 6013 */ 'V', 'S', 'U', 'B', 'C', 'U', 'W', 0,
  /* 6021 */ 'V', 'A', 'D', 'D', 'C', 'U', 'W', 0,
  /* 6029 */ 'V', 'A', 'V', 'G', 'U', 'W', 0,
  /* 6036 */ 'V', 'M', 'I', 'N', 'U', 'W', 0,
  /* 6043 */ 'V', 'C', 'M', 'P', 'E', 'Q', 'U', 'W', 0,
  /* 6052 */ 'V', 'C', 'M', 'P', 'G', 'T', 'U', 'W', 0,
  /* 6061 */ 'V', 'M', 'A', 'X', 'U', 'W', 0,
  /* 6068 */ 'D', 'I', 'V', 'W', 0,
  /* 6073 */ 'C', 'N', 'T', 'L', 'Z', 'W', 0,
  /* 6080 */ 'L', 'X', 'V', 'D', '2', 'X', 0,
  /* 6087 */ 'S', 'T', 'X', 'V', 'D', '2', 'X', 0,
  /* 6095 */ 'L', 'X', 'V', 'W', '4', 'X', 0,
  /* 6102 */ 'S', 'T', 'X', 'V', 'W', '4', 'X', 0,
  /* 6110 */ 'L', 'H', 'A', 'X', 0,
  /* 6115 */ 'L', 'F', 'I', 'W', 'A', 'X', 0,
  /* 6122 */ 'L', 'W', 'A', 'X', 0,
  /* 6127 */ 'L', 'V', 'E', 'B', 'X', 0,
  /* 6133 */ 'S', 'T', 'V', 'E', 'B', 'X', 0,
  /* 6140 */ 'S', 'T', 'B', 'X', 0,
  /* 6145 */ 'S', 'T', 'D', 'C', 'X', 0,
  /* 6151 */ 'S', 'T', 'W', 'C', 'X', 0,
  /* 6157 */ 'L', 'F', 'D', 'X', 0,
  /* 6162 */ 'S', 'T', 'F', 'D', 'X', 0,
  /* 6168 */ 'L', 'D', 'X', 0,
  /* 6172 */ 'L', 'X', 'S', 'D', 'X', 0,
  /* 6178 */ 'S', 'T', 'X', 'S', 'D', 'X', 0,
  /* 6185 */ 'S', 'T', 'D', 'X', 0,
  /* 6190 */ 'L', 'V', 'E', 'H', 'X', 0,
  /* 6196 */ 'S', 'T', 'V', 'E', 'H', 'X', 0,
  /* 6203 */ 'S', 'T', 'H', 'X', 0,
  /* 6208 */ 'V', 'U', 'P', 'K', 'H', 'P', 'X', 0,
  /* 6216 */ 'V', 'P', 'K', 'P', 'X', 0,
  /* 6222 */ 'V', 'U', 'P', 'K', 'L', 'P', 'X', 0,
  /* 6230 */ 'L', 'D', 'A', 'R', 'X', 0,
  /* 6236 */ 'L', 'W', 'A', 'R', 'X', 0,
  /* 6242 */ 'L', 'D', 'B', 'R', 'X', 0,
  /* 6248 */ 'S', 'T', 'D', 'B', 'R', 'X', 0,
  /* 6255 */ 'L', 'H', 'B', 'R', 'X', 0,
  /* 6261 */ 'S', 'T', 'H', 'B', 'R', 'X', 0,
  /* 6268 */ 'L', 'W', 'B', 'R', 'X', 0,
  /* 6274 */ 'S', 'T', 'W', 'B', 'R', 'X', 0,
  /* 6281 */ 'L', 'X', 'V', 'D', 'S', 'X', 0,
  /* 6288 */ 'V', 'C', 'F', 'S', 'X', 0,
  /* 6294 */ 'L', 'F', 'S', 'X', 0,
  /* 6299 */ 'S', 'T', 'F', 'S', 'X', 0,
  /* 6305 */ 'L', 'H', 'A', 'U', 'X', 0,
  /* 6311 */ 'L', 'W', 'A', 'U', 'X', 0,
  /* 6317 */ 'S', 'T', 'B', 'U', 'X', 0,
  /* 6323 */ 'L', 'F', 'D', 'U', 'X', 0,
  /* 6329 */ 'S', 'T', 'F', 'D', 'U', 'X', 0,
  /* 6336 */ 'L', 'D', 'U', 'X', 0,
  /* 6341 */ 'S', 'T', 'D', 'U', 'X', 0,
  /* 6347 */ 'V', 'C', 'F', 'U', 'X', 0,
  /* 6353 */ 'S', 'T', 'H', 'U', 'X', 0,
  /* 6359 */ 'L', 'F', 'S', 'U', 'X', 0,
  /* 6365 */ 'S', 'T', 'F', 'S', 'U', 'X', 0,
  /* 6372 */ 'S', 'T', 'W', 'U', 'X', 0,
  /* 6378 */ 'L', 'B', 'Z', 'U', 'X', 0,
  /* 6384 */ 'L', 'H', 'Z', 'U', 'X', 0,
  /* 6390 */ 'L', 'W', 'Z', 'U', 'X', 0,
  /* 6396 */ 'L', 'V', 'X', 0,
  /* 6400 */ 'S', 'T', 'V', 'X', 0,
  /* 6405 */ 'L', 'V', 'E', 'W', 'X', 0,
  /* 6411 */ 'S', 'T', 'V', 'E', 'W', 'X', 0,
  /* 6418 */ 'S', 'T', 'F', 'I', 'W', 'X', 0,
  /* 6425 */ 'S', 'T', 'W', 'X', 0,
  /* 6430 */ 'L', 'B', 'Z', 'X', 0,
  /* 6435 */ 'L', 'H', 'Z', 'X', 0,
  /* 6440 */ 'L', 'F', 'I', 'W', 'Z', 'X', 0,
  /* 6447 */ 'L', 'W', 'Z', 'X', 0,
  /* 6452 */ 'C', 'O', 'P', 'Y', 0,
  /* 6457 */ 'D', 'C', 'B', 'Z', 0,
  /* 6462 */ 'L', 'B', 'Z', 0,
  /* 6466 */ 'B', 'D', 'Z', 0,
  /* 6470 */ 'F', 'C', 'T', 'I', 'D', 'Z', 0,
  /* 6477 */ 'L', 'H', 'Z', 0,
  /* 6481 */ 'V', 'R', 'F', 'I', 'Z', 0,
  /* 6487 */ 'X', 'S', 'R', 'D', 'P', 'I', 'Z', 0,
  /* 6495 */ 'X', 'V', 'R', 'D', 'P', 'I', 'Z', 0,
  /* 6503 */ 'X', 'V', 'R', 'S', 'P', 'I', 'Z', 0,
  /* 6511 */ 'B', 'D', 'N', 'Z', 0,
  /* 6516 */ 'F', 'C', 'T', 'I', 'D', 'U', 'Z', 0,
  /* 6524 */ 'F', 'C', 'T', 'I', 'W', 'U', 'Z', 0,
  /* 6532 */ 'F', 'C', 'T', 'I', 'W', 'Z', 0,
  /* 6539 */ 'L', 'W', 'Z', 0,
  /* 6543 */ 'A', 'D', 'D', '8', 'T', 'L', 'S', '_', 0,
  /* 6552 */ 'B', 'L', '8', '_', 'T', 'L', 'S', '_', 0,
  /* 6561 */ 'L', 'D', 't', 'o', 'c', 0,
  /* 6567 */ 'L', 'W', 'Z', 't', 'o', 'c', 0,
  /* 6574 */ 'L', 'D', 'i', 'n', 't', 'o', '_', 't', 'o', 'c', 0,
  /* 6585 */ 'X', 'X', 'L', 'O', 'R', 'f', 0,
  /* 6592 */ 'T', 'C', 'R', 'E', 'T', 'U', 'R', 'N', 'a', 'i', 0,
  /* 6603 */ 'T', 'C', 'R', 'E', 'T', 'U', 'R', 'N', 'd', 'i', 0,
  /* 6614 */ 'T', 'C', 'R', 'E', 'T', 'U', 'R', 'N', 'r', 'i', 0,
  /* 6625 */ 'B', 'D', 'Z', 'L', 'A', 'm', 0,
  /* 6632 */ 'B', 'D', 'N', 'Z', 'L', 'A', 'm', 0,
  /* 6640 */ 'B', 'D', 'Z', 'A', 'm', 0,
  /* 6646 */ 'B', 'D', 'N', 'Z', 'A', 'm', 0,
  /* 6653 */ 'B', 'D', 'Z', 'L', 'R', 'L', 'm', 0,
  /* 6661 */ 'B', 'D', 'N', 'Z', 'L', 'R', 'L', 'm', 0,
  /* 6670 */ 'B', 'D', 'Z', 'L', 'm', 0,
  /* 6676 */ 'B', 'D', 'N', 'Z', 'L', 'm', 0,
  /* 6683 */ 'B', 'D', 'Z', 'L', 'R', 'm', 0,
  /* 6690 */ 'B', 'D', 'N', 'Z', 'L', 'R', 'm', 0,
  /* 6698 */ 'B', 'D', 'Z', 'm', 0,
  /* 6703 */ 'B', 'D', 'N', 'Z', 'm', 0,
  /* 6709 */ 'B', 'C', 'C', 'T', 'R', 'L', '8', 'n', 0,
  /* 6718 */ 'B', 'C', 'C', 'T', 'R', '8', 'n', 0,
  /* 6726 */ 'B', 'C', 'n', 0,
  /* 6730 */ 'B', 'C', 'L', 'n', 0,
  /* 6735 */ 'B', 'C', 'L', 'R', 'L', 'n', 0,
  /* 6742 */ 'B', 'C', 'C', 'T', 'R', 'L', 'n', 0,
  /* 6750 */ 'B', 'C', 'L', 'R', 'n', 0,
  /* 6756 */ 'B', 'C', 'C', 'T', 'R', 'n', 0,
  /* 6763 */ 'E', 'X', 'T', 'S', 'W', '_', '3', '2', '_', '6', '4', 'o', 0,
  /* 6776 */ 'A', 'D', 'D', '4', 'o', 0,
  /* 6782 */ 'E', 'X', 'T', 'S', 'B', '8', 'o', 0,
  /* 6790 */ 'A', 'D', 'D', 'C', '8', 'o', 0,
  /* 6797 */ 'A', 'N', 'D', 'C', '8', 'o', 0,
  /* 6804 */ 'S', 'U', 'B', 'F', 'C', '8', 'o', 0,
  /* 6812 */ 'O', 'R', 'C', '8', 'o', 0,
  /* 6818 */ 'A', 'D', 'D', '8', 'o', 0,
  /* 6824 */ 'N', 'A', 'N', 'D', '8', 'o', 0,
  /* 6831 */ 'A', 'D', 'D', 'E', '8', 'o', 0,
  /* 6838 */ 'S', 'U', 'B', 'F', 'E', '8', 'o', 0,
  /* 6846 */ 'A', 'D', 'D', 'M', 'E', '8', 'o', 0,
  /* 6854 */ 'S', 'U', 'B', 'F', 'M', 'E', '8', 'o', 0,
  /* 6863 */ 'A', 'D', 'D', 'Z', 'E', '8', 'o', 0,
  /* 6871 */ 'S', 'U', 'B', 'F', 'Z', 'E', '8', 'o', 0,
  /* 6880 */ 'S', 'U', 'B', 'F', '8', 'o', 0,
  /* 6887 */ 'N', 'E', 'G', '8', 'o', 0,
  /* 6893 */ 'E', 'X', 'T', 'S', 'H', '8', 'o', 0,
  /* 6901 */ 'R', 'L', 'W', 'I', 'M', 'I', '8', 'o', 0,
  /* 6910 */ 'R', 'L', 'W', 'I', 'N', 'M', '8', 'o', 0,
  /* 6919 */ 'N', 'O', 'R', '8', 'o', 0,
  /* 6925 */ 'X', 'O', 'R', '8', 'o', 0,
  /* 6931 */ 'E', 'Q', 'V', '8', 'o', 0,
  /* 6937 */ 'V', 'C', 'M', 'P', 'G', 'T', 'S', 'B', 'o', 0,
  /* 6947 */ 'E', 'X', 'T', 'S', 'B', 'o', 0,
  /* 6954 */ 'V', 'C', 'M', 'P', 'E', 'Q', 'U', 'B', 'o', 0,
  /* 6964 */ 'F', 'S', 'U', 'B', 'o', 0,
  /* 6970 */ 'F', 'M', 'S', 'U', 'B', 'o', 0,
  /* 6977 */ 'F', 'N', 'M', 'S', 'U', 'B', 'o', 0,
  /* 6985 */ 'V', 'C', 'M', 'P', 'G', 'T', 'U', 'B', 'o', 0,
  /* 6995 */ 'A', 'D', 'D', 'C', 'o', 0,
  /* 7001 */ 'A', 'N', 'D', 'C', 'o', 0,
  /* 7007 */ 'S', 'U', 'B', 'F', 'C', 'o', 0,
  /* 7014 */ 'S', 'U', 'B', 'I', 'C', 'o', 0,
  /* 7021 */ 'A', 'D', 'D', 'I', 'C', 'o', 0,
  /* 7028 */ 'R', 'L', 'D', 'I', 'C', 'o', 0,
  /* 7035 */ 'O', 'R', 'C', 'o', 0,
  /* 7040 */ 'S', 'R', 'A', 'D', 'o', 0,
  /* 7046 */ 'F', 'A', 'D', 'D', 'o', 0,
  /* 7052 */ 'F', 'M', 'A', 'D', 'D', 'o', 0,
  /* 7059 */ 'F', 'N', 'M', 'A', 'D', 'D', 'o', 0,
  /* 7067 */ 'F', 'N', 'E', 'G', 'D', 'o', 0,
  /* 7074 */ 'M', 'U', 'L', 'H', 'D', 'o', 0,
  /* 7081 */ 'F', 'C', 'F', 'I', 'D', 'o', 0,
  /* 7088 */ 'F', 'C', 'T', 'I', 'D', 'o', 0,
  /* 7095 */ 'F', 'S', 'E', 'L', 'D', 'o', 0,
  /* 7102 */ 'M', 'U', 'L', 'L', 'D', 'o', 0,
  /* 7109 */ 'S', 'L', 'D', 'o', 0,
  /* 7114 */ 'F', 'R', 'I', 'M', 'D', 'o', 0,
  /* 7121 */ 'N', 'A', 'N', 'D', 'o', 0,
  /* 7127 */ 'F', 'C', 'P', 'S', 'G', 'N', 'D', 'o', 0,
  /* 7136 */ 'F', 'R', 'I', 'N', 'D', 'o', 0,
  /* 7143 */ 'F', 'R', 'I', 'P', 'D', 'o', 0,
  /* 7150 */ 'S', 'R', 'D', 'o', 0,
  /* 7155 */ 'F', 'A', 'B', 'S', 'D', 'o', 0,
  /* 7162 */ 'F', 'N', 'A', 'B', 'S', 'D', 'o', 0,
  /* 7170 */ 'D', 'I', 'V', 'D', 'o', 0,
  /* 7176 */ 'F', 'R', 'I', 'Z', 'D', 'o', 0,
  /* 7183 */ 'C', 'N', 'T', 'L', 'Z', 'D', 'o', 0,
  /* 7191 */ 'A', 'D', 'D', 'E', 'o', 0,
  /* 7197 */ 'S', 'U', 'B', 'F', 'E', 'o', 0,
  /* 7204 */ 'A', 'D', 'D', 'M', 'E', 'o', 0,
  /* 7211 */ 'S', 'U', 'B', 'F', 'M', 'E', 'o', 0,
  /* 7219 */ 'F', 'R', 'E', 'o', 0,
  /* 7224 */ 'F', 'R', 'S', 'Q', 'R', 'T', 'E', 'o', 0,
  /* 7233 */ 'A', 'D', 'D', 'Z', 'E', 'o', 0,
  /* 7240 */ 'S', 'U', 'B', 'F', 'Z', 'E', 'o', 0,
  /* 7248 */ 'S', 'U', 'B', 'F', 'o', 0,
  /* 7254 */ 'N', 'E', 'G', 'o', 0,
  /* 7259 */ 'V', 'C', 'M', 'P', 'G', 'T', 'S', 'H', 'o', 0,
  /* 7269 */ 'E', 'X', 'T', 'S', 'H', 'o', 0,
  /* 7276 */ 'V', 'C', 'M', 'P', 'E', 'Q', 'U', 'H', 'o', 0,
  /* 7286 */ 'V', 'C', 'M', 'P', 'G', 'T', 'U', 'H', 'o', 0,
  /* 7296 */ 'S', 'R', 'A', 'D', 'I', 'o', 0,
  /* 7303 */ 'C', 'L', 'R', 'L', 'S', 'L', 'D', 'I', 'o', 0,
  /* 7313 */ 'E', 'X', 'T', 'L', 'D', 'I', 'o', 0,
  /* 7321 */ 'A', 'N', 'D', 'I', 'o', 0,
  /* 7327 */ 'C', 'L', 'R', 'R', 'D', 'I', 'o', 0,
  /* 7335 */ 'I', 'N', 'S', 'R', 'D', 'I', 'o', 0,
  /* 7343 */ 'R', 'O', 'T', 'R', 'D', 'I', 'o', 0,
  /* 7351 */ 'E', 'X', 'T', 'R', 'D', 'I', 'o', 0,
  /* 7359 */ 'R', 'L', 'D', 'I', 'M', 'I', 'o', 0,
  /* 7367 */ 'R', 'L', 'W', 'I', 'M', 'I', 'o', 0,
  /* 7375 */ 'S', 'R', 'A', 'W', 'I', 'o', 0,
  /* 7382 */ 'C', 'L', 'R', 'L', 'S', 'L', 'W', 'I', 'o', 0,
  /* 7392 */ 'I', 'N', 'S', 'L', 'W', 'I', 'o', 0,
  /* 7400 */ 'E', 'X', 'T', 'L', 'W', 'I', 'o', 0,
  /* 7408 */ 'C', 'L', 'R', 'R', 'W', 'I', 'o', 0,
  /* 7416 */ 'I', 'N', 'S', 'R', 'W', 'I', 'o', 0,
  /* 7424 */ 'R', 'O', 'T', 'R', 'W', 'I', 'o', 0,
  /* 7432 */ 'E', 'X', 'T', 'R', 'W', 'I', 'o', 0,
  /* 7440 */ 'R', 'L', 'D', 'C', 'L', 'o', 0,
  /* 7447 */ 'R', 'L', 'D', 'I', 'C', 'L', 'o', 0,
  /* 7455 */ 'F', 'M', 'U', 'L', 'o', 0,
  /* 7461 */ 'R', 'L', 'W', 'I', 'N', 'M', 'o', 0,
  /* 7469 */ 'R', 'L', 'W', 'N', 'M', 'o', 0,
  /* 7476 */ 'X', 'V', 'C', 'M', 'P', 'G', 'E', 'D', 'P', 'o', 0,
  /* 7487 */ 'X', 'V', 'C', 'M', 'P', 'E', 'Q', 'D', 'P', 'o', 0,
  /* 7498 */ 'X', 'V', 'C', 'M', 'P', 'G', 'T', 'D', 'P', 'o', 0,
  /* 7509 */ 'V', 'C', 'M', 'P', 'B', 'F', 'P', 'o', 0,
  /* 7518 */ 'V', 'C', 'M', 'P', 'G', 'E', 'F', 'P', 'o', 0,
  /* 7528 */ 'V', 'C', 'M', 'P', 'E', 'Q', 'F', 'P', 'o', 0,
  /* 7538 */ 'V', 'C', 'M', 'P', 'G', 'T', 'F', 'P', 'o', 0,
  /* 7548 */ 'X', 'V', 'C', 'M', 'P', 'G', 'E', 'S', 'P', 'o', 0,
  /* 7559 */ 'X', 'V', 'C', 'M', 'P', 'E', 'Q', 'S', 'P', 'o', 0,
  /* 7570 */ 'F', 'R', 'S', 'P', 'o', 0,
  /* 7576 */ 'X', 'V', 'C', 'M', 'P', 'G', 'T', 'S', 'P', 'o', 0,
  /* 7587 */ 'R', 'L', 'D', 'C', 'R', 'o', 0,
  /* 7594 */ 'R', 'L', 'D', 'I', 'C', 'R', 'o', 0,
  /* 7602 */ 'F', 'M', 'R', 'o', 0,
  /* 7607 */ 'N', 'O', 'R', 'o', 0,
  /* 7612 */ 'X', 'O', 'R', 'o', 0,
  /* 7617 */ 'F', 'S', 'U', 'B', 'S', 'o', 0,
  /* 7624 */ 'F', 'M', 'S', 'U', 'B', 'S', 'o', 0,
  /* 7632 */ 'F', 'N', 'M', 'S', 'U', 'B', 'S', 'o', 0,
  /* 7641 */ 'F', 'A', 'D', 'D', 'S', 'o', 0,
  /* 7648 */ 'F', 'M', 'A', 'D', 'D', 'S', 'o', 0,
  /* 7656 */ 'F', 'N', 'M', 'A', 'D', 'D', 'S', 'o', 0,
  /* 7665 */ 'F', 'C', 'F', 'I', 'D', 'S', 'o', 0,
  /* 7673 */ 'F', 'R', 'E', 'S', 'o', 0,
  /* 7679 */ 'F', 'R', 'S', 'Q', 'R', 'T', 'E', 'S', 'o', 0,
  /* 7689 */ 'F', 'N', 'E', 'G', 'S', 'o', 0,
  /* 7696 */ 'A', 'N', 'D', 'I', 'S', 'o', 0,
  /* 7703 */ 'F', 'S', 'E', 'L', 'S', 'o', 0,
  /* 7710 */ 'F', 'M', 'U', 'L', 'S', 'o', 0,
  /* 7717 */ 'F', 'R', 'I', 'M', 'S', 'o', 0,
  /* 7724 */ 'F', 'C', 'P', 'S', 'G', 'N', 'S', 'o', 0,
  /* 7733 */ 'F', 'R', 'I', 'N', 'S', 'o', 0,
  /* 7740 */ 'F', 'R', 'I', 'P', 'S', 'o', 0,
  /* 7747 */ 'F', 'A', 'B', 'S', 'S', 'o', 0,
  /* 7754 */ 'F', 'N', 'A', 'B', 'S', 'S', 'o', 0,
  /* 7762 */ 'F', 'S', 'Q', 'R', 'T', 'S', 'o', 0,
  /* 7770 */ 'F', 'C', 'F', 'I', 'D', 'U', 'S', 'o', 0,
  /* 7779 */ 'F', 'D', 'I', 'V', 'S', 'o', 0,
  /* 7786 */ 'F', 'R', 'I', 'Z', 'S', 'o', 0,
  /* 7793 */ 'F', 'S', 'Q', 'R', 'T', 'o', 0,
  /* 7800 */ 'M', 'U', 'L', 'H', 'D', 'U', 'o', 0,
  /* 7808 */ 'F', 'C', 'F', 'I', 'D', 'U', 'o', 0,
  /* 7816 */ 'D', 'I', 'V', 'D', 'U', 'o', 0,
  /* 7823 */ 'M', 'U', 'L', 'H', 'W', 'U', 'o', 0,
  /* 7831 */ 'D', 'I', 'V', 'W', 'U', 'o', 0,
  /* 7838 */ 'F', 'D', 'I', 'V', 'o', 0,
  /* 7844 */ 'E', 'Q', 'V', 'o', 0,
  /* 7849 */ 'S', 'R', 'A', 'W', 'o', 0,
  /* 7855 */ 'M', 'U', 'L', 'H', 'W', 'o', 0,
  /* 7862 */ 'F', 'C', 'T', 'I', 'W', 'o', 0,
  /* 7869 */ 'M', 'U', 'L', 'L', 'W', 'o', 0,
  /* 7876 */ 'S', 'L', 'W', 'o', 0,
  /* 7881 */ 'S', 'R', 'W', 'o', 0,
  /* 7886 */ 'V', 'C', 'M', 'P', 'G', 'T', 'S', 'W', 'o', 0,
  /* 7896 */ 'E', 'X', 'T', 'S', 'W', 'o', 0,
  /* 7903 */ 'V', 'C', 'M', 'P', 'E', 'Q', 'U', 'W', 'o', 0,
  /* 7913 */ 'V', 'C', 'M', 'P', 'G', 'T', 'U', 'W', 'o', 0,
  /* 7923 */ 'D', 'I', 'V', 'W', 'o', 0,
  /* 7929 */ 'C', 'N', 'T', 'L', 'Z', 'W', 'o', 0,
  /* 7937 */ 'F', 'C', 'T', 'I', 'D', 'Z', 'o', 0,
  /* 7945 */ 'F', 'C', 'T', 'I', 'D', 'U', 'Z', 'o', 0,
  /* 7954 */ 'F', 'C', 'T', 'I', 'W', 'U', 'Z', 'o', 0,
  /* 7963 */ 'F', 'C', 'T', 'I', 'W', 'Z', 'o', 0,
  /* 7971 */ 'B', 'D', 'Z', 'L', 'A', 'p', 0,
  /* 7978 */ 'B', 'D', 'N', 'Z', 'L', 'A', 'p', 0,
  /* 7986 */ 'B', 'D', 'Z', 'A', 'p', 0,
  /* 7992 */ 'B', 'D', 'N', 'Z', 'A', 'p', 0,
  /* 7999 */ 'B', 'D', 'Z', 'L', 'R', 'L', 'p', 0,
  /* 8007 */ 'B', 'D', 'N', 'Z', 'L', 'R', 'L', 'p', 0,
  /* 8016 */ 'B', 'D', 'Z', 'L', 'p', 0,
  /* 8022 */ 'B', 'D', 'N', 'Z', 'L', 'p', 0,
  /* 8029 */ 'B', 'D', 'Z', 'L', 'R', 'p', 0,
  /* 8036 */ 'B', 'D', 'N', 'Z', 'L', 'R', 'p', 0,
  /* 8044 */ 'B', 'D', 'Z', 'p', 0,
  /* 8049 */ 'B', 'D', 'N', 'Z', 'p', 0,
  /* 8055 */ 'M', 'T', 'C', 'T', 'R', '8', 'l', 'o', 'o', 'p', 0,
  /* 8066 */ 'M', 'T', 'C', 'T', 'R', 'l', 'o', 'o', 'p', 0,
  /* 8076 */ 'E', 'H', '_', 'S', 'j', 'L', 'j', '_', 'S', 'e', 't', 'u', 'p', 0,
  /* 8090 */ 'B', 'C', 'L', 'a', 'l', 'w', 'a', 'y', 's', 0,
  /* 8100 */ 'M', 'F', 'V', 'R', 'S', 'A', 'V', 'E', 'v', 0,
  /* 8110 */ 'M', 'T', 'V', 'R', 'S', 'A', 'V', 'E', 'v', 0,
  /* 8120 */ 'L', 'A', 'x', 0,
  /* 8124 */ 'F', 'A', 'D', 'D', 'r', 't', 'z', 0,
};

extern const unsigned PPCInstrNameIndices[] = {
    2992U, 3502U, 3550U, 3175U, 3166U, 3214U, 2653U, 2668U, 
    2605U, 2682U, 5304U, 2512U, 2429U, 6452U, 2473U, 5686U, 
    2317U, 3607U, 5645U, 2355U, 631U, 5229U, 6776U, 954U, 
    5237U, 6543U, 6818U, 2062U, 905U, 6790U, 6995U, 2442U, 
    965U, 6831U, 7191U, 2917U, 1077U, 2100U, 924U, 7021U, 
    5207U, 1411U, 1761U, 55U, 1745U, 1719U, 1732U, 1708U, 
    3363U, 267U, 3329U, 227U, 3340U, 240U, 3320U, 2480U, 
    978U, 6846U, 7204U, 2582U, 993U, 6863U, 7233U, 3566U, 
    4639U, 2295U, 960U, 6825U, 2070U, 911U, 6797U, 7001U, 
    7696U, 1674U, 7321U, 1667U, 5615U, 1430U, 5630U, 1446U, 
    7122U, 779U, 168U, 456U, 1209U, 702U, 91U, 379U, 
    1136U, 743U, 132U, 420U, 1175U, 722U, 111U, 399U, 
    1155U, 819U, 208U, 496U, 1247U, 682U, 71U, 359U, 
    1104U, 799U, 188U, 476U, 1228U, 763U, 152U, 440U, 
    1194U, 1831U, 1684U, 2055U, 2058U, 1699U, 4890U, 1389U, 
    3267U, 1300U, 3148U, 1791U, 4750U, 3231U, 4884U, 1382U, 
    6718U, 3260U, 1292U, 6709U, 6742U, 6756U, 3144U, 4745U, 
    3225U, 6735U, 6750U, 8090U, 6730U, 4878U, 1376U, 3253U, 
    1285U, 6726U, 6511U, 1620U, 1819U, 6646U, 7992U, 3307U, 
    1803U, 6632U, 7978U, 4772U, 1342U, 3245U, 6661U, 8007U, 
    6690U, 8036U, 6676U, 8022U, 6703U, 8049U, 6466U, 1610U, 
    1814U, 6640U, 7986U, 3302U, 1797U, 6625U, 7971U, 4766U, 
    1335U, 3238U, 6653U, 7999U, 6683U, 8029U, 6670U, 8016U, 
    6698U, 8044U, 3140U, 1275U, 4325U, 5260U, 5245U, 6552U, 
    1781U, 875U, 4316U, 4740U, 3219U, 5253U, 2929U, 7303U, 
    3079U, 7382U, 2960U, 7327U, 3108U, 7408U, 2350U, 2954U, 
    2276U, 2922U, 5906U, 3072U, 5931U, 3102U, 2422U, 7183U, 
    6073U, 7929U, 5554U, 5561U, 2306U, 2075U, 5846U, 2299U, 
    4807U, 4818U, 2172U, 5578U, 5570U, 4834U, 1682U, 2595U, 
    2896U, 5707U, 5549U, 5717U, 6457U, 3296U, 2411U, 5786U, 
    7816U, 7170U, 6068U, 5820U, 7831U, 7923U, 5334U, 3207U, 
    5713U, 515U, 5724U, 521U, 5735U, 536U, 5730U, 529U, 
    2163U, 939U, 324U, 596U, 342U, 614U, 8076U, 3583U, 
    5848U, 1504U, 6931U, 7844U, 2938U, 7313U, 3095U, 7400U, 
    2981U, 7351U, 3129U, 7432U, 1952U, 887U, 545U, 6782U, 
    6947U, 2817U, 1065U, 558U, 6893U, 7269U, 5973U, 584U, 
    6763U, 7896U, 2379U, 7155U, 5321U, 7747U, 2213U, 4980U, 
    7641U, 7046U, 8124U, 2252U, 5001U, 7665U, 5770U, 5361U, 
    7770U, 7808U, 7081U, 2404U, 5385U, 2330U, 7127U, 5284U, 
    7724U, 2258U, 6516U, 7945U, 6470U, 7937U, 7088U, 5879U, 
    6524U, 7954U, 6532U, 7963U, 7862U, 5841U, 5408U, 7779U, 
    7838U, 2218U, 4986U, 7648U, 7052U, 4790U, 7602U, 2025U, 
    4965U, 7624U, 6970U, 3280U, 5272U, 7710U, 7455U, 2385U, 
    7162U, 5327U, 7754U, 2240U, 7067U, 5115U, 7689U, 2224U, 
    4993U, 7656U, 7059U, 2031U, 4972U, 7632U, 6977U, 2493U, 
    5087U, 7673U, 7219U, 2286U, 7114U, 5278U, 7717U, 2338U, 
    7136U, 5292U, 7733U, 2344U, 7143U, 5298U, 7740U, 2416U, 
    7176U, 5543U, 7786U, 4543U, 7570U, 2504U, 5092U, 7679U, 
    7224U, 2264U, 7095U, 5223U, 7703U, 5701U, 5354U, 7762U, 
    7793U, 2020U, 4959U, 7617U, 6964U, 4729U, 296U, 4716U, 
    281U, 3594U, 2901U, 3088U, 7392U, 2967U, 7335U, 3115U, 
    7416U, 3191U, 1279U, 2151U, 1782U, 8120U, 6462U, 1605U, 
    5826U, 1486U, 6378U, 1560U, 6430U, 1587U, 2267U, 6230U, 
    6242U, 5777U, 6336U, 6168U, 3351U, 253U, 6574U, 6561U, 
    5677U, 3049U, 3313U, 2231U, 5752U, 6323U, 6157U, 6115U, 
    6440U, 5106U, 5797U, 6359U, 6294U, 1704U, 870U, 5742U, 
    1462U, 6305U, 1532U, 6110U, 1514U, 6255U, 6477U, 1615U, 
    5831U, 1492U, 6384U, 1567U, 6435U, 1593U, 2999U, 1086U, 
    5213U, 1418U, 5922U, 6127U, 6190U, 6405U, 3275U, 4869U, 
    6396U, 3285U, 1810U, 6236U, 6311U, 6122U, 316U, 309U, 
    6268U, 6539U, 1626U, 5836U, 1498U, 6390U, 1574U, 6447U, 
    1599U, 6567U, 6172U, 6080U, 6281U, 6095U, 2618U, 4670U, 
    1317U, 4897U, 1397U, 5101U, 4756U, 1323U, 4857U, 2623U, 
    1014U, 4845U, 1965U, 894U, 2522U, 8100U, 4682U, 2157U, 
    2637U, 1030U, 4903U, 1404U, 8055U, 8066U, 0U, 48U, 
    2643U, 4761U, 1329U, 4863U, 2372U, 2630U, 1022U, 4851U, 
    2531U, 8110U, 4689U, 2246U, 5763U, 7800U, 7074U, 5873U, 
    5808U, 7823U, 7855U, 2270U, 7102U, 2996U, 1083U, 5900U, 
    7869U, 4779U, 1350U, 2301U, 959U, 6824U, 7121U, 2649U, 
    1060U, 6887U, 7254U, 4321U, 838U, 850U, 4803U, 1362U, 
    6919U, 7607U, 4797U, 1363U, 6920U, 2174U, 949U, 6812U, 
    7035U, 3045U, 1099U, 5218U, 1424U, 7608U, 2392U, 6001U, 
    5656U, 5665U, 4696U, 5589U, 2540U, 3153U, 7440U, 4664U, 
    7587U, 2106U, 3159U, 571U, 7447U, 4675U, 7594U, 7028U, 
    3002U, 7359U, 3009U, 1090U, 6901U, 7367U, 3483U, 1309U, 
    6910U, 7461U, 3490U, 7469U, 2974U, 7343U, 3122U, 7424U, 
    2205U, 636U, 1037U, 659U, 1123U, 2178U, 649U, 1050U, 
    672U, 1265U, 2193U, 1775U, 2461U, 2447U, 2497U, 2282U, 
    2933U, 7307U, 7109U, 5918U, 3083U, 7386U, 7876U, 4707U, 
    5603U, 2569U, 2208U, 2911U, 7296U, 7040U, 5853U, 3058U, 
    7375U, 7849U, 2375U, 2969U, 7337U, 7150U, 5937U, 3117U, 
    7418U, 7881U, 1977U, 900U, 5747U, 1468U, 6317U, 1539U, 
    6140U, 1520U, 2400U, 6248U, 6145U, 5781U, 6341U, 6185U, 
    2235U, 5757U, 6329U, 6162U, 6418U, 5110U, 5802U, 6365U, 
    6299U, 2837U, 1072U, 6261U, 5792U, 1474U, 6353U, 1546U, 
    6203U, 1526U, 5926U, 6133U, 6196U, 6411U, 6400U, 3290U, 
    6009U, 1509U, 6274U, 6151U, 5815U, 1480U, 6372U, 1553U, 
    6425U, 1581U, 6178U, 6087U, 6102U, 2600U, 1008U, 6880U, 
    2088U, 917U, 6804U, 7007U, 2455U, 971U, 6838U, 7197U, 
    2112U, 931U, 2486U, 985U, 6854U, 7211U, 2588U, 1000U, 
    6871U, 7240U, 7248U, 2906U, 2094U, 7014U, 5201U, 2146U, 
    1853U, 880U, 1687U, 862U, 4874U, 1372U, 6592U, 1631U, 
    6603U, 1643U, 6614U, 1655U, 2397U, 2988U, 2467U, 3184U, 
    2143U, 3616U, 5990U, 3136U, 2555U, 4654U, 6021U, 4205U, 
    4926U, 5159U, 5431U, 3392U, 4951U, 3436U, 5184U, 3536U, 
    5455U, 2312U, 2082U, 1896U, 2761U, 5941U, 1989U, 2849U, 
    6029U, 6288U, 32U, 6347U, 40U, 4173U, 7509U, 4261U, 
    7528U, 2011U, 6954U, 2871U, 7276U, 6043U, 7903U, 4220U, 
    7518U, 4270U, 7538U, 1943U, 6937U, 2808U, 7259U, 5964U, 
    7886U, 2038U, 6985U, 2880U, 7286U, 6052U, 7913U, 5529U, 
    14U, 5536U, 23U, 4235U, 4212U, 4197U, 4279U, 1958U, 
    2823U, 5979U, 2047U, 2889U, 6061U, 5138U, 5148U, 4254U, 
    1928U, 2793U, 5957U, 1996U, 2856U, 6036U, 3426U, 1839U, 
    2710U, 5858U, 1846U, 2717U, 5885U, 3375U, 3409U, 5167U, 
    3400U, 3444U, 5192U, 1874U, 2739U, 1981U, 2841U, 1935U, 
    2800U, 2003U, 2863U, 4181U, 4813U, 4823U, 3496U, 6216U, 
    5338U, 5369U, 5346U, 5392U, 3512U, 5377U, 3520U, 5400U, 
    4229U, 3453U, 3544U, 4286U, 6481U, 1859U, 2724U, 5912U, 
    4244U, 3196U, 3276U, 1864U, 3016U, 2729U, 3589U, 5917U, 
    1970U, 2830U, 1911U, 2776U, 5948U, 5986U, 4870U, 1833U, 
    2704U, 5852U, 1869U, 2734U, 3602U, 5936U, 6013U, 4190U, 
    4918U, 5130U, 5423U, 3384U, 4943U, 3418U, 5176U, 3528U, 
    5447U, 5414U, 4909U, 5121U, 4934U, 5439U, 6208U, 1903U, 
    2768U, 6222U, 1920U, 2785U, 4840U, 7U, 1825U, 2696U, 
    5074U, 1882U, 2747U, 5584U, 4830U, 1367U, 6925U, 3044U, 
    1098U, 5217U, 1423U, 7612U, 4030U, 3721U, 3975U, 4094U, 
    3939U, 4515U, 5008U, 5463U, 5041U, 5496U, 3984U, 3737U, 
    3757U, 4103U, 3685U, 3919U, 4157U, 3959U, 3643U, 3877U, 
    3839U, 4012U, 3823U, 3663U, 3897U, 3621U, 3855U, 3023U, 
    2119U, 3459U, 4292U, 6487U, 3787U, 3801U, 4056U, 3705U, 
    4111U, 4065U, 4038U, 4557U, 3729U, 4383U, 4002U, 7487U, 
    4533U, 7559U, 3777U, 7476U, 4411U, 7548U, 4046U, 7498U, 
    4565U, 7576U, 3949U, 4497U, 4524U, 5019U, 5474U, 5052U, 
    5507U, 3993U, 5030U, 5485U, 5063U, 5518U, 3747U, 4391U, 
    4137U, 4611U, 3767U, 4401U, 4147U, 4621U, 4129U, 4603U, 
    3695U, 4365U, 3929U, 4487U, 4165U, 4631U, 3967U, 4507U, 
    3653U, 4344U, 3887U, 4466U, 3847U, 4447U, 4021U, 4548U, 
    3831U, 4439U, 3674U, 4354U, 3908U, 4476U, 3632U, 4333U, 
    3866U, 4455U, 3030U, 2127U, 3467U, 4300U, 6495U, 3794U, 
    4421U, 3037U, 2135U, 3475U, 4308U, 6503U, 3812U, 4428U, 
    4085U, 4585U, 3713U, 4375U, 4120U, 4594U, 4075U, 4575U, 
    2292U, 2067U, 4800U, 4794U, 6585U, 4827U, 5865U, 5892U, 
    2945U, 3201U, 3064U, 5993U, 2054U, 1694U, 4883U, 3259U, 
    3143U, 1785U, 4744U, 3224U, 
};

static inline void InitPPCMCInstrInfo(MCInstrInfo *II) {
  II->InitMCInstrInfo(PPCInsts, PPCInstrNameIndices, PPCInstrNameData, 1068);
}

} // End llvm namespace 
#endif // GET_INSTRINFO_MC_DESC


#ifdef GET_INSTRINFO_HEADER
#undef GET_INSTRINFO_HEADER
namespace llvm {
struct PPCGenInstrInfo : public TargetInstrInfo {
  explicit PPCGenInstrInfo(int SO = -1, int DO = -1);
  virtual ~PPCGenInstrInfo();
};
} // End llvm namespace 
#endif // GET_INSTRINFO_HEADER


#ifdef GET_INSTRINFO_CTOR_DTOR
#undef GET_INSTRINFO_CTOR_DTOR
namespace llvm {
extern const MCInstrDesc PPCInsts[];
extern const unsigned PPCInstrNameIndices[];
extern const char PPCInstrNameData[];
PPCGenInstrInfo::PPCGenInstrInfo(int SO, int DO)
  : TargetInstrInfo(SO, DO) {
  InitMCInstrInfo(PPCInsts, PPCInstrNameIndices, PPCInstrNameData, 1068);
}
PPCGenInstrInfo::~PPCGenInstrInfo() {}
} // End llvm namespace 
#endif // GET_INSTRINFO_CTOR_DTOR

#ifdef GET_INSTRINFO_OPERAND_ENUM
#undef GET_INSTRINFO_OPERAND_ENUM
namespace llvm {namespace PPC {
namespace OpName { 
enum {
OPERAND_LAST
};
} // End namespace OpName
} // End namespace PPC
} // End namespace llvm
#endif //GET_INSTRINFO_OPERAND_ENUM
#ifdef GET_INSTRINFO_NAMED_OPS
#undef GET_INSTRINFO_NAMED_OPS
namespace llvm {namespace PPC {
int16_t getNamedOperandIdx(uint16_t Opcode, uint16_t NamedIdx) {
  return -1;
}
} // End namespace PPC
} // End namespace llvm
#endif //GET_INSTRINFO_NAMED_OPS

#ifdef GET_INSTRINFO_OPERAND_TYPES_ENUM
#undef GET_INSTRINFO_OPERAND_TYPES_ENUM
namespace llvm {namespace PPC {
namespace OpTypes { 
enum OperandType {
  abscalltarget = 0,
  abscondbrtarget = 1,
  absdirectbrtarget = 2,
  calltarget = 3,
  condbrtarget = 4,
  crbitm = 5,
  directbrtarget = 6,
  dispRI = 7,
  dispRIX = 8,
  f32imm = 9,
  f64imm = 10,
  i16imm = 11,
  i1imm = 12,
  i32imm = 13,
  i64imm = 14,
  i8imm = 15,
  imm32SExt16 = 16,
  imm64SExt16 = 17,
  imm64ZExt32 = 18,
  memr = 19,
  memri = 20,
  memrix = 21,
  memrr = 22,
  pred = 23,
  ptr_rc_idx = 24,
  ptr_rc_nor0 = 25,
  s16imm = 26,
  s16imm64 = 27,
  s17imm = 28,
  s17imm64 = 29,
  s5imm = 30,
  tlscall = 31,
  tlscall32 = 32,
  tlsgd = 33,
  tlsgd32 = 34,
  tlsreg = 35,
  tlsreg32 = 36,
  tocentry = 37,
  tocentry32 = 38,
  u16imm = 39,
  u16imm64 = 40,
  u2imm = 41,
  u5imm = 42,
  u6imm = 43,
  OPERAND_TYPE_LIST_END
};
} // End namespace OpTypes
} // End namespace PPC
} // End namespace llvm
#endif // GET_INSTRINFO_OPERAND_TYPES_ENUM
#ifdef GET_INSTRMAP_INFO
#undef GET_INSTRMAP_INFO
namespace llvm {

namespace PPC {

enum IsVSXFMAAlt {
	IsVSXFMAAlt_1
};

enum RC {
	RC_0,
	RC_1
};

// getAltVSXFMAOpcode
int getAltVSXFMAOpcode(uint16_t Opcode) {
static const uint16_t getAltVSXFMAOpcodeTable[][2] = {
  { PPC::XSMADDADP, PPC::XSMADDMDP },
  { PPC::XSMSUBADP, PPC::XSMSUBMDP },
  { PPC::XSNMADDADP, PPC::XSNMADDMDP },
  { PPC::XSNMSUBADP, PPC::XSNMSUBMDP },
  { PPC::XVMADDADP, PPC::XVMADDMDP },
  { PPC::XVMADDASP, PPC::XVMADDMSP },
  { PPC::XVMSUBADP, PPC::XVMSUBMDP },
  { PPC::XVMSUBASP, PPC::XVMSUBMSP },
  { PPC::XVNMADDADP, PPC::XVNMADDMDP },
  { PPC::XVNMADDASP, PPC::XVNMADDMSP },
  { PPC::XVNMSUBADP, PPC::XVNMSUBMDP },
  { PPC::XVNMSUBASP, PPC::XVNMSUBMSP },
}; // End of getAltVSXFMAOpcodeTable

  unsigned mid;
  unsigned start = 0;
  unsigned end = 12;
  while (start < end) {
    mid = start + (end - start)/2;
    if (Opcode == getAltVSXFMAOpcodeTable[mid][0]) {
      break;
    }
    if (Opcode < getAltVSXFMAOpcodeTable[mid][0])
      end = mid;
    else
      start = mid + 1;
  }
  if (start == end)
    return -1; // Instruction doesn't exist in this table.

  return getAltVSXFMAOpcodeTable[mid][1];
}

// getNonRecordFormOpcode
int getNonRecordFormOpcode(uint16_t Opcode) {
static const uint16_t getNonRecordFormOpcodeTable[][2] = {
  { PPC::ADD4o, PPC::ADD4 },
  { PPC::ADD8o, PPC::ADD8 },
  { PPC::ADDC8o, PPC::ADDC8 },
  { PPC::ADDCo, PPC::ADDC },
  { PPC::ADDE8o, PPC::ADDE8 },
  { PPC::ADDEo, PPC::ADDE },
  { PPC::ADDICo, PPC::ADDIC },
  { PPC::ADDME8o, PPC::ADDME8 },
  { PPC::ADDMEo, PPC::ADDME },
  { PPC::ADDZE8o, PPC::ADDZE8 },
  { PPC::ADDZEo, PPC::ADDZE },
  { PPC::AND8o, PPC::AND8 },
  { PPC::ANDC8o, PPC::ANDC8 },
  { PPC::ANDCo, PPC::ANDC },
  { PPC::ANDo, PPC::AND },
  { PPC::CNTLZDo, PPC::CNTLZD },
  { PPC::CNTLZWo, PPC::CNTLZW },
  { PPC::DIVDUo, PPC::DIVDU },
  { PPC::DIVDo, PPC::DIVD },
  { PPC::DIVWUo, PPC::DIVWU },
  { PPC::DIVWo, PPC::DIVW },
  { PPC::EQV8o, PPC::EQV8 },
  { PPC::EQVo, PPC::EQV },
  { PPC::EXTSB8o, PPC::EXTSB8 },
  { PPC::EXTSBo, PPC::EXTSB },
  { PPC::EXTSH8o, PPC::EXTSH8 },
  { PPC::EXTSHo, PPC::EXTSH },
  { PPC::EXTSW_32_64o, PPC::EXTSW_32_64 },
  { PPC::EXTSWo, PPC::EXTSW },
  { PPC::FABSDo, PPC::FABSD },
  { PPC::FABSSo, PPC::FABSS },
  { PPC::FADDSo, PPC::FADDS },
  { PPC::FADDo, PPC::FADD },
  { PPC::FCFIDSo, PPC::FCFIDS },
  { PPC::FCFIDUSo, PPC::FCFIDUS },
  { PPC::FCFIDUo, PPC::FCFIDU },
  { PPC::FCFIDo, PPC::FCFID },
  { PPC::FCPSGNDo, PPC::FCPSGND },
  { PPC::FCPSGNSo, PPC::FCPSGNS },
  { PPC::FCTIDUZo, PPC::FCTIDUZ },
  { PPC::FCTIDZo, PPC::FCTIDZ },
  { PPC::FCTIDo, PPC::FCTID },
  { PPC::FCTIWUZo, PPC::FCTIWUZ },
  { PPC::FCTIWZo, PPC::FCTIWZ },
  { PPC::FCTIWo, PPC::FCTIW },
  { PPC::FDIVSo, PPC::FDIVS },
  { PPC::FDIVo, PPC::FDIV },
  { PPC::FMADDSo, PPC::FMADDS },
  { PPC::FMADDo, PPC::FMADD },
  { PPC::FMRo, PPC::FMR },
  { PPC::FMSUBSo, PPC::FMSUBS },
  { PPC::FMSUBo, PPC::FMSUB },
  { PPC::FMULSo, PPC::FMULS },
  { PPC::FMULo, PPC::FMUL },
  { PPC::FNABSDo, PPC::FNABSD },
  { PPC::FNABSSo, PPC::FNABSS },
  { PPC::FNEGDo, PPC::FNEGD },
  { PPC::FNEGSo, PPC::FNEGS },
  { PPC::FNMADDSo, PPC::FNMADDS },
  { PPC::FNMADDo, PPC::FNMADD },
  { PPC::FNMSUBSo, PPC::FNMSUBS },
  { PPC::FNMSUBo, PPC::FNMSUB },
  { PPC::FRESo, PPC::FRES },
  { PPC::FREo, PPC::FRE },
  { PPC::FRIMDo, PPC::FRIMD },
  { PPC::FRIMSo, PPC::FRIMS },
  { PPC::FRINDo, PPC::FRIND },
  { PPC::FRINSo, PPC::FRINS },
  { PPC::FRIPDo, PPC::FRIPD },
  { PPC::FRIPSo, PPC::FRIPS },
  { PPC::FRIZDo, PPC::FRIZD },
  { PPC::FRIZSo, PPC::FRIZS },
  { PPC::FRSPo, PPC::FRSP },
  { PPC::FRSQRTESo, PPC::FRSQRTES },
  { PPC::FRSQRTEo, PPC::FRSQRTE },
  { PPC::FSELDo, PPC::FSELD },
  { PPC::FSELSo, PPC::FSELS },
  { PPC::FSQRTSo, PPC::FSQRTS },
  { PPC::FSQRTo, PPC::FSQRT },
  { PPC::FSUBSo, PPC::FSUBS },
  { PPC::FSUBo, PPC::FSUB },
  { PPC::MULHDUo, PPC::MULHDU },
  { PPC::MULHDo, PPC::MULHD },
  { PPC::MULHWUo, PPC::MULHWU },
  { PPC::MULHWo, PPC::MULHW },
  { PPC::MULLDo, PPC::MULLD },
  { PPC::MULLWo, PPC::MULLW },
  { PPC::NAND8o, PPC::NAND8 },
  { PPC::NANDo, PPC::NAND },
  { PPC::NEG8o, PPC::NEG8 },
  { PPC::NEGo, PPC::NEG },
  { PPC::NOR8o, PPC::NOR8 },
  { PPC::NORo, PPC::NOR },
  { PPC::OR8o, PPC::OR8 },
  { PPC::ORC8o, PPC::ORC8 },
  { PPC::ORCo, PPC::ORC },
  { PPC::ORo, PPC::OR },
  { PPC::RLDCLo, PPC::RLDCL },
  { PPC::RLDCRo, PPC::RLDCR },
  { PPC::RLDICLo, PPC::RLDICL },
  { PPC::RLDICRo, PPC::RLDICR },
  { PPC::RLDICo, PPC::RLDIC },
  { PPC::RLDIMIo, PPC::RLDIMI },
  { PPC::RLWIMI8o, PPC::RLWIMI8 },
  { PPC::RLWIMIo, PPC::RLWIMI },
  { PPC::RLWINM8o, PPC::RLWINM8 },
  { PPC::RLWINMo, PPC::RLWINM },
  { PPC::RLWNMo, PPC::RLWNM },
  { PPC::SLDo, PPC::SLD },
  { PPC::SLWo, PPC::SLW },
  { PPC::SRADIo, PPC::SRADI },
  { PPC::SRADo, PPC::SRAD },
  { PPC::SRAWIo, PPC::SRAWI },
  { PPC::SRAWo, PPC::SRAW },
  { PPC::SRDo, PPC::SRD },
  { PPC::SRWo, PPC::SRW },
  { PPC::SUBF8o, PPC::SUBF8 },
  { PPC::SUBFC8o, PPC::SUBFC8 },
  { PPC::SUBFCo, PPC::SUBFC },
  { PPC::SUBFE8o, PPC::SUBFE8 },
  { PPC::SUBFEo, PPC::SUBFE },
  { PPC::SUBFME8o, PPC::SUBFME8 },
  { PPC::SUBFMEo, PPC::SUBFME },
  { PPC::SUBFZE8o, PPC::SUBFZE8 },
  { PPC::SUBFZEo, PPC::SUBFZE },
  { PPC::SUBFo, PPC::SUBF },
  { PPC::XOR8o, PPC::XOR8 },
  { PPC::XORo, PPC::XOR },
}; // End of getNonRecordFormOpcodeTable

  unsigned mid;
  unsigned start = 0;
  unsigned end = 128;
  while (start < end) {
    mid = start + (end - start)/2;
    if (Opcode == getNonRecordFormOpcodeTable[mid][0]) {
      break;
    }
    if (Opcode < getNonRecordFormOpcodeTable[mid][0])
      end = mid;
    else
      start = mid + 1;
  }
  if (start == end)
    return -1; // Instruction doesn't exist in this table.

  return getNonRecordFormOpcodeTable[mid][1];
}

// getRecordFormOpcode
int getRecordFormOpcode(uint16_t Opcode) {
static const uint16_t getRecordFormOpcodeTable[][2] = {
  { PPC::ADD4, PPC::ADD4o },
  { PPC::ADD8, PPC::ADD8o },
  { PPC::ADDC, PPC::ADDCo },
  { PPC::ADDC8, PPC::ADDC8o },
  { PPC::ADDE, PPC::ADDEo },
  { PPC::ADDE8, PPC::ADDE8o },
  { PPC::ADDIC, PPC::ADDICo },
  { PPC::ADDME, PPC::ADDMEo },
  { PPC::ADDME8, PPC::ADDME8o },
  { PPC::ADDZE, PPC::ADDZEo },
  { PPC::ADDZE8, PPC::ADDZE8o },
  { PPC::AND, PPC::ANDo },
  { PPC::AND8, PPC::AND8o },
  { PPC::ANDC, PPC::ANDCo },
  { PPC::ANDC8, PPC::ANDC8o },
  { PPC::CNTLZD, PPC::CNTLZDo },
  { PPC::CNTLZW, PPC::CNTLZWo },
  { PPC::DIVD, PPC::DIVDo },
  { PPC::DIVDU, PPC::DIVDUo },
  { PPC::DIVW, PPC::DIVWo },
  { PPC::DIVWU, PPC::DIVWUo },
  { PPC::EQV, PPC::EQVo },
  { PPC::EQV8, PPC::EQV8o },
  { PPC::EXTSB, PPC::EXTSBo },
  { PPC::EXTSB8, PPC::EXTSB8o },
  { PPC::EXTSH, PPC::EXTSHo },
  { PPC::EXTSH8, PPC::EXTSH8o },
  { PPC::EXTSW, PPC::EXTSWo },
  { PPC::EXTSW_32_64, PPC::EXTSW_32_64o },
  { PPC::FABSD, PPC::FABSDo },
  { PPC::FABSS, PPC::FABSSo },
  { PPC::FADD, PPC::FADDo },
  { PPC::FADDS, PPC::FADDSo },
  { PPC::FCFID, PPC::FCFIDo },
  { PPC::FCFIDS, PPC::FCFIDSo },
  { PPC::FCFIDU, PPC::FCFIDUo },
  { PPC::FCFIDUS, PPC::FCFIDUSo },
  { PPC::FCPSGND, PPC::FCPSGNDo },
  { PPC::FCPSGNS, PPC::FCPSGNSo },
  { PPC::FCTID, PPC::FCTIDo },
  { PPC::FCTIDUZ, PPC::FCTIDUZo },
  { PPC::FCTIDZ, PPC::FCTIDZo },
  { PPC::FCTIW, PPC::FCTIWo },
  { PPC::FCTIWUZ, PPC::FCTIWUZo },
  { PPC::FCTIWZ, PPC::FCTIWZo },
  { PPC::FDIV, PPC::FDIVo },
  { PPC::FDIVS, PPC::FDIVSo },
  { PPC::FMADD, PPC::FMADDo },
  { PPC::FMADDS, PPC::FMADDSo },
  { PPC::FMR, PPC::FMRo },
  { PPC::FMSUB, PPC::FMSUBo },
  { PPC::FMSUBS, PPC::FMSUBSo },
  { PPC::FMUL, PPC::FMULo },
  { PPC::FMULS, PPC::FMULSo },
  { PPC::FNABSD, PPC::FNABSDo },
  { PPC::FNABSS, PPC::FNABSSo },
  { PPC::FNEGD, PPC::FNEGDo },
  { PPC::FNEGS, PPC::FNEGSo },
  { PPC::FNMADD, PPC::FNMADDo },
  { PPC::FNMADDS, PPC::FNMADDSo },
  { PPC::FNMSUB, PPC::FNMSUBo },
  { PPC::FNMSUBS, PPC::FNMSUBSo },
  { PPC::FRE, PPC::FREo },
  { PPC::FRES, PPC::FRESo },
  { PPC::FRIMD, PPC::FRIMDo },
  { PPC::FRIMS, PPC::FRIMSo },
  { PPC::FRIND, PPC::FRINDo },
  { PPC::FRINS, PPC::FRINSo },
  { PPC::FRIPD, PPC::FRIPDo },
  { PPC::FRIPS, PPC::FRIPSo },
  { PPC::FRIZD, PPC::FRIZDo },
  { PPC::FRIZS, PPC::FRIZSo },
  { PPC::FRSP, PPC::FRSPo },
  { PPC::FRSQRTE, PPC::FRSQRTEo },
  { PPC::FRSQRTES, PPC::FRSQRTESo },
  { PPC::FSELD, PPC::FSELDo },
  { PPC::FSELS, PPC::FSELSo },
  { PPC::FSQRT, PPC::FSQRTo },
  { PPC::FSQRTS, PPC::FSQRTSo },
  { PPC::FSUB, PPC::FSUBo },
  { PPC::FSUBS, PPC::FSUBSo },
  { PPC::MULHD, PPC::MULHDo },
  { PPC::MULHDU, PPC::MULHDUo },
  { PPC::MULHW, PPC::MULHWo },
  { PPC::MULHWU, PPC::MULHWUo },
  { PPC::MULLD, PPC::MULLDo },
  { PPC::MULLW, PPC::MULLWo },
  { PPC::NAND, PPC::NANDo },
  { PPC::NAND8, PPC::NAND8o },
  { PPC::NEG, PPC::NEGo },
  { PPC::NEG8, PPC::NEG8o },
  { PPC::NOR, PPC::NORo },
  { PPC::NOR8, PPC::NOR8o },
  { PPC::OR, PPC::ORo },
  { PPC::OR8, PPC::OR8o },
  { PPC::ORC, PPC::ORCo },
  { PPC::ORC8, PPC::ORC8o },
  { PPC::RLDCL, PPC::RLDCLo },
  { PPC::RLDCR, PPC::RLDCRo },
  { PPC::RLDIC, PPC::RLDICo },
  { PPC::RLDICL, PPC::RLDICLo },
  { PPC::RLDICR, PPC::RLDICRo },
  { PPC::RLDIMI, PPC::RLDIMIo },
  { PPC::RLWIMI, PPC::RLWIMIo },
  { PPC::RLWIMI8, PPC::RLWIMI8o },
  { PPC::RLWINM, PPC::RLWINMo },
  { PPC::RLWINM8, PPC::RLWINM8o },
  { PPC::RLWNM, PPC::RLWNMo },
  { PPC::SLD, PPC::SLDo },
  { PPC::SLW, PPC::SLWo },
  { PPC::SRAD, PPC::SRADo },
  { PPC::SRADI, PPC::SRADIo },
  { PPC::SRAW, PPC::SRAWo },
  { PPC::SRAWI, PPC::SRAWIo },
  { PPC::SRD, PPC::SRDo },
  { PPC::SRW, PPC::SRWo },
  { PPC::SUBF, PPC::SUBFo },
  { PPC::SUBF8, PPC::SUBF8o },
  { PPC::SUBFC, PPC::SUBFCo },
  { PPC::SUBFC8, PPC::SUBFC8o },
  { PPC::SUBFE, PPC::SUBFEo },
  { PPC::SUBFE8, PPC::SUBFE8o },
  { PPC::SUBFME, PPC::SUBFMEo },
  { PPC::SUBFME8, PPC::SUBFME8o },
  { PPC::SUBFZE, PPC::SUBFZEo },
  { PPC::SUBFZE8, PPC::SUBFZE8o },
  { PPC::XOR, PPC::XORo },
  { PPC::XOR8, PPC::XOR8o },
}; // End of getRecordFormOpcodeTable

  unsigned mid;
  unsigned start = 0;
  unsigned end = 128;
  while (start < end) {
    mid = start + (end - start)/2;
    if (Opcode == getRecordFormOpcodeTable[mid][0]) {
      break;
    }
    if (Opcode < getRecordFormOpcodeTable[mid][0])
      end = mid;
    else
      start = mid + 1;
  }
  if (start == end)
    return -1; // Instruction doesn't exist in this table.

  return getRecordFormOpcodeTable[mid][1];
}

} // End PPC namespace
} // End llvm namespace
#endif // GET_INSTRMAP_INFO

